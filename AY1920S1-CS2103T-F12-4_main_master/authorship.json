[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d Billboard"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image:https://travis-ci.com/AY1920S1-CS2103T-F12-4/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.com/AY1920S1-CS2103T-F12-4/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "https://ci.appveyor.com/api/projects/status/opkxh7lhild648nb[image:https://ci.appveyor.com/api/projects/status/opkxh7lhild648nb?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F12-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F12-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/b7f7fb8990974112a36c29c6655c9379[\"Codacy code quality\", link\u003d\"https://www.codacy.com/manual/weiijiie/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103T-F12-4/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* This is a financial tracking application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* This app provides basic expense management functions and more advanced features such as advanced searching and sorting, automatic archiving, as well as undo options for most operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003d\u003d Target Users"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* Users who can type fast, and prefer typing over mouse/voice commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* Users who have too many transactions to keep track of and wants to manage their expenses more efficiently"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "http://hamcrest.org/JavaHamcrest/[HamCrest], https://site.mockito.org/[Mockito]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at `https://se-education.org`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 1,
      "xinmingzh": 8,
      "-": 27,
      "weiijiie": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "mainClassName \u003d \u0027seedu.billboard.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    testCompile \u0027org.mockito:mockito-core:3.1.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    testImplementation \u0027org.hamcrest:hamcrest:2.1\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    archiveName \u003d \u0027billboard.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        \u0027site-name\u0027: \u0027Billboard\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://https://github.com/AY1920S1-CS2103T-F12-4/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 4,
      "-": 151,
      "weiijiie": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Financial Tracker is being developed by team https://github.com/AY1920S1-CS2103T-F12-4[CS2103T-F12-4]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Chia Wei Hao, David"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::davidcwh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "{empty}[https://github.com/davidcwh[github]] [\u003c\u003cdavidcwh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Fang WeiWen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::waynefong0401.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{empty}[http://github.com/waynefong0401[github]] [\u003c\u003cwaynefong0401#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Responsibilities: In charge of Model, Testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Huang WeiJie"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::weiijiie.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "{empty}[http://github.com/weiijiie[github]] [\u003c\u003cweiijiie#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Responsibilities: Integration, Code Quality"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Lee WaiFong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::waifonglee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{empty}[http://github.com/waifonglee[github]] [\u003c\u003cwaifonglee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Responsibilities: Javafx expert"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Zhou XinMing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::xinmingzh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "{empty}[http://github.com/xinmingzh[github]] [\u003c\u003cxinmingzh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Responsibilities: Scheduling and tracking, In charge of Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 21,
      "waynefong0401": 2,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F12-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* *Email us* : You can also reach us at `mailto:xinming.z@u.nus.edu[Zhou Xinming]` `mailto:e0324662@u.nus.edu[Lee Wai Fong]` `mailto:e0318499@u.nus.edu[Wayne Fang]` `mailto:e0325854@u.nus.edu[Huang Weijie]` `mailto:davidchia@u.nus.edu[David Chia]`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 3,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d Billboard - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "By: `Team F12-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g. CommandBox`, `ResultDisplay`, `ExpenseListPanel`, `StatusBarFooter`, `ChartBox` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* Has a specialized `Chart` component that deals specifically with the generation and rendering of charts onto the `MainWindow`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".  `Logic` uses the `BillboardParser` class to parse the user command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* stores the Billboard and ArchiveWrapper data, i.e current expenses and archived past expenses."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* stores `UniqueTagList` and `TagCountManager` to track tags."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExpense\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Billboard`, which `Expense` can reference. This would allow `Billboard` to only require one `Tag` object per unique `Tag`, instead of each `Expense` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* can save the Billboard data in json format and read it back."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Classes used by multiple components are in the `seedu.billboardbook.commons` package."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedBillboard`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "If you successfully execute a command that will change the Billboard state,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "the current Billboard state will automatically commit to the `VersionedBillboard`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The current state will be store into the `stateList`,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "and a state pointer `currentStatePointer` will be maintained."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " List of command that will commit to `VersionedBillboard`:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- AddArchiveCommand"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- AddCommand"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- AddTagCommand"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- ClearCommand"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- DeleteArchiveCommand"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- DeleteCommand"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- RevertArchiveCommand"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- EditCommand"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "- RemoveTagCommand"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* `VersionedBillboard#commit()` -- Saves the current billboard state in its history."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* `VersionedBillboard#undo()` -- Restores the previous billboard state from its history."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* `VersionedBillboard#redo()` -- Restores a previously undone billboard state from its history."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "These operations is exposed in the `VersionedBillboard` class as `VersionedBillboard#commit()`., `VersionedBillboard#undo()` and `VersionedBillboard#redo()` respectively."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBillboard` will be initialized with the initial billboard state, and the `currentStatePointer` pointing to that single billboard state."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".Initial state of VersionedBillboard"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th expense in the billboard. The `delete` command calls `VersionedBillboard#commit()`, causing the modified state of the billboard after the `delete 5` command executes to be saved in the `stateList`, and the `statePointer` is shifted to the newly inserted billboard state."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".State of VersionedBillboard after \"delete 5\" command"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 3. The user executes `add n/buy ...` to add a new person. The `add` command also calls `Model#commit()`, causing another modified billboard state to be saved into the `stateList`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".State of VersionedBillboard after \"add n/buy...\" command"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "If a command fails its execution, it will not call `VersionedBillboard#commit()`, so the billboard state will not be saved into the `stateList`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 4. The user now decides that adding the expense was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `VersionedBillboard#undo()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous billboard state, and restores the billboard to that state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".State of VersionedBillboard after \"undo\" command"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "If the `currentStatePointer` is pointing to the initial billboard state,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "then there are no previous billboard states to restore."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The `undo` command uses `VersionedBillboard#isRedoable()` to check if this is the case."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".Interactions Inside the Logic Component for the `undo` Command"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The `redo` command does the opposite -- it calls `VersionedBillboard#redo()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the billboard to that state."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "If the `currentStatePointer` is at index `stateList.size() - 1`, pointing to the latest billboard state, then there are no undone billboard states to restore. The `redo` command uses `VersionedBillboard#isRedoable()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the billboard, such as `list`, will usually not call `VersionedBillboard#commit()`, `VersionedBillboard#undo()` or `VersionedBillboard#redo()`. Thus, the `stateList` remains unchanged."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".State of VersionedBillboard after \"list\" command"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 6. The user executes `clear`, which calls `VersionedBillboard#commit()`. Since the `currentStatePointer` is not pointing at the end of the `stateList`, all billboard states after the `statePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/buy ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".State of VersionedBillboard after \"clear\" command"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire billboard."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the expense being deleted)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of billboard states."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `Model` and `VersionedBillboard`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "// tag::archive[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Archive"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Modelling Archive"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The archive feature supports the following actions:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Creating an archive"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Adding an expense to an archive"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Reverting/\"unarchiving\" an archived expense"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Deleting an archived expense"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Displaying the list of expense of a particular archive"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Listing all existing archive names"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "These actions are facilitated by the `ArchiveWrapper` and `Archive` classes:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Structure and associations of `ArchiveWrapper` and `Archive` classes"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::ArchiveClassDiagram.png[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*  `*Archive*` extends from `*ExpenseList*` in order to encapsulate an archive name and a list of expenses together as an archive."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper*` manages all existing archives and hashes each `*Archive*` object to its archive name."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The implementation of the archive feature is located in the `*Model*` component in terms of the overall architecture of _Billboard_."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ArchiveWrapper*` is used in `*ModelManager*` to manage all archives. Its respective operations are called to access and manipulate archive expenses when an archive command is entered. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Such operations include:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#AddArchive(Archive)*` - Adds the given archive to the current map of archive objects."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#HasArchive(String)*` - Checks if the specified archive by the given archive name exists."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#removeArchive(Archive)*` - Deletes the given archive from the current map of archive objects. (Assumes given archive already exists)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#hasArchiveExpense(String, Expense)*` - Checks if the specified archive by the given archive name has the given expense."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#addArchiveExpense(String, Expense)*` - Adds the given expense into the specified archive by the given archive name. (Assumes given archive already exists)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#removeArchiveExpense(String, Expense)*` - Deletes the given expense into the specified archive by the given archive name. (Assumes given archive and expense already exists)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#getArchiveNames()*` - Returns a set of all existing archive names"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "These operations are exposed in the `*Model*` interface respectively as:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*Model#addArchive(Archive)*`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*Model#HasArchive(String)*`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*Model#deleteArchive(Archive)*`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*Model#hasArchiveExpense(String, Expense)*`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*Model#addArchiveExpense(String, Expense)*`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*Model#deleteArchiveExpense(String, Expense)*`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*Model#getArchiveNames()*`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Given below is an example usage scenario of the add expense to archive function, showing how the command is parsed in `*Logic*` and how it interacts with `*Model*`: +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Step 1. The user has the application running and has a non empty list of current expenses. The user can enter the `list` command to bring up"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "this list. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Step 2. The user executes the command `archive add 3 arc/archiveName` to archive an expense. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The command is first parsed by `*BillboardParser*` to determine what kind of general command it is. `archive` indicates it is an archive command so the remaining input is parsed through `*ArchiveCommandParser*`. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ArchiveCommandParser*` determines which archive command should be called. `add` indicates it is an add command, so the input is parsed for the final time through `*AddArchiveCommandParser*` to extract out the arguments entered for the operation."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "In this case, the arguments are `3` and `archiveName` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This layered parsing process can be visualised below:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Process of parsing `AddArchiveCommand` in a cropped sequence diagram"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::AddArchiveCommandSequenceDiagram_Parsing.png[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Step 3. `*AddArchiveCommandParser*` then returns an `*AddArchiveCommand*` object to be executed. The `*AddArchiveCommand*` performs two checks before executing any changes:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* First, it is changed if entered index, `3`, is a valid index from the current expense list. An exception is thrown and the command is aborted if the index is invalid,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "so `*Model*` is left unmodified in this case."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Next, it is checked if the entered archive name, `archiveName`, is an existing archive by calling `*Model#HasArchive(String)*`. If the archive does not already exist,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "then a new archive is created with the given archive name using `*Model#addArchive(Archive)*`. +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "After the checks are completed and if no exception is thrown, the command executes the archiving of the expense through these steps:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* The expense to be archived is first retrieved by `*Model#getFilteredList()#get(int)*`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* The expense is then deleted from the list of current expenses by calling `*model#deleteExpense(Expense)*`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Next, the expense\u0027s `archiveName` field is updated using `*Expense#archiveTo(String)*`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Lastly, the expense is added to the specified archive using `*Model#addArchiveExpense(String, Expense)*`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "These interactions with `*Model*` by `*AddArchiveCommand*` can be shown in the cropped portion of the full sequence diagram below:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Interactions between `*Model*` and `*AddArchiveCommand*` during the execution of the command"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::AddArchiveCommandSequenceDiagram_executeCommand.png[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Step 4. Finally, a `*CommandResult*` object initialised with the add expense to archive success message is returned to indicate to the user that the operation was successful. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Full Sequence diagram of the operation:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Full sequence diagram of the operation"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::AddArchiveCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `*AddArchiveCommand*`:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".`*AddArchiveCommand*` activity diagram"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::AddArchiveCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Storing Archive"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "All expenses, archived and non-archived, are stored in a single JSON file. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Upon start up of the application, all expenses are retrieved from JSON format and passed into"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ModelManager*` as a combined `*Billboard*` object. During the initialization of `*ModelManager*`, the expenses in this `*Billboard*` object are filtered out into non-archived and"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "archived expenses by each `*Expense*` object\u0027s `*archiveName*` field. The separate lists of non-archive and archive expenses are then used to initialize new `*Billboard*` and"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ArchiveWrapper*` objects of `*ModelManager*` respectively. The `*Billboard*` object of `*ModelManager*` is used to maintain non-archive expenses.+"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "After each command is executed, the expenses in `*Model*` are saved into the JSON file. The method `*Model#getCombinedBillboard*` is called which collates all `*Expense*` objects"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "from its `*Billboard*` and `*ArchiveWrapper*` objects together into a single list and creates a new combined `*Billboard*` object. This combined `*Billboard*` is returned and used by"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*Storage*` to serialize into JSON format and writes it into the JSON file."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure to hold archives in `ArchiveWrapper`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* ** Alternative 1 (Current implementation): ** Use of HashMap, mapping each archive name to its `*Archive*` object"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Pros: Accessing data in a HashMap is instant. Therefore, retrieving an archive when performing add/delete archive expense operations or checking if an archive exists is fast."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Cons: As `*ArchiveWrapper*` is initialized with a single list of archive `*Expense*` objects, the initialization process is slower as this given list needs to be iterated"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "through to filter each `*Expense*` object into their respective `*Archive*` objects in the HashMap."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* ** Alternative 2: ** Use a single list to store all archive expenses"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Pros: Initialization of `*ArchiveWrapper*` is fast, as the given list of archive expenses need not be processed."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Cons: Some operations, like delete archive expense or get all archive names, are slower as the entire list must be iterated through each time in the worst case scenario."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "For example, to check if an expense exists in a particular archive, the entire list must be iterated if the expense to be found is at the end of the list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storing archives"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* ** Alternative 1 (Current implementation): ** Storing non-archive and archive expenses together"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Pros: No new storage classes need to be implemented, as this implementation uses the existing classes only."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Cons: Initialization process of `*ModelManager*` is slower as the expenses need to be filtered into archive and non-archive expenses first."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* ** Alternative 2: ** Storing archive expenses as `*Archive*` objects in a separate file"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Pros: Initialization process of `*ModelManager*` is faster, as its `ArchiveWrapper` object can be initialized directly with the list of `Archive` objects retrieved from the JSON file."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "No filtering of archive and non-archive expense from the same list is needed."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Cons: More difficult to implement, as more JSON storage classes must be added and knowledge on serialising and deserialising new objects is needed."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "// end::archive[]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "// tag::tagging[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d Tagging"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The tag feature supports the following operations:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* Adding tags to an expense"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* Removing tags from an expense"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* Filtering expenses by tags"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* Listing all existing tags"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "These actions are facilitated by the `*UniqueTagList*` and `*TagCountManager*` classes:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*UniqueTagList*` maps `*String*` to `*Tag*` where `*String*` is the name of the `*Tag*`. It ensures that the same `*Tag*` object is referenced instead of creating many `*Tag*` objects of the same name during operations."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*TagCountManager*` maps `*Tag*` to `*Integer*`, where `*Integer*` is the number of `*Expense*` tagged with each `*Tag*`. It allows `*Tag*` objects that are not tagged with any `*Expense*` to be tracked and removed."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Operations include:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*UniqueTagList#retrieveTags(List\u003cString\u003e)*` -- Retrieves corresponding tags from `*UniqueTagList*` based on the list of tag names."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*UniqueTagList#removeAll(List\u003cTag\u003e)*` -- Removes tags given in the list from the `*UniqueTagList*`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*UniqueTagList#getTagNames()*` -- Returns a list of existing tag names."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*TagCountManager#incrementAllCount(Set\u003cTag\u003e)*` -- Increments the `*Integer*` mapped to the tags in the set by 1."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*TagCountManager#decreaseAllCount(Set\u003cTag\u003e)*` -- Decreases the `*Integer*` mapped to the tags in the set by 1."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*TagCountManager#removeZeroCount()*` -- Removes all mappings where the `*Integer*` is equal to 0."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "These operations are exposed in the `*Model*` interface as:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*Model#retrieveTags(List\u003cString\u003e)*`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*Model#incrementCount(Set\u003cTag\u003e)*`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*Model#decreaseCount(Set\u003cTag\u003e)*` -- `*TagCountManager#removeZeroCount()*` and `*UniqueTagList#removeAll(List\u003cTag\u003e)*` are called in this method to remove any tag not tagged to any expense from the `*UniqueTagList*` and `*TagCountManager*`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*Model#getTagNames()*`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Given below is an example usage scenario and how adding tag executes at every step."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Step 1:**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The user launches the application. The `*Model*` is initialized with saved data. All tags are loaded into `*UniqueTagList*` and `*TagCountManager*`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Step 2:**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "User enters the command `tag add 1 t/test t/test2` to add tags to the `*Expense*` at index 1 in Billboard. +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*2a*. `*BillboardParser*` parses this command, creating a `*TagCommandParser*` after determining that it is a tag command. +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*2b*. The `*TagCommandParser*` then parses `add 1 t/test t/test2` and creates an `*AddTagCommandParser*` after determining that it is a command to add tags. +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*2c*. Subsequently, the `*AddTagCommandParser*` parses `1 t/test1 t/test2` into `*Index*` 1 and"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "a list of `*String*` consisting of `test1` and `test2`. `*AddTagCommandParser*` creates `*AddTagCommand*` with the `*Index*` and list of `*String*` as parameters."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Step 3:**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "`*LogicManager*` executes the `*AddTagCommand*`. +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "During execution, +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*3a*. `*AddTagCommand*` calls `*Model#retrieveTags(List\u003cString\u003e)*` on the list of `*String*` consisting of `test1` and `test2` which returns a set of `*Tag*` with tag names `test1` and `test2`. +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*3b*. `*AddTagCommand*` then calls `*Model#incrementCount(Set\u003cTag\u003e)*` on the set of `*Tag*`. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*3c*. Lastly, `*AddTagCommand*` calls `*Model#setExpense(Expense, Expense)*` which edits and updates the `*Expense*` at index 1 in the `*Model*`. The updated `*Expense*` is then reflected on the GUI."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Duplicate tags in an `*Expense*` is not allowed. +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If the user tries to add an existing `*Tag*` to an `*Expense*`, `*AddTagCommand*` throws an exception, leading to an error message. +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If the user tries to add duplicate `*Tag*`, i.e enter 2 of the same `*Tag*`, `*AddTagCommand*` adds the tag once and increments the number of expenses tagged to it by 1."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The following sequence diagram shows how the adding tag operation works."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image::AddTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Figure 21. Sequence diagram of executing AddTagCommand."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "NOTE: The lifeline for `*TagCommandParser*` and `*AddTagCommandParser*` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The following activity diagram summarizes what happens when a user enters a command to add tags to an expense."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image::AddTagActivityDiagram.png[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Figure 22. Activity diagram of executing AddTagCommand."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support tag commands"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Alternative 1 (current choice):** Use a `*UniqueTagList*` to map tag names to `*Tag*` and `*TagCountManager*` to map `*Tag*` to number of `*Expense*` tagged to it."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Each structure has only one responsibility."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Fast retrieval and update of data"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Requires maintenance of both structures as they need to sync with each other."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Retrieval of all `*Expense*` under a `*Tag*` requires filtering through the whole list of `*Expense*`."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Alternative 2 :** Have each `*Tag*` store a list of `*Expense*` tagged to it."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Fast retrieval of all `*Expenses*` under each `*Tag*`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Circular dependency"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Since implementation of Billboard objects are immutable, there is a constant need to update the `*Expense*` in the list even after executing non-tag related commands."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Alternative 3 :** Use one map to map `*Tag*` to `*Expense*` tagged to it."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Fast retrieval of all `*Expenses*` under each `*Tag*`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Since implementation of Billboard objects are immutable, there is a constant need to update the `*Expense*` in the list even after executing non-tag related commands."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "// end::tagging[]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "// find:finding[]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003d\u003d\u003d [Enhanced] Find"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "The find feature supports the finding expenses by any combination of the following conditions:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* Keywords"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* Lower/upper amount limit"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* Lower/upper creation date limit"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "These actions are facilitated by the `MultiArgPredicate` class:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* `MultiArgPredicate` implements the `Predicate` interface. It enables filtering of expenses by multiple attributes"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "through keeping track of a set of predicates that can be applied when prompted by user input."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Operations include:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* `MultiArgPredicate#setKeywords(List\u003cString\u003e)` -- Set list of keywords to search by."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* `MultiArgPredicate#setDateRange(CreatedDate, CreatedDate)` -- Set start date and end date limit to search by."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* `MultiArgPredicate#setAmtRange(Amount, Amount)` -- Set upperLimit and lowerLimit of amount of expenses to search by."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Given below is an example usage scenario and how the find mechanism behaves at each step."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Step 1."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "The user launches the application. The `Model` is initialized with saved data. All expenses are loaded into `FilteredList`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Step 2."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "User enters the command `find d/keywords a/lowerAmtLimit al/upperAmtLimit sd/startDate ed/endDate` to find expenses that matches conditions set by user input. `BillboardParser` parses the command, creating a `FindCommandParser`."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "The `FindCommandParser` then parses `find d/keywords a/lowerAmtLimit al/upperAmtLimit sd/startDate ed/endDate` to create a `MultiArgPredicate` inputted with the different filter parameters."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "The `MultiArgPredicate` is then used to create the `FindCommand`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Step 3."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`LogicManager` executes the `FindCommand`. During execution, `FindCommand` calls `Model#updateFilteredExpenses(Predicate\u003cExpense\u003e)` on the list consisting of `test1` and `test2` which returns a set of `Tag`."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`Model#incrementCount(Set\u003cTag\u003e)` is then called on the set of `Tag`. The 1st `Expense` is edited and updated in the `Model` using `Model#setExpense(Expense, Expense)` and is then shown on the UI."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "If the user tries to input 2 conditions of the same prefix, only the last condition will be used."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "// The following sequence diagram shows how the enhanced find operation works."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "// image::AddTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "// The following activity diagram summarizes what happens when a user enters a command to find expenses by certain conditions."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "// image::AddTagActivityDiagram.png[]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support enhanced find command"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* **Alternative 1 (current choice):** Use a `MultiArgPredicate` to filter selected expense from the `FilteredList`."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`MultiArgPredicate` holds and combines a set of predicates of various types into a single predicate."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Set of predicates can but do not need to include `AllContainsKeywordsPredicate`, `AmountWithinRangePredicate` and `DateWithinRangePredicate`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** Only one variation of input command required."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** No need for different kinds of find commands to handle filtering by different attribute."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** No need for different kinds of find command parsers to handle parsing of different variations of input command."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** Higher complexity of code in FindCommandParser."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** User need to use prefix to indicate type of conditions inputted."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** Additional predicate `MultiArgPredicate` required to handle filtering by more than one condition."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* **Alternative 2 :** `FindCommandParser` maps input command to individual type of predicate that is used to create find command."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** Commands are simpler and shorter."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** Limited functionality - can only find by one condition."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "*** Use of different types of find commands."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "// end::finding[]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Billboard includes a dynamically updating statistics panel containing a chart. It has the following functionality: +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** Every time the displayed list of expenses changes, the chart automatically updates with the new changes"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** Users can submit commands to change the displayed chart as well as change configuration options for the charts"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "This functionality is made possible through the statistics module. The statistics module is in charge of generating statistics from the currently displayed expenses and rendering it onto the main window."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "There are 2 components that help to do this - the chart component and the statistics generator component."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[[Design-Ui-Chart]]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d Chart component"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[[fig-ChartClassDiagram]]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".Structure of the Chart Component"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::ChartClassDiagram.png[]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "There is a special `Chart` component that deals with the generation and rendering of specific charts based on user input and the expenses being displayed."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The `ChartBox` is the main orchestrating class. It is updated with the latest `StatisticsFormat` and `StatisticsFormatOptions` that the user selects, via the `MainWindow`."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "These are classes that represent user configuration on what to be displayed. Upon being updated, it creates the appropriate"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`ExpenseChart` with the selected options, to display the selected statistic based on the currently displayed expenses. To transform the data from"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "the displayed list of expenses to the statistic format required, the `StatisticsGenerator` component is used. The concrete `ExpenseChart` obtains the formatted statistics from the"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`StatisticsGenerator` component."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d Statistics Generation Component"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".Structure of the Statistics Generation Component"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::StatisticsGeneratorClassDiagram.png[]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The concrete `ExpenseChart` obtains the data to be displayed from the `StatisticsGenerator` component. A number of classes,"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "such as `BreakdownGenerator` and `TimelineGenerator` extend `StatisticsGenerator`, and each is in charge of creating a specific"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "statistic type, ie. `ExpenseBreakdown` and `ExpenseTimeline`. These concrete statistic types encapsulate all the information relevant"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "to the statistic, which the concrete `ExpenseChart` then uses to render the statistic display."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The chart feature can be roughly split two separate parts:"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** The dynamic rendering of the chart whenever the displayed expenses are updated"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** The functionality to switch between different statistic types and configure customization options"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The Observer pattern plays an integral role in the implementation of major part of the system. To summarize, it is a design pattern that achieves decoupling"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "by having observers \"subscribe\" to changes in an observed object, and being notified upon any changes through callbacks. This is opposed to the observed class directly updating"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "its observers. In the following, the term \"notify observers\" will be used to denote the act of an observed class being updated and updating all"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "its observers, and the term \"on update\" will be used to denote the act of an observer receiving updates from its observed class."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Below is a high level overview of the behaviour of the system when any command is called."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::DisplayStatisticsActivityDiagram.png[]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "As you can see the logic follows the two paths outlined above. One path where the displayed expenses are updated, and one path where `DisplayStatsCommand` is executed, updating the chart."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Both paths can lead to the chart updating, followed by the end of the command. Each path will be explored in slightly further detail below."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Update to displayed expenses"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". The current `ExpenseChart` observes the list of expenses that are contained in the `MainWindow`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". When a command which updates the expenses is executed, that command updates the list of expenses in the model."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". That update propagates to the list of expenses in `MainWindow`, which notifies the current chart of its changes."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". Using a `StatisticsGenerator`, the `ExpenseChart` then generates the statistics to be displayed from the new expenses."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". In this manner, changes to the list of expenses are propagated to the display."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "An example of how this works can be seen in the sequence diagram below, in the example where the user changes the displayed expenses by using the `ListCommand`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::UpdateExpensesSequenceDiagram.png[]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d DisplayStatsCommand is called"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". The orchestrating `ChartBox` observes `StatisticsFormat` and `StatisticsFormatOptions` in the model."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". When `DisplayStatsCommand` is called, it updates those two objects in the model sequentially."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". First, `ChartBox` is notified about `StatisticsFormat`, and if there is a new one, it creates the appropriate chart and renders it."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". Next, if there are changes to `StatisticsFormatOptions`, the `ChartBox` propagates the relevant changes to the current displayed chart, to update its display."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". In this manner, the current chart can be updated with the new `StatisticsFormat` and `StatisticsFormatOptions`."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "An example of how this works can be seen in the sequence diagram below, where `DisplayStatsCommand` is called with a new `StatisticsFormat`."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`StatisticsFormatOptions` is omitted for simplicity."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::DisplayStatisticsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Approach to generating of statistics"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* ** Alternative one (current choice):** Each time there is a change in the backing list of expenses, the statistics are re-generated"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "by the specific `StatisticsGenerator` for the appropriate statistics format."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** Simplest implementation, each statistic generator can simply provide a pure function with no side effects that maps from"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "a list of expenses to the desired format of statistics."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** Runtime is acceptable as most operations can run in O(n) time at worst, with a reasonable input size of expenses."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** Statelessness means it is thread safe."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** Even in cases where the backing list of expenses only change by one element (eg. when a single expense is deleted), the entire"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "set of statistics will still be re-generated from the list, thus potentially incurring an expensive operation each time"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "the list is changed."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* ** Alternative two:** Each `StatisticsGenerator` can be structured as a data structure that keeps track of the current statistics data."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Upon a change in the backing list, only the specific change will be propagated, ie. addition of one new expense will internally call"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`StatisticsGenerator#AddExpense` which modifies the statistics data appropriately."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** For simple list changes like adding/removing a single expense, this approach is much faster as it does not have to regenerate"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "the statistics from the entire list, the statistics only needs to be updated with the specific change."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** Complicated, need to include methods to handle cases where expenses are added, removed and updated, for every statistic type. If the entire"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "list is changed frequently, there is no performance benefit."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** Worse in terms of testability. The `StatisticsGenerator` will depend on an internal state which can be complicated for certain statistics."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** Not thread safe, in the case of future upgrades to a multi-threaded application, will require adjustments."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* **Alternative three:** The data for certain aggregate statistics formats can be serialized. These formats include things like lifetime average spending"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "per day/week/month, total number of expenses etc. Upon addition/removal/update of expenses, an in-mem copy of the serialized data can be updated"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "and saved."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** The data for certain statistics formats will always be quickly available by simply querying the storage."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** The data can be stored in a human readable format, so users can view those statistics without opening the application."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*** Requires extra complexity to serialize the data upon each change to the overall list of expenses."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// tag::history[]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d History feature"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "You can use the `history` command to view previous actions."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Billboard will store all the command entered even the command fails to execute or in wrong format."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "This function is facilitated by the `CommandHistory` class."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "All the histories will be store in a static list `cmdList` in `CommandHistory`."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Also, a state pointer that initially point to the start of cmdList will be maintain"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "for Up(`\u0026uarr;`)/Down(`\u0026darr;`) key feature(See \u003c\u003cUp-Down-Feature\u003e\u003e)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* `CommandHistory#addCmdHistory(String)` -- Store the command into cmdList."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* `CommandHistory#peekNextCmd()` -- Get the next command in command history."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* `CommandHistory#peekPreviousCmd()` -- Get the previous command in command history."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* `CommandHistory#hasCommand()` -- Check whether any command is executed."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".Sequence diagram of CommandHistory class"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "image::CommandHistoryClassDiagram.png[]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The following sequence diagram shows how the storing operation works:"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".Interactions Inside the Logic Component for the `delete` Command"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The LogicManager will store the command to CommandHistory before parsing it to ensure all commands are saved."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How command histories are stored"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* **Alternative 1 (current choice):** Store all commands including commands that fail to execute."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Pros: User can see what goes wrong in the previous command."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "This is the standard way to implement the history function."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Cons: Cost more memory to store all commands."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* **Alternative 2:** Store commands that is successfully executed and can be undone/redone."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Pros: User will not need to view the command that is not useful."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Cons: User cannot view the invalid command."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// end::history[]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// tag::updownkey[]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "[[Up-Down-Feature]]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d Up/Down key feature"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Pressing Up(`\u0026uarr;`)/Down(`\u0026darr;`) key in `TextFiled` can navigate through the command history."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "This feature makes use of the command history and state pointer stored while executing the previous command."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "When initializing the fxml object `TextFiled` in `CommandBox` class,"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "an action listener will be set to monitor the keyboard activity."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Whenever a Up(`\u0026uarr;`)/Down(`\u0026darr;`) key is pressed, it will retrieve the previous/next command from the `CommandHistory`."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Given below is an example usage scenario and how the Up(`\u0026uarr;`)/Down(`\u0026darr;`) mechanism behaves at each step."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The CommandHistory will be initialized with no command state,"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "and the statePointer is not pointing to any command state."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".Initial state of CommandHistory"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "image::UpDownKeyState0.png[]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 2. The user then execute the delete 5 command to delete the 5th expense in the billboard."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The LogicManager calls CommandHistory#addCmdHistory() and a new command is append to the end of cmdList."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".State of CommandHistory after \"delete 5\" command"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "image::UpDownKeyState1.png[]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Step 3. The user now decides to execute the next command in the command history and press the Up(`\u0026uarr;`)key."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The actionListener of the TextField will call CommandHistory#peekNextCmd(),"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "which will shift the statePointer once to the right,"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "pointing it to the next command, and return it."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".State of CommandHistory after Up(`\u0026uarr;`)key"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "image::UpDownKeyState2.png[]"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "If the `statePointer` is at the end of cmdList, pointing to the final command state,"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "then there are no next command states to get,"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "it will return the last command to the user rather than attempting to get the next command."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The following sequence diagram shows how the Up(`\u0026uarr;`)key works:"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ".Interactions between components of CommandBox and CommandHistory for the Up(`\u0026uarr;`)key"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "image::UpkeySequenceDiagram.png[]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The Down(`\u0026darr;`) key does the opposite — it calls CommandHistory#peekPreviousCmd(),"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "which shifts the statePointer once to the left,"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "pointing to the previous command state, and return the command."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How command histories are stored"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* **Alternative 1 (current choice):** Navigate through all commands including invalid commands."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Pros: User can edit the invalid command easily, without typing the whole command again."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Cons: The static object will need to stay in the memory."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* **Alternative 2:** Only navigate through commands that can be undone/redone."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Pros: User require less time to navigate through the history to find the command(commands that can be undone/redone are usually long)"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Cons: User will not be able to edited the previous invalid command, cost more time to type the whole command again."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// end::updownkey[]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* has a need to manage a significant number of expenses"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*Value proposition*: manage expenses faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |new user |See command instruction and usage |Refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user |add a new record | Track my spending/income"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |Forgetful user | Add additional details through a description for each record | Better keep track of the details of an expense/income"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user |Delete a record |Remove expenses/income that I no longer need"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |Careless user |Edit an existing record |Make changes to any mistakes made"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user |View a record | View additional information of an expense/income"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user |Tag a record | Categorize and better manage my records"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user |Specify a time stamp on expenses|Know when I spend my money"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user | Sort and filter records by category or tag | Know how my spending/income is distributed"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user | Archive past records | Better manage current expenses"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` | user | Unarchive records |"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user | View the list of records in an archive | Keep track of what records I have in a particular archive"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user | View the list of all archives | Keep track of how many archives I have and what their names are"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user | Delete an archived record | Delete archive entries that are no longer needed"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* * *` |user | Deleted an entire archive | Delete any unneeded archive"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* *` |Visually inclined user |Attach an image to each record |Conveniently record additional details of the expense instead of typing it all out"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* *` |user | Create custom tags | To better categorise my expenses"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* *` |user | Hide records | Maintain privacy on certain sensitive expenses/income"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* *` |Student who tends to overspend | Set a time-based budget | Regulate my spending for the day/week/month with a set limit"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* *` |Busy student | Automate archiving of outdated records | Not need to manually archive them constantly"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* *` |Frequent traveller | Add records in foreign currency | Track my expenses when overseas conveniently without having to manually convert currencies"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* *` |Data oriented user | Have monthly statistics on my expenses | Better track and manage my expenses"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`* *` |User who manages my finance daily | Use one-shot/shortcut commands | Use the program more efficiently"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "|`*` | User | Set a password for this application | Hide my data"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "(For all use cases below, the *System* is the `Billboard` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d UC01: Adding a tag to an expense"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1.  User requests to list expenses"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2.  Billboard shows a list of recent expenses"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3.  User requests to tag a specific expense in the list"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "4.  Billboard tags the specific expense with the input tag name"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2a. There are no recent expenses."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 2a1. Billboard displays an empty list"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 3a. The given index or tag name is invalid"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 3a1.  Billboard shows an error message."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d UC02: Filter expenses by tag"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. User requests to list all tags"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. Billboard shows a list of tags"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3. User requests to filter expenses by specific tag"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "4. Billboard shows a list of recent expenses under the specific tag."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2a. There are no existing tags"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 2a1. Billboard displays an empty list"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 3a. The given tag name is invalid"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 3a1.  Billboard shows an error message."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d UC03: Add an expense to an archive"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. User requests to list recent expenses"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. Billboard shows a list of recent expenses"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3. User requests to list all archives"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "4. Billboard shows a list of archives"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "5. User requests to add a specific expense into a specific archive"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "6. Billboard removes the specific  expense from list of current records and adds it to the specific  archive"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2a. There is no current records"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 2a1. Billboard displays an empty list"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 4a. There are no existing archives"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 4a1.  Billboard shows an empty list."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 5a. The given record index or archive name is invalid"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 5a1.  Billboard shows an error message."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d UC04: Deleting an archived expense"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. User requests to list all expenses under a specific archive"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. Billboard shows a list of expenses under the specific archive"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3. User requests to delete a specific expense from the archive"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "4. Billboard deletes the specific  expense from the specific  archive."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2a. The archive has no expenses in it"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 2a1. Billboard displays an empty list"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2b. The archive name is invalid"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 2b1.  Billboard shows an error."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 3a. The given record index or archive name is invalid"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 3a1.  Billboard shows an error message."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d UC05: Deleting an entire archive"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. User requests to list all existing archives"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. Billboard shows a list of all existing archives"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3. User requests to delete a specific archive from the list"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "4. Billboard deletes the specific archive"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2a. There are no existing archives"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 2a1. Billboard displays an empty list"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 3a.  The given archive name is invalid"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 3a1.  Billboard shows an error."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003d\u003d\u003d UC06: Finding a expense record by keywords, date created and amount spent"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "1. User enters parameters that is used to filter expenses."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "2. Billboard displays a list of expenses that satisfies all the parameters."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* 2a. There are no expenses that satisfies all the parameters in user input."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** 2a1. Billboard displays an empty list"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* 2a. Parameters are not in the correct format."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "** 2a1. Billboard displays an error message and informs user of correct usage."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".  Should be able to hold up to 1000 expenses/income records without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Commands are easy to remember and intuitive."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". The software should work without requiring an installer./portable."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". The data should be stored locally and should be in a human editable text file."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Software is for single users only."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". The software should not depend on a remote server."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d Deleting an expense"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Deleting an expense while all expenses are listed"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".. Prerequisites: List all expenses using the `list` command. Multiple expenses in the list."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "   Expected: First expense is deleted from the list. Details of the deleted expense shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "   Expected: No expense is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d Adding tags to an expense"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ". Adding tags to an expense in a list with multiple expenses."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Prerequisites: Multiple expenses in the list. First expense does not have the tag \"_holiday_\" but have the tag \"_tech_\"."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag add 1 t/holiday` +"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: Tag \"_holiday_\" is added to the first expense. Details of first expense shown in the status message."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag add 1 t/tech` +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tags added to any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag add 1 t/holiday t/tech` +"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: Tag \"_holiday_\" is added to the first expense. Details of first expense shown in the status message."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag add 0 t/holiday` +"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tags added to any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag add 1 holiday` +"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tags added to any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag add 1 t/holiday time` +"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tags added to any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag add 1 t/holiday__` +"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tags added to any expense. Error details shown in the status message. +"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ". Adding tags to an expense in an empty list"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag add 1 t/holiday` +"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tags added to any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d Removing tags from an expense"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ". Removing tags from an expense in a list with multiple expenses."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Prerequisites: Multiple expenses in the list. First expense has the tag \"_holiday_\" but does not contain the tag \"_tech_\"."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag rm 1 t/holiday` +"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: Tag \"_holiday_\" is removed from the first expense. Details of first expense shown in the status message."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag rm 1 t/tech` +"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tag removed from any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag rm 1 t/tech t/holiday` +"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: Tag \"_holiday_\" is removed from the first expense. Details of first expense shown in the status message."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag rm 0 t/holiday` +"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tag removed from any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag rm 1 holiday` +"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tag removed from any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag rm 1 t/holiday time` +"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tag removed from any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag rm 1 t/holiday__` +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tag removed from any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ". Removing tags from an expense in an empty list"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag rm 1 t/holiday` +"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No tag removed from any expense. Error details shown in the status message."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d Filtering expenses by tag"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ". Filtering expenses by tag while all expenses are listed"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Prerequisites: List all expenses using the `list` command. Multiple expenses in the list. One or more expenses contain the tag \"_holiday_\". All expenses do not contain the tag \"_tech_\""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag filter t/holiday` +"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: Expenses that contain the tag \"_holiday_\" are listed out. Number of expenses shown in status message."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag filter t/tech` +"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: No expense listed out."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d Listing out all existing tags"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ". Listing out all existing tags while all expenses are listed"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Prerequisites: List all expenses using the `list` command."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".. Test case: `tag list` +"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Expected: All existing tags are listed out in the status message."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Adding an expense to an archive"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Adding an expense to an archive when current expenses list."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Prerequisites: List all expenses using the `list` command. At least 3 expenses in the list. Test cases should be completed in chronological order."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive add 1 arc/test` +"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: First expense is removed from the list. Message in result box indicates that a `test` archive is created, since it was not an existing archive prior, and the first expense was added to it. +"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Use the `archive list test` command to display the archive list to check if the expense was correctly archived. +"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   After verifying, use the `list` command to go back to the default list of expenses."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive add 2 arc/test` +"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: Second expense is removed from the list. However, since the `test` archive was already created in the first test case, the message in the result box would only indicate that the second expense was added to the `test` archive. +"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Use the `archive list test` command to display the archive list check if the expense was correctly archived. +"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   After verifying, use the `list` command to go back to the default list of expenses."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive add 0 arc/test` +"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: No expenses removed from the list and no creation of archives. An invalid archive command message should appear in the result box."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive add X arc/test` (where X is larger than the list size) +"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: No expenses removed from the list and no creation of archives. An error message indicating an invalid expense index will be shown in the result box."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive add` or `archive add X` (where X is any invalid argument string not in the form of `[INDEX] arc/[ARCHIVE NAME]`) +"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: No expenses removed from the list and no creation of archives. The invalid archive command format message and the `archive add` usage message should appear in the result box."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Displaying the expenses in an archive"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Displaying the expenses in a particular archive when any list of expenses are listed."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Prerequisites: Test cases in this section should be done after carrying out the test cases in the *_Adding an expense to an archive_* section."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive list test` +"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: The list of expenses displayed should change to contain the two expenses archived in the prior *_Adding an expense to an archive_* section."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive list` or `archive list X` (where X is any amount of whitespace) +"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: An error message indicating that the archive name cannot be empty and the `archive list` usage message will be displayed in the result box."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive list X` (where X is any non-existent archive name) +"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: An error message indicating that there is no existing archive name and the `archive list` usage message will be displayed in the result box."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Displaying a list of archive names"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Displaying the list of archive name when any list of expenses are listed"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Prerequisites: Test cases in this section should be done after carrying out the test cases in the *_Adding an expense to an archive_* section."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive listall` or `archive listall X` (where X is any String) +"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: The displayed list of expenses should not be changed. The result box should display a list of existing archive names, including `test` archive which was added in the prior *_Adding an expense to an archive_* section."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Deleting an expense from an archive"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Deleting an expense from an archive. Test cases should be completed in chronological order."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Prerequisites: List the expenses in a particular archive using the `archive list [ARCHIVE NAME]` command. Have 2 expenses in this archive. All test cases in this section will be done using this same [ARCHIVE NAME] archive."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive delete 1 arc/[ARCHIVE NAME]` +"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: The expense in the first index should be removed from the list. A message indicating that the expense is deleted from the archive will be displayed in the result box."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive delete` or `archive delete X` (where X is any string not in the form of [INDEX] arc/[ARCHIVE NAME]) +"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: No change in the list of expenses displayed. The invalid command format message and `archive delete` usage message are displayed in the result box."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive delete 1 arc/[ARCHIVE NAME]` +"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: Since there is only one expense in the [ARCHIVE NAME] archive left, the empty archive will be deleted together with the expense as well. +"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   The displayed list of expenses will switch back to the default non-archive expense list. +"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   A message indicating the deletion of the expense and the archive will be displayed in the result box."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Reverting/unarchiving an expense from an archive"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Unarchives an expense from an archive. Test cases should be completed in chronological order."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Prerequisites: List the expenses in a particular archive using the `archive list [ARCHIVE NAME]` command. Have 2 expenses in this archive. All test cases in this section will be done using this same [ARCHIVE NAME] archive."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive revert 1 arc/[ARCHIVE NAME]` +"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: The expense in the first index should be removed from the list. A message indicating that the expense is removed from the archive and added back to the current expense list will be displayed in the result box."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Use the `list` command to display the current non-archive expense list to check if the expense was correctly reverted back. The reverted expense should be at the last index of the current expense list. +"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   After verifying, use the `archive list [ARCHIVE NAME]` command to go back to the archive list of expenses."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive revert` or `archive revert X` (where X is any string not in the form of [INDEX] arc/[ARCHIVE NAME]) +"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: No change in the list of expenses displayed. The invalid command format message and `archive revert` usage message are displayed in the result box."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".. Test case: `archive revert 1 arc/[ARCHIVE NAME]` +"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   Expected: Since there is only one expense in the [ARCHIVE NAME] archive left, the empty archive will be deleted after the expense is removed from it. +"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   The displayed list of expenses will switch back to the default non-archive expense list. The reverted expenses should be at the last index of the displayed list of default non-archive expenses. +"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   A message indicating that the expense is removed from the archive and added back to the current expense list, and the deletion of the archive will be displayed in the result box."
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 392,
      "xinmingzh": 80,
      "waifonglee": 152,
      "waynefong0401": 156,
      "-": 382,
      "weiijiie": 121
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d Billboard - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". Run the `seedu.billboard.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/billboard` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/billboard`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, Billboard\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 6,
      "-": 78
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "e.g. `seedu.billboard.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "e.g. `seedu.billboard.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "e.g. `seedu.billboard.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d Billboard - User guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-4/main"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "By: `CS2103T-F12-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "_Billboard_ is for those who prefer to use desktop applications to manage and keep track of their expenses."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "_Billboard_ is optimized for those who prefer to work with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "while still enjoying all the benefits of having a fully fledged Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "If you can type fast, _Billboard_ can help you manage your expenses faster than traditional"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "GUI apps!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "_Billboard\u0027s_ basic functionality involves the adding, editing and delete of expenses, which are saved locally in your computer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "in a simple, human readable format (.JSON). In top of that, _Billboard_ provides a host of additional features designed to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "simplify, enhance, improve, and make convenient your management of expenses. These features will be further detailed below."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". Ensure you have Java 11 or above installed on your machine."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ". Download the latest version of _Billboard_ https://github.com/AY1920S1-CS2103T-F12-4/main/releases/tag/v1.1[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ". Copy the file to the folder you want to use as the Home folder for _Billboard_"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". Double-click the file to open the application"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e for the details of each command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* Parameters in the format `prefix/[SQUARE BRACKETS]` are _mandatory parameters_ to be supplied by the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "e.g. in `add n/[NAME] a/[AMOUNT]`, `NAME` and `AMOUNT` are mandatory parameters which should be supplied, as in: `add n/buy a book a/10.00`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* The mandatory parameters can be in any order."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* Some commands may have _optional parameters_. These are denoted by using `prefix/\u003cANGULAR BRACKETS\u003e`,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "e.g When you see `a/\u003cAMOUNT\u003e`, the command can be either `edit 2 n/lunch a/10` or `edit 2 n/lunch`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* Default values can be specified in the angular brackets, e.g `prefix/\u003cNUM_ENTRIES \u003d 10\u003e`. If the user does not"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "provide a value for that parameter, it will default to the default value stated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* Optional parameters can be in any order."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* Parameters with `…`​ after them can be used zero or more times e.g. `t/\u003cTAG\u003e...` can be used as `{nbsp}` (i.e. 0 times), `t/bills` or even `t/bills t/fees` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* Additional information on the parameters can be detailed in a section labelled `INFO` under the format if necessary."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d Managing expenses: `expense`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". _Add a new expense: add_ +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You can add an expense to your saved expense list using this command. All expenses that you add in this manner will be saved in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`data/billboard.json` in your current directory, and will be available again on your next application startup. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " add n/[NAME] a/[AMOUNT]  d/\u003cDESCRIPTION\u003e  date/\u003cDATE\u003e t/\u003cTAG\u003e..."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "INFO: +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* `NAME` must be alphanumeric and may have spaces."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* `AMOUNT` must be a positive and non-zero monetary amount."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* `DESCRIPTION` has no constraints."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* `DATE` should be in the format dd/mm/yyyy \u003cHHMM\u003e where HHMM is optional."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* `TAG` should be alphanumeric without spaces."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example:  +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "`add n/buy a book d/math textbook a/10 t/coop` +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Adds an expense to record where the name is “buy a book”, description is \"math textbook\" and the amount is 10. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". _Edit an existing expense: edit_ +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You can edit any existing expense that is being displayed, in the event that you have a need to change a past expense."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Changes made are automatically saved. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " edit [INDEX] n/\u003cNAME\u003e d/\u003cDESCRIPTION\u003e a/\u003cAMOUNT\u003e date/\u003cDATE\u003e t/\u003cTAG\u003e..."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "INFO: +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "*  You need to supply at least one of the optional parameters, or the command will fail."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "`edit 2 d/buy a math book` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Edit the expense at index 2  with new description of: “buy a math book” +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command overwrites existing tags if you input tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". _Delete an existing expense: delete_ +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You can delete any unwanted existing expense that is being displayed. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " delete [INDEX]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "`delete 3` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Deletes the expense with index 3. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". _List all expenses: list_ +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You can list all the expenses in your expense list using this command, allowing you to easily get an overview of all your expenses. `list` will ignore all parameters. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays below expenses (for example) in the GUI:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::ListCommandExample.png[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ". _Clear all expenses: clear_ +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You can clear all the expenses in your expense list using this command. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " clear"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Clears all your expenses."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "This _actually_ deletes all your commands, use with caution! The undo feature may come in handy if you unintentionally used this command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Archived expenses are not cleared. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "// tag::tagging[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d Tagging expenses: `tag`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This feature allows you to assign tags to your expenses. Expenses with the same tag will be grouped together, allowing you to search for related expenses easily."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Tag names should be *alphanumeric*. This means that they should not contain spaces or special characters. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Tag names are *case sensitive.* +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "You are *not* able to use this feature on *archived expenses*."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "To view a list of supported tag commands, you could type `tag` in the command box and press `enter`. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Similarly, to view parameters for supported tag commands, you could type `tag` followed by the supported tag command and press `enter`. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: `tag rm`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a tag: `tag add` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command adds your input tag(s) to the expense at the index you have specified. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " tag add [INDEX] t/[TAG] t/\u003cTAG\u003e..."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Lets say that you want to add the tags \"_holiday_\" and \"_hangout_\" to the expense \"_USS_\" at index 2. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "To add the tags: +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "1. Type `tag add 2 t/holiday t/hangout` in the command box and press `enter` to execute it. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/AddTagOne.png[] +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "2. The result box will display the message \"Added tag(s) to Expense: +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Name: USS Description:  Amount: 70.00 Created: 13 Apr 2019, 11:23 PM Archive Name:  Tags: [[hangout], [holiday]]\" +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/AddTagTwo.png[] +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "3. You could see the tags \"_holiday_\" and \"_hangout_\" in the expense at index 2. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/AddTagThreeCropped.png[] +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "You are not able to add *existing* tags. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If you input *existing* and *non-existing* tags, Billboard adds the *non-existing* tags only. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If you input *duplicate* tags, Billboard adds them *once*. i.e Billboard does *not* allow duplicate tags in an expense. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: `tag add t/holiday t/holiday`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a tag: `tag rm` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command removes your input tag(s) from the expense at the index you have specified. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " tag rm [INDEX] t/[TAG] t/\u003cTAG\u003e..."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Lets say that you want to remove the tags \"_holiday_\" and \"_hangout_\" from the expense \"_USS_\" at index 2. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "To remove the tags: +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "1. Type `tag rm 2 t/holiday t/hangout` in the command box and press `enter` to execute it. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/rmTagOne.png[] +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "2. The result box will display the message \"Removed tag(s) from Expense: +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " Name: USS Description:  Amount: 70.00 Created: 13 Apr 2019, 11:23 PM Archive Name:  Tags: []\" +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/rmTagTwo.png[] +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "3. You could see that the expense at index 2 no longer has the tags \"_hangout_\" and \"_holiday_\". +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/rmTagThree.png[] +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "You are not able to remove *non-existing* tags. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If you input *duplicate* tags, Billboard removes them *once*. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: `tag rm t/holiday t/holiday`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering by tag: `tag filter` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command filters expenses by your input tag(s). +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " tag filter t/[TAG] t/\u003cTAG\u003e..."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Lets say that you want to filter your expenses by the tag \"_tech_\". +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "To filter your expenses: +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "1. Type `tag filter t/tech` in the command box and press `enter` to execute it. +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/filterTagOne.png[] +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "2. The result box will display the message \"3 expense(s) listed!\" +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/filterTagTwo.png[] +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "3. Billboard lists all expenses under the tag \"_tech_\". +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/filterTagThree.png[] +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If you input *more than one* tags, Billboard lists out all expenses tagged with *one or more* input tags. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command allows *duplicate* tags as input. +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command allows *non-existing* tags as input. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "After executing this command, you could edit (eg. `edit`, `tag add` etc) the filtered expenses using the displayed indexes. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Listing out all the tags: `tag list` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command lists out all existing tags. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " tag list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Lets say that you want to list out all existing tags. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "To list them: +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "1. Type `tag list` in the command box and press `enter` to execute it. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/listtagone.png[] +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "2. The result box displays a list of all existing tags. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/listtagtwo.png[] +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "// end::tagging[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[[Find]]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003d\u003d\u003d Finding expenses by attributes: `find`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ". _Find : find_ +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Find expenses that satisfies conditions specified in the arguments. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " find [d/KEYWORD[ KEYWORD…]] [a/LOWER AMOUNT LIMIT] [al/UPPER AMOUNT LIMIT] [sd/START DATE] [ed/END DATE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`find d/lunch book a/2 al/20 sd/1/1/2019 ed/1/10/2019` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Finds all expenses that contain the keyword ‘lunch’ or \u0027book\u0027 and amount between 2 and 20 dollars"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "and date between 1 Jan 2019 to 1 Oct 2019 in any of its attributes. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Sorting expenses by attributes: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ". _Sort by name:_ +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Sort expenses by name in alphabetical order. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " sort name"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ". _Sort by date:_ +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Sort expenses by date from newest to oldest +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " sort date"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ". _Sort by amount_ +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Sort expenses by amount of expense in from largest to smallest. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " sort amt"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "// tag::archive[]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d Archiving past expenses: `archive`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This feature allows you to archive expenses. An expense is archived when you want remove it from"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "the current list of expenses, but still want to keep a record of it and retrieve it again in the future"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "for accounting purposes."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Archiving expenses allows you to de-clutter your current list of expenses after a long period of time."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This feature offers greater flexibility in terms of expense organisation as it allows you to create *multiple archives* with"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "the archive name of your choice so that you would be able to appropriately group your archived expenses."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "NOTE: *Archived expenses cannot be edited.* +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Archived expenses are not considered current and \"active\" expenses so you are unable to edit them. +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "You would need to unarchive an expense first before you would be able to perform expense editing commands on it such as"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`edit`, `tag add` and `tag remove` commands."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Although this section of the user guide provides comprehensive information on the usage of `archive` commands,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "you could also view the list of all supported archive commands within the application by typing the command word `archive`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "into the command box and pressing `Enter`:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".The result box will display the list of supported `archive` commands. You can scroll down to view the full list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveCommandMessage.png[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The following are all the archive commands, descriptions of how they work and their usage."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Note the formatting of command parameters used in this section:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* [INDEX]: The list index of the expense involved in the command."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `arc/`: Prefix to indicate that the text appended to it is the specified archive name."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* [ARCHIVE NAME]: Specified name of archive involved in the command. Archive name is case-sensitive and must be non-empty. Names with symbols and multiple words are accepted as well."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Adding an expense to an archive: ``archive add``_ +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command allows you to transfer the expense at the specified index to your specified archive. +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "If the archive you entered does not exist, then a new archive is created before the expense is added. +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive add [INDEX] arc/[ARCHIVE NAME]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Suppose you want to archive the expense called \"_joker movie tickets_\" to an archive called \"_movies_\". +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "To archive the expense:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. Type `archive add 7 arc/movies` into the command box, and press `Enter` to execute the command:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".The expense \"_joker movie tickets_\" is at index 7 in the list."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image:archiveAddEnterCommand.png[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. The next step can be split into 2 scenarios:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2a. *There is no existing archive called \"_movies_\"* +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "A new archive called \"_movies_\" is created before \"_joker movie tickets_\" is added to it. +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The result box will display the message to indicate the archive creation and transfer of the expense:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveAddArchiveCreatedMessage.png[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2b. *There is an existing archive called \"_movies_\"* +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\"_joker movie tickets_\" is simply added to the existing \"_movies_\" archive. +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The result box will display the message to indicate the transfer of the expense:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveAddExistentArchiveMessage.png[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Listing out all archives: ``archive listall``_ +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command informs you of all the existing archives by displaying a list of all existing archive names. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive listall"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "In the event that you cannot remember what archives you have, you could use this command to view all existing archives. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Type `archive listall` into the command box and press `Enter`, and the archive name list will be displayed in the result box as shown:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".List of existing archive names."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveListallMessage.png[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Listing expenses in a particular archive: ``archive list``_ +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command allows you to view the list of expenses of your specified archive. +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive list [ARCHIVE NAME]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "NOTE: You do not need to prepend the archive prefix `arc/` to the archive name as there are no other"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "arguments (like [INDEX]) to be entered for this command."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Suppose you want to view all the expenses you have spend on movies this year. As you have kept all movie expenses in an archive called"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\"_movies_\", you can execute this command to bring up the expense list in \"_movies_\":"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. Type `archive list movies` into the command box, and press `Enter` to execute it:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveListEnterCommand.png[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. The displayed list will change to show the expenses in the \"_movies_\" archive and the result box will display the message"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\"Listed all expenses from the [movies] archive\":"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveListDisplayed.png[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Deleting an archived expense: ``archive delete``_ +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command allows you to delete the expense at the specified index from your specified archive. +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "If the archived expense you delete was the last expense in the archive, the empty archive will be deleted. +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive delete [INDEX] arc/[ARCHIVE NAME]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Suppose you want to delete the expense \"_Avengers Endgame_\" from the \"_movies_\" archive as you know you will never need to retrieve again for future reference. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "To delete \"_Avengers Endgame_\" from its archive:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. Enter the `archive list movies` command to display the expense list of the \"_movies_\" archive. Refer to the `archive list` section above for the diagram to execute this step."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. With the expense list of \"_movies_\" displayed, type `archive delete 1 arc/movies` and press `Enter`:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".\"Avengers Endgame\" expense has an index of 1 in its archive list."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveDeleteEnterCommand.png[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3. The next step can be split into two scenarios:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 3a. *\"_Avengers Endgame_\" is the only expense in the \"_movies_\" archive.* +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "After the command is executed, \"_Avengers Endgame_\" is deleted so the \"_movies_\" archive is now empty, and will thus be deleted. +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The result box will display the message that indicates the deletion of \"_Avengers Endgame_\" and \"_movies_\", and the list displayed will switch back to the main expense list:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Since the archive is deleted, the list displayed switches back to the main expense list."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveDeleteEmptyArchive.png[]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 3b. *\"_Avengers Endgame_\" is not the only expense in the \"_movies_\" archive.* +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "After the command is executed, \"_Avengers Endgame_\" is deleted. As there are other expenses still in the \"_movies_\" archive, the archive is not deleted. +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The result box will display the message that indicates the deletion of \"_Avengers Endgame_\", and the archive list displayed updates with the removal of \"_Avengers Endgame_\":"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".\"_Avengers Endgame_\" is deleted and this change is immediately reflected in the archive list displayed."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveDeleteNonEmptyArchive.png[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Reverting an archived expense: archive revert_ +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command allows you to revert/unarchive the expense at the specified index from your specified archive, transferring it back to your current list of expenses. +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "If the archive expense you reverted was the last expense in the archive, the empty archive will be deleted. +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive revert [INDEX] arc/[ARCHIVE NAME]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Suppose you have an expense \"_Airpod Pro_\" archived into \"_gadgets_\", but you changed your mind and decided that it should not be archived yet. +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "To unarchive/revert the \"_Airpod Pro_\" expense:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. Enter the `archive list gadgets` command to display the expense list of the \"_gadgets_\" archive. Refer to the `archive list` section above for the diagram to execute this step."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. With the expense list of \"_gadgets_\" displayed, type `archive revert 2 arc/gadgets` and press `Enter`:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".\"Airpod Pro\" expense has an index of 2 in its archive list."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveRevertEnterCommand.png[]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3. The next step can be split into two scenarios:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 3a. *\"_Airpod Pro_\" is the only expense in the \"_gadgets_\" archive.* +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "After the command is executed, \"_Airpod Pro_\" is removed from the \"_gadgets_\" archive, so the archive is now empty, and will thus be deleted. +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The result box will display the message that indicates the transfer of \"_Airpod Pro_\" and the deletion of \"_gadgets_\", and the list displayed will switch back to the main expense list:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Since the archive is deleted, the list displayed switches back to the main expense list and \"_Airpod Pro_\" can be observed to be back in the main expense list."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveRevertEmptyArchive.png[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 3b. *\"_Airpod Pro_\" is not the only expense in the \"_gadgets_\" archive.* +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "After the command is executed, \"_Airpod Pro_\" is removed from the \"_gadgets_\" archive. As there are other expenses still in the \"_gadgets_\" archive, the archive is not deleted. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The result box will display the message that indicates the transfer of \"_Airpod Pro_\", and the archive list displayed updates with the removal of \"_Airpod Pro_\":"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".\"_Airpod Pro_\" is unarchived and this change is immediately reflected in the archive list displayed."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveRevertNonEmptyArchive.png[]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "// end::archive[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d Displaying of statistics: `display-stats`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::statisticsIntro.png[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Billboard has a powerful statistics display system! While trying out other features, you may have realized that the highlighted chart changes from time to time."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "That is because Billboard has a _fully responsive_ statistics display with charts that dynamically update themselves. You can simply enter any command that changes the displayed"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "list of expenses, such as `add n/automatic stats displays are cool a/50.00`, and watch as the chart updates automatically."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".Live statistics display in action upon adding an expense."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::live-statistics-demo.gif[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Should you want to view different types of statistics and customize the information you get, Billboard also supports various different types of"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "charts, with a plethora of different customization options. Read the documentation on individual commands below to find out more."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The options available are tailored to each specific chart type and thus, not all charts may support the same options. The individual sections"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "for each command goes into further detail about the supported options for that command."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "With this, it becomes effortless for you to perform advanced queries on specific types of statistics! For example,"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "if you want to track the weekly total spending of all your expenses that contain the word \"food\" over a specific month, simply type `display-stats timeline interval/week`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "followed by `find d/food sd/01/01/2019 ed/01/02/2019`. (Unsure about this command? Refer to \u003c\u003cFind\u003e\u003e for more information). +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d _Display timeline overview of expenses: display-stats timeline_ +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".Timeline of expenses grouped by tag"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::display-timeline-example-normal.png[]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You can view one or more timelines that are based on your currently displayed expenses. Upon entering the command, the statistic chart will automatically update to display a timeline configured with the options you have provided."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The expenses over a specified time period are aggregated and added as data points on the timeline, allowing you to easily keep track of your relative spending. You can customize the date interval used, as well as the groupings used to split your expenses into each individual timeline. +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " display-stats timeline interval/\u003cDATE INTERVAL \u003d MONTH\u003e groupby/\u003cGROUPING \u003d NONE\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "INFO:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* `DATE_INTERVAL`: Specifies the date interval to be used to aggregate the expenses by. Supported date intervals include \u0027day\u0027, \u0027week\u0027, \u0027month\u0027 and \u0027year\u0027."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The start date of each interval will always be the \"logical\" start, ie. the start date for \"week\" will always be a Monday and the start date for \"month\" will always be the 1st of that month."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* `GROUPING`: Specifies the grouping to use to group the expenses into each separate timeline. Supported groupings include \"none\", \"tag\", \"month\" and \"day-of-week\"."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`display-stats timeline interval/month groupby/tag` +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Displays timelines based on the displayed expenses. First, the expenses are divided based on tag, forming one timeline for every tag. Next, for each timeline, the total amount spent each week, starting from Monday and ending on Sunday, is totalled to form each data point. The chart may look something like this: +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".Chart after executing the above command"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::display-timeline-example-tag.png[]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The options for this command, and for all other `display-stats` commands, are case-sensitive, ie. \"Week\" is not a valid substitute for \"week\"."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d _Display breakdown of expenses: display-stats breakdown_ +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".Breakdown of expenses grouped by month."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::display-breakdown-example-month.png[]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You can break the displayed expenses down into smaller groups and view that breakdown as a pie chart, allowing you to compare your spending between groups. Upon entering the command, the statistic chart will automatically update to display a breakdown chart configured with the options you have provided. The total"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "expenses per category are totalled and displayed as each slice in the pie chart. You can customize the criteria used to split the expenses into groups. +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " display-stats breakdown groupby/\u003cGROUPING \u003d TAG\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "INFO:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* `GROUPING`: Specifies the grouping to use to group the expenses into each separate slice in the pie chart."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Supported groupings include \"none\", \"tag\", \"month\" and \"day-of-week\". Note that the default value for `GROUPING` for this command is not \"none\", but \"tag\". (The \"none\" option has limited use). +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`display-stats breakdown groupby/MONTH` +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Shows a pie chart breakdown by month of all currently displayed expenses. Within each grouping, the total expenses in that grouping are summed up, and the"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "total amount determines the size of its slice of the pie chart."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d _Display heatmap of expenses: display-stats heatmap_ +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".Heatmap of all expenses grouped by tags."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::display-heatmap-example-normal.png[]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You can view a heatmap of total expenses per day for the currently displayed expenses, limited to the past year. The y-axis represents the day of the week the expense was made, while"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "the x-axis represents the week of the year the expense was made, with each bubble representing the expenses made on that particular day. The larger the bubble for the particular day, the higher the total expenses on that day."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "This allows you to get an overall impression of your spending behaviours over the past year. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " display-stats heatmap groupby/\u003cGROUPING \u003d NONE\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "INFO:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "* GROUPING: Specifies the grouping to use to calculate the heatmap. Expenses from different groups that occur on the same day will not be totalled, and will instead form two separate bubbles of different colors."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Accepted values include: \"none\", \"tag\", \"month\", \"day-of-week\u0027."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "`display-stats heatmap groupby/none` +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Shows a heatmap of all currently displayed expenses, limited to a year. Since \"none\" grouping was specified, the expenses are not grouped and are all categorized under \"All Expenses\"."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "The displayed chart may look something like this: +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "image::display-heatmap-example-normal.png[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d Undo and Redo: `undo/redo`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". _Undo the previous action: undo_ +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "You can use `undo` command restore the previous billboard state from state history. `undo` will ignore the parameter you key in. +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " undo"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "+"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". _Redo the previous undo action: redo_ +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "You can use `redo` command to redo a previously undone command and restore undone billboard state from state history. `redo` will ignore the parameter you key in. +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " redo"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "+"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// tag::history[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d Viewing History: `history`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". _View the past command history: history_ +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "You can view all previous command histories by using `history` command. `history` will ignore the parameter you key in. +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " history"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// end::history[]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// tag::updownkey[]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d Up and down key: `\u0026uarr;/\u0026darr;`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". _Get the previous entered command: \u0026uarr;_ +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "By pressing the Up(\u0026uarr;) key, you can get the previous command entered in the command history on the text field. +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". _Get the sequential entered command: \u0026darr;_ +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "By pressing the Down(\u0026darr;) key, you can get the sequential command entered in the command history on the text field. +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// end::updownkey[]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// tag::clear[]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d\u003d Clear the expenses: `clear`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ". _Get the previous entered command: \u0026uarr;_ +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "You can clear all the expenses in Billboard by simply executing the `clear` command. `clear` will ignore the parameter you key in. +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "// end::clear[]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d\u003d _Help list of complete set of commands: help_ +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Shows the complete list of commands and instructions/description on how to use them. +"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " help"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "+"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003d\u003d\u003d Exporting data: `[Coming in v2.0]`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "You will be able to export their expense data using the command `export f/[FORMAT]`, where format refers to the type of export file format"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "you wish to use. Formats that are intended to be supported include .csv files, .json files, as well as PDF documents."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 147,
      "xinmingzh": 24,
      "waifonglee": 104,
      "waynefong0401": 72,
      "-": 76,
      "weiijiie": 272
    }
  },
  {
    "path": "docs/diagrams/AddArchiveCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ": User enters command to add expense to archive;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ": command entered is parsed;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ": command is executed;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "if () then ([archive name \\n entered does not exist])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    : create new archive;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "endif"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ": Remove expense from \\n list of current expenses;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ": Add expense to archive;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 14
    }
  },
  {
    "path": "docs/diagrams/AddArchiveCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \":BillboardParser\" as BillboardParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \":ArchiveCommandParser\" as ArchiveCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \":AddArchiveCommandParser\" as AddArchiveCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \"a:AddArchiveCommand\" as AddArchiveCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \":ArchiveWrapper\" as ArchiveWrapper MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \":Billboard\" as Billboard MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[-\u003e LogicManager : execute(archive add 3 arc/archiveName)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "LogicManager -\u003e BillboardParser : parseCommand(archive add 3 arc/archiveName)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate BillboardParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "BillboardParser -\u003e ArchiveCommandParser : parse(add 3 arc/archiveName)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate ArchiveCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ArchiveCommandParser -\u003e AddArchiveCommandParser : parse(3 arc/archiveName)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate AddArchiveCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "create AddArchiveCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "AddArchiveCommandParser -\u003e AddArchiveCommand : AddArchiveCommand(archiveName, 3)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate AddArchiveCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "AddArchiveCommand --\u003e AddArchiveCommandParser : a"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate AddArchiveCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "AddArchiveCommandParser --\u003e ArchiveCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate AddArchiveCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ArchiveCommandParser --\u003e BillboardParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate ArchiveCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "BillboardParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate BillboardParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "LogicManager -\u003e AddArchiveCommand : execute()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate AddArchiveCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "AddArchiveCommand -\u003e Model : hasArchive(archiveName)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Model -\u003e ArchiveWrapper : hasArchive(archiveName)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate ArchiveWrapper"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ArchiveWrapper --\u003e Model : hasArchive"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate ArchiveWrapper"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Model --\u003e AddArchiveCommand : hasArchive"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "group !hasArchive"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    AddArchiveCommand -\u003e Model : AddArchive(newArchive)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    Model -\u003e ArchiveWrapper : AddArchive(newArchive)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    activate ArchiveWrapper"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    ArchiveWrapper --\u003e Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    deactivate ArchiveWrapper"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    Model --\u003e AddArchiveCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "AddArchiveCommand -\u003e Model : deleteExpense(expenseTobeArchived)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Model -\u003e Billboard : deleteExpense(expenseTobeArchived)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate Billboard"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Billboard --\u003e Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate Billboard"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Model --\u003e AddArchiveCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "AddArchiveCommand -\u003e Model : AddArchiveExpense(archiveName, expenseTobeArchived)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Model -\u003e ArchiveWrapper : AddArchiveExpense(archiveName, expenseTobeArchived)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate ArchiveWrapper"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ArchiveWrapper --\u003e Model"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate ArchiveWrapper"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Model --\u003e AddArchiveCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "AddArchiveCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate AddArchiveCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "AddArchiveCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "destroy AddArchiveCommand"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 104
    }
  },
  {
    "path": "docs/diagrams/AddTagActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ":User enters command to add tags to an expense;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ":Parse command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "if () then ([correct command format])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    :AddTagCommand executes command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "if() then ([tag(s) does not exist in the expense])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    :Expense is updated;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    :Show error message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    :Show error message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 20
    }
  },
  {
    "path": "docs/diagrams/AddTagSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "participant \":TagCommandParser\" as TagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "participant \":AddTagCommandParser\" as AddTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "participant \"a:AddTagCommand\" as AddTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[-\u003e LogicManager : execute(\"tag add 1 t/test\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"tag add 1 t/test\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "create TagCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddressBookParser -\u003e TagCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate TagCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "TagCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate TagCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddressBookParser -\u003e TagCommandParser : parse(\"add 1 t/test\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate TagCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "create AddTagCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "TagCommandParser -\u003e AddTagCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate AddTagCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommandParser --\u003e TagCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate AddTagCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "TagCommandParser -\u003e AddTagCommandParser : parse(\"1 t/test\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate AddTagCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "create AddTagCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommandParser -\u003e AddTagCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate AddTagCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommand --\u003e AddTagCommandParser : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate AddTagCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommandParser --\u003e TagCommandParser : a"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate AddTagCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommandParser -[hidden]-\u003e TagCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "destroy AddTagCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "TagCommandParser --\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate TagCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "TagCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "destroy TagCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "LogicManager -\u003e AddTagCommand : execute()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate AddTagCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommand -\u003e Model : retrieveTags(\"test\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Model --\u003e AddTagCommand : tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommand -\u003e Model : incrementCount(tag)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Model --\u003e AddTagCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommand -\u003e Model : setExpense(1)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Model --\u003e AddTagCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "CommandResult --\u003e AddTagCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "AddTagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate AddTagCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "waifonglee": 100
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteExpense(e)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveBillboard(billboard)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/ArchiveClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package model {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Interface ReadOnlyArchiveWrapper"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class ArchiveWrapper"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package archive {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    Class Archive {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    String archiveName"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package expense {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    Class ExpenseList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    Class Expense"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ArchiveWrapper .up.|\u003e ReadOnlyArchiveWrapper"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ModelManager o-right- \"1\" ArchiveWrapper"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Archive -right-|\u003e ExpenseList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ArchiveWrapper *-right- Archive"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ExpenseList o-down- \"*\" Expense"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 32
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Billboard *-right-\u003e \"1\" UniqueExpenseList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Billboard *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "UniqueExpenseList o-right-\u003e Expense"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Expense o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Expense *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Expense *--\u003e Description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Expense *--\u003e Amount"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Expense *--\u003e Date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 10,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/ChartClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package Chart \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class ChartBox"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class StatisticsFormatOptions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class \"{abstract}\\nExpenseChart\" as ExpenseChart"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class ExpenseXYZChart"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "enum StatisticsFormat {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "TIMELINE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "BREAKDOWN"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package StatisticsGenerator \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class HiddenChart #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "MainWindow *-right-\u003e ChartBox"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ChartBox -right-\u003e StatisticsFormat"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ChartBox *-down-\u003e ExpenseChart"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ChartBox -down-\u003e StatisticsFormatOptions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ExpenseChart -left-|\u003e UiPart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ExpenseXYZChart -up-|\u003e ExpenseChart"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ExpenseXYZChart *-\u003e StatisticsGenerator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "note bottom of ExpenseXYZChart: ExpenseXYZChart: ExpenseTimelineChart, \\nExpenseBreakdownChart, etc."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 38
    }
  },
  {
    "path": "docs/diagrams/CommandHistoryClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    Class CommandBox"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package CommandHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    Class CommandHistory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        -{static}Stack\u003cString\u003e cmdList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        -{static}int statePointer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        +{static}addCmdHistory(cmd: String)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        +{static}peekNextCmd():String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        +{static}peekPreviousCmd():String"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        +{static}hasCommand():boolean"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        +{static}getCmdHistory():String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        +{static}clearHistory()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager .up.\u003e CommandHistory : store \u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "CommandBox .up.\u003e CommandHistory : get \u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 32
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "if () then ([command commits Billboard])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    :Save Billboard to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    stateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":CommandHistory\" as CommandHistory LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "participant \":BillboardParser\" as BillboardParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":VersionedBillboard\" as VersionedBillboard LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "box VersionedBillboard MODEL_COLOR_T2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":VersionedBillboard\" as VersionedBillboard MODEL_COLOR_T3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager -\u003e CommandHistory : addCmdHistory(\"delete 1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "CommandHistory -\u003e LogicManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "LogicManager -\u003e BillboardParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "activate BillboardParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "BillboardParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "DeleteCommandParser --\u003e BillboardParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "BillboardParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "DeleteCommandParser --\u003e BillboardParser : d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e BillboardParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "BillboardParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "deactivate BillboardParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager -\u003e VersionedBillboard : commit(model)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate VersionedBillboard"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "VersionedBillboard -\u003e LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate VersionedBillboard"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 10,
      "waynefong0401": 18,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/DisplayStatisticsActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "(*) -down-\u003e \"Command is parsed and executed\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "if \"\" then"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    -left-\u003e [DisplayStatsCommand is executed] \"Observables of StatisticsFormat and\\n StatisticsFormatOptions updated\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    --\u003e [Notify listeners] \"On update of listeners in ChartBox\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    --\u003e \u003d\u003d\u003dB1\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    if \"\" then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        --\u003e [StatisticsFormat changed] \"ChartBox creates desired concrete\\n Chart and renders it\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        --\u003e \u003d\u003d\u003dB2\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    else"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        --\u003e [else] \u003d\u003d\u003dB2\u003d\u003d\u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    \u003d\u003d\u003dB1\u003d\u003d\u003d --\u003e if \"\" then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        --\u003e [StatisticsFormatOptions changed] \"ChartBox demultiplexes relevant\\n updated options to update current Chart\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        --\u003e [Notify listeners] \"Chart generates statistics based on new data\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        --\u003e \u003d\u003d\u003dB2\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        else"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        --\u003e [else] \u003d\u003d\u003dB2\u003d\u003d\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    --\u003e [else] if \"\" then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        -left-\u003e [Displayed chart is updated] \"ObservableList of Expenses\\n updated\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        --\u003e [Notify listeners] \"Chart generates statistics based on new data\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    else"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        -left-\u003e [else] \u003d\u003d\u003dB2\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    \u003d\u003d\u003dB2\u003d\u003d\u003d --\u003e \"End command\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    --\u003e (*)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 28
    }
  },
  {
    "path": "docs/diagrams/DisplayStatisticsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":StatisticsFormat\" as StatisticsFormat MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "box Chart UI_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":ChartBox\" as ChartBox UI_COLOR_T3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":Chart\" as Chart UI_COLOR_T3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":StatisticsGenerator\" as StatisticsGenerator UI_COLOR_T3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":JavaFxChart\" as JavaFxChart UI_COLOR_T3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "box UI UI_COLOR_T3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":UI\" as Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[-\u003e Model : setStatisticsFormat(newFormat)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Model -\u003e StatisticsFormat : setValue(newFormat)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate StatisticsFormat"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "StatisticsFormat -\u003e ChartBox : notifyListeners(newFormat)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate StatisticsFormat"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate ChartBox"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "create Chart"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ChartBox -\u003e Chart: new"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate ChartBox"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate Chart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Chart -\u003e StatisticsGenerator :generate(expenseList)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate Chart"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate StatisticsGenerator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "StatisticsGenerator --\u003e Chart : ExpenseXYZStatistic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate StatisticsGenerator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate Chart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Chart --\u003e JavaFxChart : display(formattedStatistic)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate Chart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate ChartBox"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ChartBox --\u003e Ui : render(chart)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate ChartBox"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 50
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class BillboardParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager .left.\u003e CommandHistory : store \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager ..\u003e VersionedBillboard : store \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "CommandHistory -down[hidden]- VersionedBillboard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager -down-\u003e\"1\" BillboardParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "BillboardParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager -right-\u003e Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 2,
      "waynefong0401": 6,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Interface ReadOnlyBillboard \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Interface ReadOnlyArchiveWrapper \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class Billboard"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class ReadOnlyBillboard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class ArchiveWrapper"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Package Expense {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class ExpenseList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class Archive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Class UniqueTagList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Class TagCountManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Billboard .up.|\u003e ReadOnlyBillboard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ArchiveWrapper .up.|\u003e ReadOnlyArchiveWrapper"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ModelManager o--\u003e \"1\" Billboard"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ModelManager o--\u003e \"1\" ArchiveWrapper"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Billboard *--\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Billboard *--\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Billboard *--\u003e \"1\" TagCountManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "UniqueTagList *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "TagCountManager o--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ArchiveWrapper *--\u003e \"*\" Archive"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ExpenseList o--\u003e \"*\" Expense"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Archive o--\u003e \"*\" Expense"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ExpenseList \u003c|-right Archive"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Expense *--\u003e Name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Expense *--\u003e Amount"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Expense *--\u003e Description"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Expense o--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Description -[hidden]right-\u003e Amount"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ModelManager -----\u003e\"1..*\" Expense : filtered list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 25,
      "waifonglee": 7,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/StatisticsGeneratorClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package StatisticsGenerator \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Interface StatisticsGenerator \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class XYZGenerator"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class ExpenseXYZ"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class ExpenseXYZChart"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ExpenseXYZChart -right-\u003e XYZGenerator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ExpenseXYZChart -right-\u003e ExpenseXYZ"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "XYZGenerator -up|\u003e StatisticsGenerator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "note right of XYZGenerator: XYZGenerator \u003d TimelineGenerator, \\nBreakdownGenerator, etc"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "XYZGenerator -down-\u003e ExpenseXYZ"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "note right of ExpenseXYZ: ExpenseXYZ \u003d ExpenseTimeline, \\n ExpenseBreakdown, etc"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 28
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Interface BillboardStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class JsonBillboardStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "StorageManager o--\u003e BillboardStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "JsonBillboardStorage .left.|\u003e BillboardStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "JsonBillboardStorage .down.\u003e JsonSerializableBillboardStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "JsonSerializableBillboardStorage .right.\u003e JsonSerializableExpense"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "JsonSerializableExpense .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/StoreSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":BillboardParser\" as BillboardParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "box CommandHistory MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":CommandHistory\" as CommandHistory MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager -\u003e CommandHistory : addCmdHistory(\"delete 1\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "CommandHistory -\u003e LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager -\u003e BillboardParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate BillboardParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "BillboardParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "DeleteCommandParser --\u003e BillboardParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "BillboardParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "DeleteCommandParser --\u003e BillboardParser : d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e BillboardParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "BillboardParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate BillboardParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 61
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class ExpenseListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Class ExpenseCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package Chart \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Class HiddenChart #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "MainWindow *-down-\u003e ExpenseListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ExpenseListPanel -down-\u003e ExpenseCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ExpenseListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ExpenseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ExpenseCard ..\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "MainWindow -down-\u003e Chart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "ExpenseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 8,
      "-": 52,
      "weiijiie": 5
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State1 as \"__bb0:Billboard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State2 as \"__bb1:Billboard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State3 as \"__bb2:Billboard__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State1 as \"__bb0:Billboard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State2 as \"__bb1:Billboard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State3 as \"__bb2:Billboard__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "title After command \"add n/buy...\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State1 as \"__bb0:Billboard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State2 as \"__bb1:Billboard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State3 as \"__bb2:Billboard__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State1 as \"__bb0:Billboard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State2 as \"__bb1:Billboard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State3 as \"__bb2:Billboard__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State1 as \"__bb0:Billboard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State2 as \"__bb1:Billboard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State3 as \"__bb2:Billboard__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State1 as \"__bb0:Billboard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State2 as \"__bb1:Billboard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State3 as \"__bb3:Billboard__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "note right on link: State bb2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":BillboardParser\" as BillboardParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "box VersionedBillboard MODEL_COLOR_T2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":VersionedBillboard\" as VersionedBillboard MODEL_COLOR_T4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "LogicManager -\u003e BillboardParser : parseCommand(undo)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate BillboardParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "BillboardParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "UndoCommand --\u003e BillboardParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "BillboardParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate BillboardParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "UndoCommand -\u003e VersionedBillboard : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate VersionedBillboard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "VersionedBillboard --\u003e UndoCommand : undoModel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate VersionedBillboard"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "UndoCommand -\u003e Model : setModel(undoModel)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 17,
      "-": 38
    }
  },
  {
    "path": "docs/diagrams/UpDownKeyState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package cmdList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class cmd0 as \"__cmd0:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class cmdInit as \"__empty:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "cmdInit -[hidden]right-\u003e cmd0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "hide cmd0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Pointer -up-\u003e cmdInit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 19
    }
  },
  {
    "path": "docs/diagrams/UpDownKeyState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package cmdList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class cmd0 as \"__cmd0:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class cmdInit as \"__empty:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "cmdInit -[hidden]right-\u003e cmd0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Pointer -up-\u003e cmdInit"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 17
    }
  },
  {
    "path": "docs/diagrams/UpDownKeyState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package cmdList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class cmd0 as \"__cmd0:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class cmdInit as \"__empty:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "cmdInit -[hidden]right-\u003e cmd0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Pointer -up-\u003e cmd0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 17
    }
  },
  {
    "path": "docs/diagrams/UpDownKeyState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State1 as \"__bb0:Billboard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State2 as \"__bb1:Billboard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class State3 as \"__bb2:Billboard__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 20
    }
  },
  {
    "path": "docs/diagrams/UpKeySequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "box CommandBox LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":TextField\" as TextField LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "box CommandHistory MODEL_COLOR_T2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "participant \":CommandHistory\" as CommandHistory MODEL_COLOR_T4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "[-\u003e TextField : onKeyPressed(e)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate TextField"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "alt e is Up key"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "TextField -\u003e CommandHistory : peekNextCmd()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "CommandHistory --\u003e TextField : cmd"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "TextField -\u003e TextField : setText(cmd)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "activate TextField"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "TextField --\u003e TextField"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate TextField"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "end"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "[\u003c--TextField"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "deactivate TextField"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 33
    }
  },
  {
    "path": "docs/diagrams/UpdateExpensesSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":ObservableList\u003cExpense\u003e\" as ObservableList MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "box Chart UI_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":Chart\" as Chart UI_COLOR_T3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":StatisticsGenerator\" as StatisticsGenerator UI_COLOR_T3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "participant \":JavaFxChart\" as JavaFxChart UI_COLOR_T3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "[-\u003e Model : updateFilteredExpenses(SHOW_ALL)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Model -\u003e ObservableList : setPredicate(SHOW_ALL)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate ObservableList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "ObservableList -\u003e Chart : notifyListeners(expenseList)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate ObservableList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate Chart"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Chart -\u003e Chart: onUpdate(expenseList)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate Chart"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Chart -\u003e StatisticsGenerator :generate(expenseList)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate Chart"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate StatisticsGenerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "StatisticsGenerator --\u003e Chart : ExpenseXYZStatistic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate StatisticsGenerator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "activate Chart"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "Chart --\u003e JavaFxChart : display(formattedStatistic)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "deactivate Chart"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 41
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "ecp -\u003e ec ++: index, editExpenseDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 20
    }
  },
  {
    "path": "docs/team/davidcwh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d Chia Wei Hao, David - Project Portfolio for Billboard"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Purpose of portfolio"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The purpose of this portfolio is to document my overall contributions to the Software Engineering project, _Billboard_."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d About the project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "In the Software Engineering Module _CS2103T_, My team of 5 students were tasked with enhancing an existing addressbook desktop application for our project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "We decided to transform the base code of the aforementioned addressbook application into a personal financial management system called _Billboard_, targeted at students."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This enhanced application enables students to record their daily expenses and has advanced expense tracking and management features."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The advanced features for *tracking* expenses are generating graphs from expense data, and filtering capabilities; while"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "the advanced features for *managing* expenses are tagging and archiving expenses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Since _Billboard_ is a Command Line Interface (CLI) application, meaning that all interactions between user and the application are done through typing only, it is meant for students who"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "type fast. Furthermore, _Billboard_ also has a fully functioning Graphical User Interface (GUI), making it user friendly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The role I played in this project was to design and implement the code for the `archive` feature. Additionally, I was"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "tasked with improving the application\u0027s aesthetic design by adding major cosmetic tweaks to the application\u0027s GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The following sections illustrate these enhancements in greater detail, including the relevant documentation I have added to the user and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "developer guides concerning these enhancements."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Note the following formatting used in this document:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "NOTE: This symbol indicates important information."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`archive` - A grey highlight (called a mark-up) indicates that this is a command that can be inputted into the command line and executed by _Billboard_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ArchiveWrapper*` - A grey highlight (called a mark-up) with bold text indicates a component, class, object or variable in the architecture of _Billboard_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\"_movie tickets_\" - Italicised text with quotation marks indicates the name of an expense or archive used for demonstration purposes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This section summarises what I have contributed to _Billboard_. This comprises of technical, documentation or any other meaningful contributions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* *Major enhancement*: I added all archive related functions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** *What it does*: My enhancement allows the user to create archives, add an expense to an archive, revert/\"unarchive\" an archived expense and permanently delete expenses in an archive."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** *Justification*: Suppose users have old or outdated expenses but they do not want to permanently delete them as they may refer to these expenses again in the future for accounting purposes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Users can simply archive these expenses, which *de-clutters their list of current expenses.*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Furthermore, as users are able to group expenses into different archives, they are offered *greater flexibility in expense organisation.*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Therefore, this feature contributes great value to the application, as it provides users with a method of organising and tracking their expenses in the long run."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** *Highlights*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*** This enhancement works well with most existing features and features to be added in future. This is because expenses that are archived cannot be edited (e.g. adding a tag) as they"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "are considered as \"non active\" expenses and are being kept as records only. Therefore the archive enhancement, in a sense, is isolated from the other expense modifying enhancements which"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "reduces the possibility of archive bugs due to integration with other features."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*** A thorough analysis of other design alternatives was required as the archive feature involved storing and maintaining multiple distinct lists of expenses, and so different designs to implement"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "this would yield varying results regarding the application\u0027s overall speed performance. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Ultimately, the design of the current implementation was chosen as it is relatively easy to implement and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "maintained the application\u0027s performance above the acceptable benchmark. This benchmark is the non functional requirement of being able to hold up to 1000 expenses without a noticeable"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003ddavidcwh[Functional code tracked with RepoSense]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*** There are 5 releases of _Billboard_ in total, consisting of versions 1.1, 1.2, 1.2.1, 1.3 and 1.4. I managed and released versions 1.1 and 1.2 on Github."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*** I designed and implemented the default Billboard color scheme, called the \"Inertia theme\", to give the application its unique aesthetic identity and make it more user-friendly."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Additionally, I added an extra Pastel color theme for users who prefer a brighter interface (Pull request https://github.com/AY1920S1-CS2103T-F12-4/main/pull/104[#104])"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*** I wrote the team\u0027s About Us document, which consisted of information about our team members: https://github.com/AY1920S1-CS2103T-F12-4/main/pull/7[#7]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*** I added our project\u0027s user stories, use cases and non functional requirements to the Developer Guide: https://github.com/AY1920S1-CS2103T-F12-4/main/pull/19[#19]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*** I renamed all instances of placeholder name \"_Financial Tracker_\" to \"_Billboard_\" in User Guide, Developer Guide and Readme documents: https://github.com/AY1920S1-CS2103T-F12-4/main/pull/26[#26]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*** Pull Requests of team members reviewed and approved by me:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/12[#12],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/25[#25],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/39[#39],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/50[#50],"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/52[#52],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/57[#57],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/58[#58],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/63[#63],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/70[#70],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/73[#73],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/76[#76],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/90[#90],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/97[#97],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/105[#105],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/107[#107],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/109[#109],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/112[#112],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/113[#113],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/185[#185],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F12-4/main/pull/191[#191 (with constructive feedback)]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Given below is an excerpt from the _**Billboard User Guide**_ detailing instructions on how to use the new `archive` feature I added."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This excerpt reflects my ability to write documentation meant for students, the targeted user group of the application, in a clear and concise manner so that they will be able to easily"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "understand what each `archive` operation does and how to use them."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Do note that due to the page limit, only the feature preface and the ** _Adding an expense to an archive:** ``archive add``_  sections are included in full as a sample representative of my documentation skills."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The documentation of the other commands will be an abbreviated version (Step-by-step example usage for these commands are left out)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "You may refer to the https://ay1920s1-cs2103t-f12-4.github.io/main/UserGuide.html#archiving-past-expenses-code-archive-code[_**Billboard User Guide**_]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "for the full version."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Archiving past expenses: `archive`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This feature allows you to archive expenses. An expense is archived when you want remove it from"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "the current list of expenses, but still want to keep a record of it and retrieve it again in the future"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "for accounting purposes."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "NOTE: *Archived expenses cannot be edited.* +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Archived expenses are not considered current and \"active\" expenses so you are unable to edit them. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "You would need to unarchive an expense first before you would be able to perform expense editing commands on it such as"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`edit`, `tag add` and `tag remove` commands."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Although this section of the user guide provides comprehensive information on the usage of `archive` commands,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "you could also view the list of all supported archive commands within the application by typing the command word `archive`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "into the command box and press `Enter`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The following are all the archive commands, descriptions of how they work and their usage."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Note the formatting of command parameters used in this section:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* [INDEX]: The list index of the expense involved in the command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `arc/`: Prefix to indicate that the text appended to it is the specified archive name."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* [ARCHIVE NAME]: Specified name of archive involved in the command. Archive name is case-sensitive and must be non-empty. Names with symbols and multiple words are accepted as well."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Adding an expense to an archive: ``archive add``_ +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command allows you to transfer the expense at the specified index to your specified archive. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "If the archive you entered does not exist, then a new archive is created before the expense is added. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive add [INDEX] arc/[ARCHIVE NAME]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Suppose you want to archive the expense called \"_joker movie tickets_\" to an archive called \"_movies_\". +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "To archive the expense:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. Type `archive add 7 arc/movies` into the command box, and press `Enter` to execute the command:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".The expense \"_joker movie tickets_\" is at index 7 in the list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image:archiveAddEnterCommand.png[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. The next step can be split into 2 scenarios:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2a. *There is no existing archive called \"_movies_\"* +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "A new archive called \"_movies_\" is created before \"_joker movie tickets_\" is added to it. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The result box will display the message to indicate the archive creation and transfer of the expense:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveAddArchiveCreatedMessage.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* 2b. *There is an existing archive called \"_movies_\"* +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\"_joker movie tickets_\" is simply added to the existing \"_movies_\" archive. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The result box will display the message to indicate the transfer of the expense:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "+"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::archiveAddExistentArchiveMessage.png[]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Listing out all archives: ``archive listall``_ [Abbreviated] +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command informs you of all the existing archives by displaying a list of all existing archive names. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive listall"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Listing expenses in a particular archive: ``archive list``_ [Abbreviated] +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command allows you to view the list of expenses of your specified archive. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive list [ARCHIVE NAME]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Deleting an archived expense: ``archive delete``_ [Abbreviated] +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command allows you to delete the expense at the specified index from your specified archive. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "If the archived expense you deleted was the last expense in the archive, the empty archive will be deleted. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive delete [INDEX] arc/[ARCHIVE NAME]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d _Reverting an archived expense: ``archive revert``_ [Abbreviated] +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This command allows you to revert/unarchive the expense at the specified index from your specified archive, transferring it back to your current list of expenses. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "If the archive expense you reverted was the last expense in the archive, the empty archive will be deleted. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " archive revert [INDEX] arc/[ARCHIVE NAME]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Given below are my documentation in the Developer Guide. They reflect my ability to write technical documentation and showcase the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Do note that due to the page limit, the Full Sequence Diagram and Activity Diagram of `*AddArchiveCommand*` are omitted."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "You may refer to the full https://ay1920s1-cs2103t-f12-4.github.io/main/DeveloperGuide.html#archive[*_Billboard Developer Guide_*] to view these diagrams."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d Archive"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Modelling Archive"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The archive feature supports the following actions:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Creating an archive"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Adding an expense to an archive"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Reverting/\"unarchiving\" an archived expense"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Deleting an archived expense"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Displaying the list of expense of a particular archive"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Listing all existing archive names"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "These actions are facilitated by the `*ArchiveWrapper*` and `*Archive*` classes:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Structure and associations of `*ArchiveWrapper*` and `*Archive*` classes"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::ArchiveClassDiagram.png[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*  `*Archive*` extends from `*ExpenseList*` in order to encapsulate an archive name and a list of expenses together as an archive."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper*` manages all existing archives and hashes each `*Archive*` object to its archive name."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The implementation of the archive feature is located in the `*Model*` component in terms of the overall architecture of _Billboard_."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ArchiveWrapper*` is used in `*ModelManager*` to manage all archives. Its respective operations are called to access and manipulate archive expenses when an archive command is entered. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Such operations include:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#AddArchive(Archive)*` - Adds the given archive to the current map of archive objects."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#HasArchive(String)*` - Checks if the specified archive by the given archive name exists."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#removeArchive(Archive)*` - Deletes the given archive from the current map of archive objects. (Assumes given archive already exists)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#hasArchiveExpense(String, Expense)*` - Checks if the specified archive by the given archive name has the given expense."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#addArchiveExpense(String, Expense)*` - Adds the given expense into the specified archive by the given archive name. (Assumes given archive already exists)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#removeArchiveExpense(String, Expense)*` - Deletes the given expense into the specified archive by the given archive name. (Assumes given archive and expense already exists)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `*ArchiveWrapper#getArchiveNames()*` - Returns a set of all existing archive names"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "These operations are exposed in the `*Model*` interface with respective methods of the same name. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E.g `*Model#addArchive(Archive)*` calls `*ArchiveWrapper#AddArchive(Archive)*`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Given below is an example usage scenario of the add expense to archive function, showing how the command is parsed in `*Logic*` and how it interacts with `*Model*`: +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Step 1. The user has the application running and has a non empty list of current expenses. The user can enter the `list` command to bring up"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "this list. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Step 2. The user executes the command `archive add 3 arc/archiveName` to archive an expense. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The command is first parsed by `*BillboardParser*` to determine what kind of general command it is. `archive` indicates it is an archive command so the remaining input is parsed through `*ArchiveCommandParser*`. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ArchiveCommandParser*` determines which archive command should be called. `add` indicates it is an add command, so the input is parsed for the final time through `*AddArchiveCommandParser*` to extract out the arguments entered for the operation."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "In this case, the arguments are `3` and `archiveName` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "This layered parsing process can be visualised below:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Process of parsing `*AddArchiveCommand*` in a cropped sequence diagram"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::AddArchiveCommandSequenceDiagram_Parsing.png[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Step 3. `*AddArchiveCommandParser*` then returns an `*AddArchiveCommand*` object to be executed. The `*AddArchiveCommand*` performs two checks before executing any changes:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* First, it is changed if entered index, `3`, is a valid index from the current expense list. An exception is thrown and the command is aborted if the index is invalid,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "so `*Model*` is left unmodified in this case."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Next, it is checked if the entered archive name, `archiveName`, is an existing archive by calling `*Model#HasArchive(String)*`. If the archive does not already exist,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "then a new archive is created with the given archive name using `*Model#addArchive(Archive)*`. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "After the checks are completed and if no exception is thrown, the command executes the archiving of the expense through these steps:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* The expense to be archived is first retrieved by `*Model#getFilteredList()#get(int)*`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* The expense is then deleted from the list of current expenses by calling `*model#deleteExpense(Expense)*`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Next, the expense\u0027s `*archiveName*` field is updated using `*Expense#archiveTo(String)*`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* Lastly, the expense is added to the specified archive using `*Model#addArchiveExpense(String, Expense)*`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "These interactions with `*Model*` by `*AddArchiveCommand*` can be shown in the cropped portion of the full sequence diagram below:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".Interactions between `*Model*` and `*AddArchiveCommand*` during the execution of the command"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "image::AddArchiveCommandSequenceDiagram_executeCommand.png[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Step 4. Finally, a `*CommandResult*` object initialised with the add expense to archive success message is returned to indicate to the user that the operation was successful. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Full Sequence diagram of the operation:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*(Diagram omitted due to page limit)*"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `*AddArchiveCommand*`:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "*(Diagram omitted due to page limit)*"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Storing Archive"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "All expenses, archived and non-archived, are stored in a single JSON file. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Upon start up of the application, all expenses are retrieved from JSON format and passed into"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ModelManager*` as a combined `*Billboard*` object. During the initialization of `*ModelManager*`, the expenses in this `*Billboard*` object are filtered out into non-archived and"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "archived expenses by each `*Expense*` object\u0027s `*archiveName*` field. The separate lists of non-archive and archive expenses are then used to initialize new `*Billboard*` and"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*ArchiveWrapper*` objects of `*ModelManager*` respectively. The `*Billboard*` object of `*ModelManager*` is used to maintain non-archive expenses. +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "After each command is executed, the expenses in `*Model*` are saved into the JSON file. The method `*Model#getCombinedBillboard*` is called which collates all `*Expense*` objects"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "from its `*Billboard*` and `*ArchiveWrapper*` objects together into a single list and creates a new combined `*Billboard*` object. This combined `*Billboard*` is returned and used by"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`*Storage*` to serialize into JSON format and writes it into the JSON file."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Implementing the archive feature is a non-trivial task, thus there are many possible ways of designing it. This section offers an evaluation of the alternative designs."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure to hold archives in `*ArchiveWrapper*`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* ** Alternative 1 (Current implementation): ** Use of HashMap, mapping each archive name to its `*Archive*` object"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Pros: Accessing data in a HashMap is instant. Therefore, retrieving an archive when performing add/delete archive expense operations or checking if an archive exists is fast."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Cons: As `*ArchiveWrapper*` is initialized with a single list of archive `*Expense*` objects, the initialization process is slower as this given list needs to be iterated"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "through to filter each `*Expense*` object into their respective `*Archive*` objects in the HashMap."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* ** Alternative 2: ** Use a single list to store all archive expenses"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Pros: Initialization of `*ArchiveWrapper*` is fast, as the given list of archive expenses need not be processed."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Cons: Some operations, like delete archive expense or get all archive names, are slower as the entire list must be iterated through each time in the worst case scenario."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "For example, to check if an expense exists in a particular archive, the entire list must be iterated if the expense to be found is at the end of the list."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storing archives"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* ** Alternative 1 (Current implementation): ** Storing non-archive and archive expenses together"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Pros: No new storage classes need to be implemented, as this implementation uses the existing classes only."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Cons: Initialization process of `*ModelManager*` is slower as the expenses need to be filtered into archive and non-archive expenses first."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* ** Alternative 2: ** Storing archive expenses as `*Archive*` objects in a separate file"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Pros: Initialization process of `*ModelManager*` is faster, as its `*ArchiveWrapper*` object can be initialized directly with the list of `*Archive*` objects retrieved from the JSON file."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "No filtering of archive and non-archive expense from the same list is needed."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "** Cons: More difficult to implement, as more JSON storage classes must be added and knowledge on serialising and deserialising new objects is needed."
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 322
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 68
    }
  },
  {
    "path": "docs/team/waifonglee.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d Lee Wai Fong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d PROJECT: Billboard"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This page will document my overall contributions to the Software Engineering Project, _Billboard_."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d About Billboard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "For our Software Engineering Project, my team of 5 were tasked with enhancing a desktop addressbook application. With students as our target users, we decided to morph it into a personal financial management system called _Billboard_."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "_Billboard_ enables students to track and manage their expenses in an intuitive and convenient way. With features like tagging and archiving, students are able to manage and organise their expenses. Similarly,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "features like viewing statistical graphs of their recent expenditure and advanced search functions allows them to track their expenses. +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "_Billboard_ is a Command Line Interface(CLI) desktop application, meaning that it is catered for students who prefer typing as all interactions between users and the application is through typing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "For more user friendliness, _Billboard_ has a Graphical User Interface(GUI). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This is what _Billboard_ looks like: +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/Billboardppp.png[] +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "My role was to design and implement features related to tagging. The following sections illustrate these enhancements in more detail, as well as the relevant documentation i have added to the user and developer guides in relation to them. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This symbol indicates important information +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "`tag` - A grey highlight (called a mark-up) indicates that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "`*UniqueTagList*` - A grey highlight (called a mark-up) with bold text indicates a component, class or object in the architecture of the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\"_tech_\" - Italicised text with quotation marks indicates the name of an expense or tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to _Billboard_. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* *Major enhancement*: i added features related to tagging. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** *What it does*: This enhancement allows users to add and remove tags from an expense. Users can also list out existing tags and filter their expenses by tags."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** *Justifications*: Tagging allows for easier management of expenses. Expenses with the same tags are grouped together which allows users to search for related expenses quickly."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** *Highlights*: This enhancement works with existing as well as future commands. An in-depth analysis of design alternatives was necessary since there are many ways to implement this enhancement, each with its own pros and cons in terms of efficiency or space allocation in the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The current design is used to ensure there is a balance between space allocation and efficiency of the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* *Code Contributed*: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003df12-4\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dwaifonglee\u0026tabRepo\u003dAY1920S1-CS2103T-F12-4%2Fmain%5Bmaster%5D[RepoSense]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* *Other Contributions*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** *Enhancements to existing features*:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Updated the GUI color scheme and effects to make it more user-friendly. (PR https://github.com/AY1920S1-CS2103T-F12-4/main/pull/105[#105])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Wrote additional tests for existing features (PR https://github.com/AY1920S1-CS2103T-F12-4/main/pull/39[#39])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** *Documentation*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Contributed to user stories, use cases and non functional requirements in the Developer Guide."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** *Community*:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** PRs reviewed and approved: https://github.com/AY1920S1-CS2103T-F12-4/main/pull/6[#6] https://github.com/AY1920S1-CS2103T-F12-4/main/pull/18[#18] https://github.com/AY1920S1-CS2103T-F12-4/main/pull/51[#51] https://github.com/AY1920S1-CS2103T-F12-4/main/pull/72[#72] https://github.com/AY1920S1-CS2103T-F12-4/main/pull/94[#94] https://github.com/AY1920S1-CS2103T-F12-4/main/pull/103[#103] https://github.com/AY1920S1-CS2103T-F12-4/main/pull/104[#104] https://github.com/AY1920S1-CS2103T-F12-4/main/pull/108[#108] https://github.com/AY1920S1-CS2103T-F12-4/main/pull/115[#115]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "We had to update the original addressbook User Guide with instructions for the enhancements that we had added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The following is an excerpt from *_Billboard User Guide_*, showing additions that I have made for the tag features. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Note that examples and diagrams for `tag list` and `tag filter` are omitted due to space constraints."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d Tagging expenses: `tag`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This feature allows you to assign tags to your expenses. Expenses with the same tag will be grouped together, allowing you to search for related expenses easily."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Tag names should be *alphanumeric*. This means that they should not contain spaces or special characters. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Tag names are *case sensitive.* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "You are *not* able to use this feature on *archived expenses*."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "To view a list of supported tag commands, you could type `tag` in the command box and press `enter`. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Similarly, to view parameters for supported tag commands, you could type `tag` followed by the supported tag command and press `enter`. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: `tag rm`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a tag: `tag add` +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command adds your input tag(s) to the expense at the index you have specified. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " tag add [INDEX] t/[TAG] t/\u003cTAG\u003e..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Lets say that you want to add the tags \"_holiday_\" and \"_hangout_\" to the expense \"_USS_\" at index 2. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "To add the tags: +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "1. Type `tag add 2 t/holiday t/hangout` in the command box and press `enter` to execute it. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/AddTagOne.png[] +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "2. The result box will display the message \"Added tag(s) to Expense: +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Name: USS Description:  Amount: 70.00 Created: 13 Apr 2019, 11:23 PM Archive Name:  Tags: [[hangout], [holiday]]\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/AddTagTwo.png[] +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "3. You could see the tags \"_holiday_\" and \"_hangout_\" in the expense at index 2. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/AddTagThreeCropped.png[] +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "You are not able to add *existing* tags. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If you input *existing* and *non-existing* tags, Billboard adds the *non-existing* tags only. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If you input *duplicate* tags, Billboard adds them *once*. i.e Billboard does *not* allow duplicate tags in an expense. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: `tag add t/holiday t/holiday`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a tag: `tag rm` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command removes your input tag(s) from the expense at the index you have specified. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " tag rm [INDEX] t/[TAG] t/\u003cTAG\u003e..."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Lets say that you want to remove the tags \"_holiday_\" and \"_hangout_\" from the expense \"_USS_\" at index 2. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "To remove the tags: +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "1. Type `tag rm 2 t/holiday t/hangout` in the command box and press `enter` to execute it. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/rmTagOne.png[] +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "2. The result box will display the message \"Removed tag(s) from Expense: +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " Name: USS Description:  Amount: 70.00 Created: 13 Apr 2019, 11:23 PM Archive Name:  Tags: []\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/rmTagTwo.png[] +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "3. You could see that the expense at index 2 no longer has the tags \"_hangout_\" and \"_holiday_\". +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image:tagging/rmTagThree.png[] +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "You are not able to remove *non-existing* tags. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If you input *duplicate* tags, Billboard removes them *once*. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Example: `tag rm t/holiday t/holiday`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering by tag: `tag filter` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command filters expenses by your input tag(s). +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " tag filter t/[TAG] t/\u003cTAG\u003e..."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Listing out all the tags: `tag list` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "This command lists out all existing tags. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " tag list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d Contributions to Developer Guide"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "We had to update the original addressbook Developer Guide with instructions for the enhancements that we had added."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The following is an excerpt from *_Billboard Developer Guide_*, showing additions that I have made for the tag features. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d Tagging"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The tag feature supports the following operations:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* Adding tags to an expense"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* Removing tags from an expense"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* Filtering expenses by tags"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* Listing all existing tags"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "These actions are facilitated by the `*UniqueTagList*` and `*TagCountManager*` classes:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*UniqueTagList*` maps `*String*` to `*Tag*` where `*String*` is the name of the `*Tag*`. It ensures that the same `*Tag*` object is referenced instead of creating many `*Tag*` objects of the same name during operations."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*TagCountManager*` maps `*Tag*` to `*Integer*`, where `*Integer*` is the number of `*Expense*` tagged with each `*Tag*`. It allows `*Tag*` objects that are not tagged with any `*Expense*` to be tracked and removed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Operations include:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*UniqueTagList#retrieveTags(List\u003cString\u003e)*` -- Retrieves corresponding tags from `*UniqueTagList*` based on the list of tag names."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*UniqueTagList#removeAll(List\u003cTag\u003e)*` -- Removes tags given in the list from the `*UniqueTagList*`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*UniqueTagList#getTagNames()*` -- Returns a list of existing tag names."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*TagCountManager#incrementAllCount(Set\u003cTag\u003e)*` -- Increments the `*Integer*` mapped to the tags in the set by 1."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*TagCountManager#decreaseAllCount(Set\u003cTag\u003e)*` -- Decreases the `*Integer*` mapped to the tags in the set by 1."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*TagCountManager#removeZeroCount()*` -- Removes all mappings where the `*Integer*` is equal to 0."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "These operations are exposed in the `*Model*` interface as:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*Model#retrieveTags(List\u003cString\u003e)*`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*Model#incrementCount(Set\u003cTag\u003e)*`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*Model#decreaseCount(Set\u003cTag\u003e)*` -- `*TagCountManager#removeZeroCount()*` and `*UniqueTagList#removeAll(List\u003cTag\u003e)*` are called in this method to remove any tag not tagged to any expense from the `*UniqueTagList*` and `*TagCountManager*`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* `*Model#getTagNames()*`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Given below is an example usage scenario and how adding tag executes at every step."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Step 1:**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The user launches the application. The `*Model*` is initialized with saved data. All tags are loaded into `*UniqueTagList*` and `*TagCountManager*`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Step 2:**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "User enters the command `tag add 1 t/test t/test2` to add tags to the `*Expense*` at index 1 in Billboard. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*2a*. `*BillboardParser*` parses this command, creating a `*TagCommandParser*` after determining that it is a tag command. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*2b*. The `*TagCommandParser*` then parses `add 1 t/test t/test2` and creates an `*AddTagCommandParser*` after determining that it is a command to add tags. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*2c*. Subsequently, the `*AddTagCommandParser*` parses `1 t/test1 t/test2` into `*Index*` 1 and"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "a list of `*String*` consisting of `test1` and `test2`. `*AddTagCommandParser*` creates `*AddTagCommand*` with the `*Index*` and list of `*String*` as parameters."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Step 3:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "`*LogicManager*` executes the `*AddTagCommand*`. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "During execution, +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*3a*. `*AddTagCommand*` calls `*Model#retrieveTags(List\u003cString\u003e)*` on the list of `*String*` consisting of `test1` and `test2` which returns a set of `*Tag*` with tag names `test1` and `test2`. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*3b*. `*AddTagCommand*` then calls `*Model#incrementCount(Set\u003cTag\u003e)*` on the set of `*Tag*`. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*3c*. Lastly, `*AddTagCommand*` calls `*Model#setExpense(Expense, Expense)*` which edits and updates the `*Expense*` at index 1 in the `*Model*`. The updated `*Expense*` is then reflected on the GUI."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "Duplicate tags in an `*Expense*` is not allowed. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If the user tries to add an existing `*Tag*` to an `*Expense*`, `*AddTagCommand*` throws an exception, leading to an error message. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "If the user tries to add duplicate `*Tag*`, i.e enter 2 of the same `*Tag*`, `*AddTagCommand*` adds the tag once and increments the number of expenses tagged to it by 1."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The following sequence diagram shows how the adding tag operation works."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image::AddTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "NOTE: The lifeline for `*TagCommandParser*` and `*AddTagCommandParser*` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "The following activity diagram summarizes what happens when a user enters a command to add tags to an expense."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "image::AddTagActivityDiagram.png[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support tag commands"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Alternative 1 (current choice):** Use a `*UniqueTagList*` to map tag names to `*Tag*` and `*TagCountManager*` to map `*Tag*` to number of `*Expense*` tagged to it."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Each structure has only one responsibility."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Fast retrieval and update of data"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Requires maintenance of both structures as they need to sync with each other."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Retrieval of all `*Expense*` under a `*Tag*` requires filtering through the whole list of `*Expense*`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Alternative 2 :** Have each `*Tag*` store a list of `*Expense*` tagged to it."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Fast retrieval of all `*Expenses*` under each `*Tag*`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Circular dependency"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Since implementation of Billboard objects are immutable, there is a constant need to update the `*Expense*` in the list even after executing non-tag related commands."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "* **Alternative 3 :** Use one map to map `*Tag*` to `*Expense*` tagged to it."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Fast retrieval of all `*Expenses*` under each `*Tag*`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "*** Since implementation of Billboard objects are immutable, there is a constant need to update the `*Expense*` in the list even after executing non-tag related commands."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "waifonglee": 242
    }
  },
  {
    "path": "docs/team/waynefong0401.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d Fang WeiWen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d PROJECT: Billboard"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "_Billboard_ is for those who prefer to use desktop applications to manage and keep track of their expenses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "_Billboard_ is optimized for those who prefer to work with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "while still enjoying all the benefits of having a fully fledged Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "It is written in Java, and has about 18 kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* *Major enhancement*: added *the feature to undo/redo commands*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** added a history command that allows the user to view all the previous commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** added a feature that allows the user to to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dwaynefong0401[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Project setup:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "*** Restructured the previous AddressBook Level-3 project to Billboard. Deleted the dead code and added attributes for Billboard."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "*** Corrected mistakes and updated information of the project in the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "*** PRs reviewed: https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "*** Contributed to Telegram group discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "*** Applied Statistic Tool to get the statistics of the project."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhistory]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupdownkey]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dhistory]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dupdownkey]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 74
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.billboard.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "`seedu.billboard.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/seedu/billboard/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/billboard/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/billboard/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.versionedbillboard.VersionedBillboard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.storage.BillboardStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.storage.JsonBillboardStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Billboard ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        BillboardStorage billboardStorage \u003d new JsonBillboardStorage(userPrefs.getBillboardFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        storage \u003d new StorageManager(billboardStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.commit(model.getClone());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Billboard expenses, Archive expenses"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The data from the sample Billboard will be used instead if {@code storage}\u0027s Billboard or Archive expenses"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * are not found, or an empty Billboard will be used instead if errors occur"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * when reading {@code storage}\u0027s billboard."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Optional\u003cReadOnlyBillboard\u003e billboardOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        ReadOnlyBillboard initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            billboardOptional \u003d storage.readBillboard();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (billboardOptional.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Billboard\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            initialData \u003d billboardOptional.orElseGet(SampleDataUtil::getSampleBillboard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Billboard\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            initialData \u003d SampleDataUtil.getSampleBillboard();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            logger.warning(\"Problem while reading from the data file. Will be starting with an empty Billboard\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            initialData \u003d new Billboard();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Billboard\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        logger.info(\"Starting Billboard \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Billboard ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 23,
      "waynefong0401": 24,
      "-": 139,
      "weiijiie": 2
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expense(s) listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_ARCHIVE_ENTERED \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            \"There is no existing archive of the name provided!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_INVALID_ARCHIVE_NAME \u003d \"The archive name cannot be empty!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_NOT_UNDOABLE \u003d \"There is no command to be undone.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_NOT_REDOABLE \u003d \"There is no command to be redone.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 3,
      "waifonglee": 1,
      "waynefong0401": 3,
      "-": 9,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/date/DateInterval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.temporal.TemporalAdjuster;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Enum representing an interval for dates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public enum DateInterval {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    DAY(\"day\", Period.ofDays(1), TemporalAdjusters.ofDateAdjuster(x -\u003e x)),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    WEEK(\"week\", Period.ofWeeks(1), TemporalAdjusters.previous(DayOfWeek.MONDAY)),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    MONTH(\"month\", Period.ofMonths(1), TemporalAdjusters.firstDayOfMonth()),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    YEAR(\"year\", Period.ofYears(1), TemporalAdjusters.firstDayOfYear());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final Map\u003cString, DateInterval\u003e nameToDateIntervalMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Period period;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final TemporalAdjuster adjuster;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        nameToDateIntervalMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (DateInterval interval : values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            nameToDateIntervalMap.put(interval.getName(), interval);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    DateInterval(String name, Period period, TemporalAdjuster adjuster) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.adjuster \u003d adjuster;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the correct {@code DateInterval} corresponding to the input name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param name String name of a {@code DateInterval}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Optional wrapper around the corresponding {@code DateInterval} or an empty optional if no"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * corresponding interval exists."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static Optional\u003cDateInterval\u003e intervalFromName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Optional.ofNullable(nameToDateIntervalMap.get(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the name of the {@code DateInterval}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Getter for the time period this interval represents."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return the time period, as a {@code Period}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Period getPeriod() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Getter for the {@code TemporalAdjuster} to get the previous date from a {@code LocalDate} that represents the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * start of a logical human period, such as the previous Monday, or the first day of a month."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return the appropriate {@code TemporalAdjuster}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public TemporalAdjuster getAdjuster() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return adjuster;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 75
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/date/DateRange.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents a immutable {@code DateRange} from {@code startDate} to {@code endDate}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class DateRange {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String INVALID_DATES_MESSAGE \u003d \"End date should not be before start date.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DateRange(LocalDate startDate, LocalDate endDateExclusive) throws DateTimeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireAllNonNull(startDate, endDateExclusive);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (endDateExclusive.isBefore(startDate)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new DateTimeException(INVALID_DATES_MESSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.endDate \u003d endDateExclusive;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Creates a new date range starting from {@code startDate} to {@code endDate} exclusive."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param startDate The starting date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param endDateExclusive  The ending date, exclusive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @throws DateTimeException if the end date is before the start date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static DateRange from(LocalDate startDate, LocalDate endDateExclusive) throws DateTimeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new DateRange(startDate, endDateExclusive);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Creates a new date range starting from {@code startDate} to {@code endDate} inclusive."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param startDate The starting date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param endDateInclusive  The ending date, inclusive"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @throws DateTimeException if the end date is before the start date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static DateRange fromClosed(LocalDate startDate, LocalDate endDateInclusive) throws DateTimeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new DateRange(startDate, endDateInclusive.plus(Period.ofDays(1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Creates a date range starting at the given start date, and lasts for as long as the given period. Only accepts"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * positive {@code Period} values. Negative {@code Period} values will throw an exception."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param startDate Given start date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param period    Period the date range should last for."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return the newly created date range."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @throws DateTimeException if the period given is negative."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static DateRange overPeriod(LocalDate startDate, Period period) throws DateTimeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (period.isNegative()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new DateTimeException(\"Period cannot be negative.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new DateRange(startDate, startDate.plus(period));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Getter for start date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Start date, as a {@code LocalDate}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Getter for end date exclusive."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return End date, as a {@code LocalDate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Getter for end date inclusive."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return End date, as a {@code LocalDate}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public LocalDate getEndDateInclusive() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return endDate.minus(Period.ofDays(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Checks if the given date lies within this {@code DateRange}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param date Date to be checked."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return true if the date lies within the date range, false otherwise."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean contains(LocalDate date) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return !date.isBefore(startDate) \u0026\u0026 !date.isAfter(getEndDateInclusive());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Creates a list of new ranges by splitting the current {@code DateRange} into smaller ranges based on the given"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * interval. The ranges returned are sequential, and the first range starts at the previous human logical start"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * date for the given interval. For example, if {@code DateInterval.MONTH} is passed in, the first date range will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * start on the first day of the month."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * If the date range cannot be divided evenly into the smaller intervals, the final element of the list will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * contain the {@code endDate} in its date range, ie. it is end inclusive."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param interval Specified interval to divide the date range by."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return List of date ranges that span the same duration as the given intervals, from the start date to end date,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * possible exceeding the end date."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public List\u003cDateRange\u003e partitionByInterval(DateInterval interval) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate closestStart \u003d startDate.with(interval.getAdjuster());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return closestStart.datesUntil(endDate, interval.getPeriod())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(start -\u003e overPeriod(start, interval.getPeriod()))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Objects.hash(startDate, endDate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        } else if (obj instanceof DateRange) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            DateRange other \u003d (DateRange) obj;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return startDate.equals(other.startDate) \u0026\u0026 endDate.equals(other.endDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 144
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/observable/ObservableData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.commons.core.observable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Lightweight observable wrapper around a value T which allows for observers to be registered and notified to any"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * changes in the value T. The observers are not aware of changes in state of the T, and are only notified when"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * {@code ObservableData#SetValue} is called."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * @param \u003cT\u003e Value to be observed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ObservableData\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private T value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Set\u003cObserver\u003c? super T\u003e\u003e observers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Basic getter for the value T."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public T getValue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the value of T to the new value, then notifies all observers about the change. If the set value is the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * same as the current value, observers will not be notified."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param value New value for T."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setValue(T value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (this.value \u003d\u003d value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        notifyObservers();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Registers an {@code Observer} which will be notified of any changes to the value T. The observer\u0027s"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * {@code onChanged} method is called once attached to notify the observer of the current value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param observer Observer to be registered. Must be non null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void observe(Observer\u003c? super T\u003e observer) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(observer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observers.add(observer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observer.onChanged(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Removes the given observer."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void removeObserver(Observer\u003c? super T\u003e observer) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observers.remove(observer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void notifyObservers() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (var observer : observers) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            observer.onChanged(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 65
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/core/observable/Observer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.commons.core.observable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Functional interface representing an observer to an {@code ObservableData} which receives updates to changes in the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * observable data."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * @param \u003cT\u003e Type of data being observed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public interface Observer\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void onChanged(T t);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 11
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns true if and only if {@code items} is non empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static boolean checkNonEmpty(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return items.size() !\u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 34,
      "weiijiie": 8
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/billboard/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ReadOnlyArchiveWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns the Billboard."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @see seedu.billboard.model.Model#getBillboard()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ReadOnlyBillboard getBillboard();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns an observable view of the selected statistic type."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ObservableData\u003cStatisticsFormat\u003e getStatisticsFormat();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the statistics format options wrapped in an observable wrapper."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ObservableData\u003cStatisticsFormatOptions\u003e getStatisticsFormatOptions();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the user prefs\u0027 billboard file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    Path getBillboardFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the archive."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @see seedu.billboard.model.Model#getArchives()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    ReadOnlyArchiveWrapper getArchive();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of archive expenses */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredArchiveExpenseList(String archiveName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 12,
      "waynefong0401": 8,
      "-": 37,
      "weiijiie": 17
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.AddArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.DeleteArchiveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.RevertArchiveCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.BillboardParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ReadOnlyArchiveWrapper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.versionedbillboard.VersionedBillboard;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private final BillboardParser billboardParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        billboardParser \u003d new BillboardParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Command command \u003d billboardParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if ((command instanceof AddArchiveCommand) || (command instanceof AddCommand)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                || (command instanceof AddTagCommand) || (command instanceof ClearCommand)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                || (command instanceof DeleteArchiveCommand) || (command instanceof DeleteCommand)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                || (command instanceof RevertArchiveCommand) || (command instanceof EditCommand)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                || (command instanceof RemoveTagCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            VersionedBillboard.commit(model.getClone());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            VersionedBillboard.addCmd(commandText, commandResult);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            storage.saveBillboard(model.getCombinedBillboard());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ReadOnlyBillboard getBillboard() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return model.getBillboard();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return model.getFilteredExpenses();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ObservableData\u003cStatisticsFormat\u003e getStatisticsFormat() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return model.getStatisticsFormat();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ObservableData\u003cStatisticsFormatOptions\u003e getStatisticsFormatOptions() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return model.getStatisticsFormatOptions();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Path getBillboardFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return model.getBillboardFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ReadOnlyArchiveWrapper getArchive() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return model.getArchives();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredArchiveExpenseList(String archiveName) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return model.getFilteredArchiveExpenses(archiveName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 14,
      "waynefong0401": 35,
      "-": 54,
      "weiijiie": 19
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/AddArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Adds an expense to an existing archive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * If the archive does not exist, create a new archive to store the expense."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class AddArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ArchiveCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \": Adds the expense identified by the index number used in the displayed expense list\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \" to the given archive.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"Given archive name must be prefixed by [\" + PREFIX_ARCHIVE + \"].\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"If the given archive name does not exist, a new archive will be created.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"Example: \" + ArchiveCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 2 \" + PREFIX_ARCHIVE + \"Groceries\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EXISTING_ARCHIVE \u003d \"[%1$s] added to [%2$s] archive\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CREATE_ARCHIVE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            \"[%1$s] archive created: [%2$s] added to [%3$s] archive\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final String archiveName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an AddArchiveCommand to add the expense at the specified {@code targetIndex}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * to the specified {@code archiveName}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public AddArchiveCommand(String archiveName, Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireAllNonNull(archiveName, targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenses();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense expenseToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.deleteExpense(expenseToArchive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseToArchive.archiveTo(archiveName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!model.hasArchive(archiveName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            model.addArchive(new Archive(archiveName, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            model.addArchiveExpense(archiveName, expenseToArchive);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CREATE_ARCHIVE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    archiveName, expenseToArchive.getName(), archiveName),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.addArchiveExpense(archiveName, expenseToArchive);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String.format(MESSAGE_SUCCESS_EXISTING_ARCHIVE, expenseToArchive.getName(), archiveName),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                || (other instanceof AddArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AddArchiveCommand) other).targetIndex)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 archiveName.equals(((AddArchiveCommand) other).archiveName)); // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 87
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Adds an expense to the billboard."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a expense to the billboard. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + PREFIX_NAME + \"Bought \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Buy a book \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + PREFIX_AMOUNT + \"9.00 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + PREFIX_DATE + \"25/3/2019 1200 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the billboard\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final CreatedDateTime date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final List\u003cString\u003e tagNames;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public AddCommand(Name name, Description description, Amount amount,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                      CreatedDateTime date, List\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireAllNonNull(name, description, amount, date, tagNames);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.tagNames \u003d tagNames;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d model.retrieveTags(tagNames);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model.incrementCount(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense expense \u003d new Expense(name, description, amount, date, tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (model.hasExpense(expense)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model.addExpense(expense);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, expense),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 name.equals(((AddCommand) other).name)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 description.equals(((AddCommand) other).description)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 amount.equals(((AddCommand) other).amount)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 date.equals(((AddCommand) other).date)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 tagNames.equals(((AddCommand) other).tagNames));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 38,
      "waynefong0401": 14,
      "-": 34,
      "weiijiie": 8
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/AddTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Adds tag(s) to an existing expense."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class AddTagCommand extends TagCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d TagCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \": Adds tag(s) to the expense identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"by the index number used in the last expense listing. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + PREFIX_TAG + \"[TAG] (1 or more)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"Example: \" + TagCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + PREFIX_TAG + \"SCHOOL\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Added tag(s) to Expense: \\n%1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_ADD_TAG_FAILURE \u003d \"No tag(s) to be added\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private List\u003cString\u003e tagNames;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Creates an AddTagCommand to add tags to the specified {@code Expense}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param index                 of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tagNames              of tags to be added to expense."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public AddTagCommand(Index index, List\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireAllNonNull(index, tagNames);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.tagNames \u003d tagNames;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenses();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e existingTags \u003d expenseToEdit.getTags();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e inputTags \u003d model.retrieveTags(tagNames);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tagsToIncrementCount \u003d getTagsToIncrement(existingTags, inputTags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (tagsToIncrementCount.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new CommandException(MESSAGE_ADD_TAG_FAILURE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e editedTags \u003d getEditedTags(existingTags, tagsToIncrementCount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model.incrementCount(tagsToIncrementCount);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense editedExpense \u003d new Expense(expenseToEdit.getName(), expenseToEdit.getDescription(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                expenseToEdit.getAmount(), expenseToEdit.getCreated(), editedTags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TAG_SUCCESS, editedExpense),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns a set of tags whose count needs to be incremented in the TagCountManager by 1."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * This set contains tags that are input by the user, and do not exist in the existing tag set."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param existingTags      in the expense."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param inputTags         by the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return Set of tags whose count are to be incremented in the TagCountManager by 1."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Set\u003cTag\u003e getTagsToIncrement(Set\u003cTag\u003e existingTags, Set\u003cTag\u003e inputTags) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireAllNonNull(existingTags, inputTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e existingTagsCopy \u003d new HashSet\u003c\u003e(existingTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e toIncrement \u003d new HashSet\u003c\u003e(inputTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        existingTagsCopy.retainAll(toIncrement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        toIncrement.removeAll(existingTagsCopy);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Collections.unmodifiableSet(toIncrement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns set of tags for edited expense by merging existing tag set and set of tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * whose count are to be incremented."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Tags to be added must not contain any tag from the existing tags set."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param existingTags      in the expense."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param toIncrement       tags whose count are to be incremented."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return unmodifiable edited tag set with unique elements."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Set\u003cTag\u003e getEditedTags(Set\u003cTag\u003e existingTags, Set\u003cTag\u003e toIncrement) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireAllNonNull(existingTags, toIncrement);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e editedTags \u003d new HashSet\u003c\u003e(existingTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        editedTags.addAll(toIncrement);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Collections.unmodifiableSet(editedTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                || (other instanceof AddTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 tagNames.equals(((AddTagCommand) other).tagNames))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 index.equals(((AddTagCommand) other).index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 122
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/ArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " *  Represents an Archive command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public abstract class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 14
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Clears the billboard."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Billboard has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        model.setBillboard(new Billboard());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 6,
      "-": 16,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DEFAULT_LIST_VIEW \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String UNCHANGED_LIST_VIEW \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /** The displayed list needs to be changed */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final String listToBeDisplayed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String listToBeDisplayed) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.listToBeDisplayed \u003d listToBeDisplayed;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this(feedbackToUser, false, false, UNCHANGED_LIST_VIEW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Optional\u003cString\u003e getListToBeDisplayed() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Optional.ofNullable(listToBeDisplayed);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 7,
      "waynefong0401": 1,
      "-": 68,
      "weiijiie": 7
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/DeleteArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Deletes an archive expense identified using it\u0027s displayed index from"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * the given archive name and archive list of expenses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ArchiveCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \": Deletes the archive expense identified by the index number used in \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"the archive displayed expense list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer), ARCHIVE NAME (must be an existing archive\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \" and prefixed with [\" + PREFIX_ARCHIVE + \"])\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"Example: \" + ArchiveCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1 \" + PREFIX_ARCHIVE + \"hobbies\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted [%1$s] expense in [%2$s] archive\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_EMPTY_ARCHIVE_AFTER_DELETE_EXPENSE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            \"[%1$s] archive is now empty and will be deleted\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final String archiveName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DeleteArchiveCommand(String archiveName, Index index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireAllNonNull(archiveName, index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!model.hasArchive(archiveName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NONEXISTENT_ARCHIVE_ENTERED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e archiveList \u003d model.getFilteredArchiveExpenses(archiveName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d archiveList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense expenseToDelete \u003d archiveList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.deleteArchiveExpense(archiveName, expenseToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String feedback \u003d String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete.getName(), archiveName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            model.deleteArchive(archiveName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            feedback +\u003d \"\\n\" + String.format(MESSAGE_EMPTY_ARCHIVE_AFTER_DELETE_EXPENSE, archiveName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new CommandResult(feedback, false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new CommandResult(feedback, false, false, archiveName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                || (other instanceof DeleteArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteArchiveCommand) other).index)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 archiveName.equals(((DeleteArchiveCommand) other).archiveName)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 81
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Deletes a expense identified using it\u0027s displayed index from the billboard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenses();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model.decreaseCount(expenseToDelete.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 2,
      "waynefong0401": 9,
      "-": 39,
      "weiijiie": 6
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/DisplayStatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Changes the displayed statistic of the billboard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class DisplayStatsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"display-stats\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + \": Changes the type of statistic being displayed, with the specified options.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + \"Parameters: FORMAT [interval/DATE-INTERVAL]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + \"Supported formats:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + Arrays.stream(StatisticsFormat.values())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .map(format -\u003e format.getName()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    + \": (optional prefixes: \" + getPrefixesString(format.getOptionsPrefixes()) + \")\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .collect(Collectors.joining(\"\\n\", \"\", \"\\n\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" timeline interval/month\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_DISPLAYED_STATS_CHANGED_SUCCESS \u003d \"Displayed statistics changed to %s!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final StatisticsFormat newFormat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final StatisticsFormatOptions newOptions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param newFormat  New statistics format to be displayed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param newOptions New options to be applied to the statistics display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public DisplayStatsCommand(StatisticsFormat newFormat, StatisticsFormatOptions newOptions) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.newFormat \u003d newFormat;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.newOptions \u003d newOptions;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static String getPrefixesString(Prefix[] prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(Prefix::getPrefix)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.joining(\" | \", \"[\", \"]\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.setStatisticsFormat(newFormat);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.setStatisticsFormatOptions(newOptions);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DISPLAYED_STATS_CHANGED_SUCCESS, newFormat.getName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        } else if (obj instanceof DisplayStatsCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            DisplayStatsCommand other \u003d (DisplayStatsCommand) obj;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return other.newFormat \u003d\u003d this.newFormat"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    \u0026\u0026 other.newOptions.equals(this.newOptions);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 70
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Edits the details of an existing expense in the billboard."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + PREFIX_DESCRIPTION + \"buy tea \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            + PREFIX_AMOUNT + \"1.23\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the billboard.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @param index                 of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public EditCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenses();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense editedExpense;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (editExpenseDescriptor.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            model.decreaseCount(expenseToEdit.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d model.retrieveTags(editExpenseDescriptor.getTags().get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor, tagSet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            model.incrementCount(tagSet);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!expenseToEdit.equals(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.updateFilteredExpenses(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * This method is used when user does not edit the tags."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Name updatedName \u003d editExpenseDescriptor.getName().orElse(expenseToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CreatedDateTime updatedCreated \u003d editExpenseDescriptor.getCreated().orElse(expenseToEdit.getCreated());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d expenseToEdit.getTags();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new Expense(updatedName, updatedDescription, updatedAmount, updatedCreated, updatedTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * This method is used when user edits the tags."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                                               Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Name updatedName \u003d editExpenseDescriptor.getName().orElse(expenseToEdit.getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        CreatedDateTime updatedCreated \u003d editExpenseDescriptor.getCreated().orElse(expenseToEdit.getCreated());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new Expense(updatedName, updatedDescription, updatedAmount, updatedCreated, tags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        private CreatedDateTime created;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        private List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public EditExpenseDescriptor() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            setCreated(toCopy.created);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, amount, created, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void setCreated(CreatedDateTime created) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            this.created \u003d created;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public Optional\u003cCreatedDateTime\u003e getCreated() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return Optional.ofNullable(created);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public void setTags(List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new ArrayList\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "         * Returns an unmodifiable tag names list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public Optional\u003cList\u003cString\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableList(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 38,
      "waynefong0401": 62,
      "-": 103,
      "weiijiie": 49
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Billboard as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                false, true, CommandResult.UNCHANGED_LIST_VIEW);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 15,
      "weiijiie": 2
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/FilterTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.ContainsTagPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Filters and lists all expenses with tags input by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class FilterTagCommand extends TagCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d TagCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \": Filters all expenses with the specified tags and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"Parameters: \" + PREFIX_TAG + \"[TAG] (1 or more)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"Example: \" + TagCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"drinks\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final ContainsTagPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public FilterTagCommand(ContainsTagPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenses().size()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                || (other instanceof FilterTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterTagCommand) other).predicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 43
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.model.expense.MultiArgPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Finds and lists all persons in billboard whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose attributes matches \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + \"the input parameters.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + PREFIX_DESCRIPTION + \"book \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + PREFIX_AMOUNT + \"9 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            + PREFIX_START_DATE + \"25/4/2019 1200\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private final MultiArgPredicate predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public FindCommand(MultiArgPredicate predicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenses().size()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 21,
      "waynefong0401": 4,
      "-": 26,
      "weiijiie": 3
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                true, false, CommandResult.UNCHANGED_LIST_VIEW);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 18,
      "weiijiie": 2
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.history.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Displays all history command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_EMPTY_HISTORY \u003d \"There is no command history.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!CommandHistory.hasCommand()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_HISTORY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(CommandHistory.getCmdHistory());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 29
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/ListArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Displays the list of expenses in an archive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ArchiveCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \": Lists the archive identified by the archive name used in the displayed list of archives.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"Parameters: ARCHIVE NAME\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"Example: \" + ArchiveCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 2016 expenses\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public final String messageSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final String archiveName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ListArchiveCommand(String archiveName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(archiveName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.messageSuccess \u003d \"Listed all expenses from the [\" + archiveName + \"] archive\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveName.equals(\"\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ARCHIVE_NAME + \"\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!model.hasArchive(archiveName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NONEXISTENT_ARCHIVE_ENTERED + \"\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.updateFilteredArchiveExpenses(archiveName, Model.PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new CommandResult(messageSuccess, false, false, archiveName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                || (other instanceof ListArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 archiveName.equals(((ListArchiveCommand) other).archiveName));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 54
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/ListArchiveNamesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Lists all existing archive names to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListArchiveNamesCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listall\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_NO_ARCHIVES \u003d \"There are no existing archives\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_EXISTING_ARCHIVES \u003d \"Here are the existing archive(s):\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cString\u003e archiveNames \u003d model.getArchiveNames();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveNames.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            feedback \u003d MESSAGE_NO_ARCHIVES;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            feedback \u003d MESSAGE_EXISTING_ARCHIVES;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            for (int i \u003d 0; i \u003c archiveNames.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                feedback +\u003d \"[\" + archiveNames.get(i) + \"]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (i !\u003d archiveNames.size() - 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    feedback +\u003d \",\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                || (other instanceof ListArchiveNamesCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 45
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Lists all expenses in the billboard to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.updateFilteredExpenses(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 17,
      "weiijiie": 4
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/ListTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Displays the list of unique tag names."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class ListTagCommand extends TagCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d model.getTagNames();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (tagNames.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            sb.append(\"There is no existing tag\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            sb.append(\"Here are the existing tags(s):\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            for (int i \u003d 0; i \u003c tagNames.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                sb.append(\"[\").append(tagNames.get(i)).append(\"]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                if (i !\u003d tagNames.size() - 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                    sb.append(\",\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                || (other instanceof ListTagCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 42
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.versionedbillboard.VersionedBillboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Undo the previous edit action."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String EMPTY_UNDO_LIST \u003d \"There is no command to be redone.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_REDO_SUCCESS \u003d COMMAND_WORD + \": %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!VersionedBillboard.isRedoable()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new CommandException(EMPTY_UNDO_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String redoCmd \u003d VersionedBillboard.getRedoCmd();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CommandResult redoCmdResult \u003d VersionedBillboard.getRedoCmdResult();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model undoModel \u003d VersionedBillboard.getRedoModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.setModel(undoModel.getClone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REDO_SUCCESS, redoCmd),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                false, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                redoCmdResult.getListToBeDisplayed().orElse(CommandResult.UNCHANGED_LIST_VIEW));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 32,
      "weiijiie": 6
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/RemoveTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Removes tag(s) from existing expense."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class RemoveTagCommand extends TagCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d TagCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \": Removes tag(s) from the expense identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"by the index number used in the last expense listing. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + PREFIX_TAG + \"[TAG] (1 or more)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"Example: \" + TagCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + PREFIX_TAG + \"SCHOOL\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_RM_TAG_SUCCESS \u003d \"Removed tag(s) from Expense: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_RM_TAG_FAILURE \u003d \"No tag(s) to be removed\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private List\u003cString\u003e tagNames;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Creates a RemoveTagCommand to remove tags from the specified {@code Expense}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param index             of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tagNames          tags to be removed from expense."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public RemoveTagCommand(Index index, List\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireAllNonNull(index, tagNames);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.tagNames \u003d tagNames;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenses();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e currentTags \u003d expenseToEdit.getTags();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tagsToRemove \u003d getExisting(currentTags, tagNames);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (tagsToRemove.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new CommandException(MESSAGE_RM_TAG_FAILURE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e editedTags \u003d getEditedTags(currentTags, tagsToRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model.decreaseCount(tagsToRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense editedExpense \u003d new Expense(expenseToEdit.getName(), expenseToEdit.getDescription(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                expenseToEdit.getAmount(), expenseToEdit.getCreated(), editedTags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RM_TAG_SUCCESS, editedExpense),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Checks and returns a set consisting of tags whose names exist in the existing tags set."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param existingTags  in the expense"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param inputNames    of tags input by user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return unmodifiable set consisting of tags whose names exist in existing set of tags."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Set\u003cTag\u003e getExisting(Set\u003cTag\u003e existingTags, List\u003cString\u003e inputNames) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireAllNonNull(existingTags, inputNames);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e toReturn \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (Tag tag : existingTags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            if (inputNames.contains(tag.tagName)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                toReturn.add(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Collections.unmodifiableSet(toReturn);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Removes tags from existing set of tags in expense."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Tags in set to be removed must exist in existing tags set."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param existingTags      in expense."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param toRemove          tag set to be removed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return unmodifiable set consisting of remaining elements."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Set\u003cTag\u003e getEditedTags(Set\u003cTag\u003e existingTags, Set\u003cTag\u003e toRemove) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireAllNonNull(existingTags, toRemove);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e toReturn \u003d new HashSet\u003c\u003e(existingTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        toReturn.removeAll(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Collections.unmodifiableSet(toReturn);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                || (other instanceof RemoveTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 tagNames.equals(((RemoveTagCommand) other).tagNames))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 index.equals(((RemoveTagCommand) other).index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 118
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/RevertArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Unarchives an expense in an archive:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Removes an expense to an existing archive and adds it back to the current list of expenses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class RevertArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"revert\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \": Unarchives the expense identified by the index number used in the displayed archive expense list\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"Given archive name must be prefixed by [\" + PREFIX_ARCHIVE + \"].\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"Example: \" + ArchiveCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 2 \" + PREFIX_ARCHIVE + \"Groceries\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            \"Removed [%1$s] from [%2$s] archive and added back to current expense list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_EMPTY_ARCHIVE_AFTER_REVERT_EXPENSE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            \"[%1$s] archive is now empty and will be deleted\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final String archiveName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an RevertArchiveCommand to unarchive the expense at the specified {@code targetIndex}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * in the specified {@code archiveName}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public RevertArchiveCommand(String archiveName, Index index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireAllNonNull(archiveName, index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!model.hasArchive(archiveName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NONEXISTENT_ARCHIVE_ENTERED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e archiveList \u003d model.getFilteredArchiveExpenses(archiveName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d archiveList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense expenseToUnarchive \u003d archiveList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.deleteArchiveExpense(archiveName, expenseToUnarchive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.addExpense(expenseToUnarchive);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseToUnarchive.archiveTo(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String feedback \u003d String.format(MESSAGE_SUCCESS, expenseToUnarchive.getName(), archiveName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            model.deleteArchive(archiveName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            feedback +\u003d \"\\n\" + String.format(MESSAGE_EMPTY_ARCHIVE_AFTER_REVERT_EXPENSE, archiveName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new CommandResult(feedback, false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new CommandResult(feedback, false, false, archiveName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                || (other instanceof RevertArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 index.equals(((RevertArchiveCommand) other).index)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 archiveName.equals(((RevertArchiveCommand) other).archiveName)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 86
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/TagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " *  Represents a Tag command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public abstract class TagCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 14
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.versionedbillboard.VersionedBillboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Undo the previous edit action."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String EMPTY_UNDO_LIST \u003d \"There is no command to be undone.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d COMMAND_WORD + \": %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!VersionedBillboard.isUndoable()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new CommandException(EMPTY_UNDO_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model undoModel \u003d VersionedBillboard.getUndoModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String undoCmd \u003d VersionedBillboard.getUndoCmd();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CommandResult undoCmdResult \u003d VersionedBillboard.getUndoCmdResult();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.setModel(undoModel.getClone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDO_SUCCESS, undoCmd),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                false, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                undoCmdResult.getListToBeDisplayed().orElse(CommandResult.UNCHANGED_LIST_VIEW));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 32,
      "weiijiie": 6
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/AddArchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.AddArchiveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Parses input arguments and creates a new AddArchiveCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class AddArchiveCommandParser implements Parser\u003cAddArchiveCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddArchiveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and returns a AddArchiveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public AddArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ARCHIVE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String archiveName \u003d ParserUtil.parseArchive(argMultimap.getValue(PREFIX_ARCHIVE).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Index targetIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new AddArchiveCommand(archiveName, targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (ParseException | NoSuchElementException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 36
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CreatedDateTime createdDateTime \u003d argMultimap.getValue(PREFIX_DATE).isPresent()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                ? ParserUtil.parseCreatedDateTime(argMultimap.getValue(PREFIX_DATE).get())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                : new CreatedDateTime(LocalDateTime.now());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagList \u003d ParserUtil.parseTagNames(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new AddCommand(name, description, amount, createdDateTime, tagList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 10,
      "waynefong0401": 7,
      "-": 34,
      "weiijiie": 10
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/AddTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Parses input argument and creates AddTagCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tagNames \u003d ParserUtil.parseTagNames(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new AddTagCommand(index, tagNames);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 51
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/ArchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.AddArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.DeleteArchiveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ListArchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ListArchiveNamesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.RevertArchiveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Parses user input regarding Archive commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_COMMANDS \u003d \"Invalid archive command format! \\nCommand format: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"archive (archive command) (parameters if needed)\\nSupported archive commands:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"add \\ndelete \\nrevert \\nlist\\nlistall \\nFor more information:\\n\" + HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ArchiveCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new ParseException(MESSAGE_ARCHIVE_COMMANDS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case ListArchiveNamesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ListArchiveNamesCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case ListArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ListArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case AddArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new AddArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case RevertArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new RevertArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case DeleteArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new DeleteArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new ParseException(MESSAGE_ARCHIVE_COMMANDS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 67
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        prefixPositions.sort(Comparator.comparingInt(PrefixPosition::getStartPosition));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 146,
      "weiijiie": 2
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/BillboardParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.logic.commands.DisplayStatsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class BillboardParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case DisplayStatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return new DisplayStatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 13,
      "waifonglee": 4,
      "waynefong0401": 17,
      "-": 62,
      "weiijiie": 4
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT_LIMIT \u003d new Prefix(\"al/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final Prefix PREFIX_ARCHIVE \u003d new Prefix(\"arc/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Prefix PREFIX_INTERVAL \u003d new Prefix(\"interval/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Prefix PREFIX_GROUPING \u003d new Prefix(\"groupby/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 1,
      "xinmingzh": 3,
      "waifonglee": 1,
      "waynefong0401": 2,
      "-": 10,
      "weiijiie": 3
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/DeleteArchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.DeleteArchiveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteArchiveCommandParser implements Parser\u003cDeleteArchiveCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteArchiveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and returns a DeleteArchiveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DeleteArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ARCHIVE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String archiveName \u003d ParserUtil.parseArchive(argMultimap.getValue(PREFIX_ARCHIVE).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Index targetIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new DeleteArchiveCommand(archiveName, targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (ParseException | NoSuchElementException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 37
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/DisplayStatsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_GROUPING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_INTERVAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.logic.commands.DisplayStatsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseGrouping;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Parses input arguments and creates a new DisplayStatsCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class DisplayStatsCommandParser implements Parser\u003cDisplayStatsCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Parses the user input of arguments in the context of the DisplayStatsCommand and returns a DisplayStatsCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * object for execution. Valid parameters depend on the type of statistics chosen to be displayed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param userInput User input string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return DisplayStatsCommand object representing the chosen statistics together with specific options."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @throws ParseException if the statistic chosen does not exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public DisplayStatsCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String formatString \u003d userInput.trim().split(\"\\\\s\")[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StatisticsFormat formatChosen \u003d StatisticsFormat.formatFromName(formatString)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayStatsCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, formatChosen.getOptionsPrefixes());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateInterval newInterval \u003d argMultimap.getValue(PREFIX_INTERVAL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .flatMap(DateInterval::intervalFromName)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseGrouping expenseGrouping \u003d argMultimap.getValue(PREFIX_GROUPING)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .flatMap(ExpenseGrouping::groupingFromName)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StatisticsFormatOptions newOptions \u003d StatisticsFormatOptions.withOptions(newInterval, expenseGrouping);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new DisplayStatsCommand(formatChosen, newOptions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 47
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            editExpenseDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            editExpenseDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            editExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            editExpenseDescriptor.setCreated("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    ParserUtil.parseCreatedDateTime(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExpenseDescriptor::setTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return new EditCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptyList() : tags;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Optional.of(ParserUtil.parseTagNames(tagSet));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 10,
      "waynefong0401": 13,
      "-": 51,
      "weiijiie": 15
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/FilterTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.FilterTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.ContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Parses input arguments and creates a new FilterTagCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class FilterTagCommandParser implements Parser\u003cFilterTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterTagCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * and returns a FilterTagCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public FilterTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new FilterTagCommand(new ContainsTagPredicate(tags));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 42
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT_LIMIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.model.expense.MultiArgPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_AMOUNT, PREFIX_AMOUNT_LIMIT, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (isAllFieldsEmpty(argMultimap) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            predicate.setKeywords(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount lowerAmtLimit \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount upperAmtLimit \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            lowerAmtLimit \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT_LIMIT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            upperAmtLimit \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT_LIMIT).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent() || argMultimap.getValue(PREFIX_AMOUNT_LIMIT).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            predicate.setAmtRange(lowerAmtLimit, upperAmtLimit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime startDate \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime endDate \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            startDate \u003d ParserUtil.parseCreatedDateTime(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            endDate \u003d ParserUtil.parseCreatedDateTime(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent() || argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            predicate.setDateRange(startDate, endDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Returns true if all of the prefixes contain empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * {@code ArgumentMultiMap}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private boolean isAllFieldsEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return !argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_AMOUNT).isPresent()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_START_DATE).isPresent()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_END_DATE).isPresent();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 60,
      "waynefong0401": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/ListArchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ListArchiveCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Parses input arguments and creates a new ListArchiveCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListArchiveCommandParser implements Parser\u003cListArchiveCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListArchiveCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and returns a ListArchiveCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ListArchiveCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String archiveName \u003d args.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new ListArchiveCommand(archiveName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 21
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Parses {@code String tagName} into a valid tag name."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @throws ParseException if the given tag name is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static String parseTagName(String tagName) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String trimmedTag \u003d tagName.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return trimmedTag;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tagNames} into a valid {@code List\u003cString\u003e}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static List\u003cString\u003e parseTagNames(Collection\u003cString\u003e tagNames) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tagNames);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e parsed \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (String tagName : tagNames) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            parsed.add(parseTagName(tagName));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return parsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Parses a {@code String dateTime} into an {@code CreatedDateTime}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static CreatedDateTime parseCreatedDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!CreatedDateTime.isValidDate(trimmedDateTime)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new ParseException(CreatedDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new CreatedDateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses a {@code String archive} into an {@code String trimmedArchive}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws ParseException if the given {@code archive} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static String parseArchive(String archive) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(archive);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String trimmedArchive \u003d archive.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (trimmedArchive.equals(\"\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_ARCHIVE_NAME);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return trimmedArchive;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 15,
      "waifonglee": 33,
      "waynefong0401": 35,
      "-": 70,
      "weiijiie": 17
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/RemoveTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Parses input argument and creates RemoveTagCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveTagCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * and returns an RemoveTagCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public RemoveTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                    RemoveTagCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tagNames \u003d ParserUtil.parseTagNames(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new RemoveTagCommand(index, tagNames);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 52
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/RevertArchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.RevertArchiveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class RevertArchiveCommandParser implements Parser\u003cRevertArchiveCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RevertArchiveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and returns a RevertArchiveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public RevertArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ARCHIVE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String archiveName \u003d ParserUtil.parseArchive(argMultimap.getValue(PREFIX_ARCHIVE).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Index targetIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new RevertArchiveCommand(archiveName, targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (ParseException | NoSuchElementException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RevertArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 37
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/TagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.FilterTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.ListTagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String MESSAGE_TAG_COMMANDS \u003d \"Invalid command format! \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"Command format: tag (tag command) (parameters)\" + \"\\nSupported tag commands:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            + \"add \\nrm \\nlist \\nfilter\\nFor more information:\\n\" + HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public TagCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new ParseException(MESSAGE_TAG_COMMANDS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        case FilterTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return new FilterTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        case RemoveTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return new RemoveTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        case ListTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return new ListTagCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new ParseException(MESSAGE_TAG_COMMANDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 57
    }
  },
  {
    "path": "src/main/java/seedu/billboard/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/ArchiveWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Wraps all data at the archive level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ArchiveWrapper implements ReadOnlyArchiveWrapper {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final HashMap\u003cString, Archive\u003e archiveList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ArchiveWrapper(List\u003cExpense\u003e unfilteredExpenses) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(unfilteredExpenses);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        HashMap\u003cString, List\u003cExpense\u003e\u003e filterArchives \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (Expense archivedExpense : unfilteredExpenses) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String archiveName \u003d archivedExpense.getArchiveName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (!filterArchives.containsKey(archiveName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                filterArchives.put(archiveName, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            filterArchives.get(archiveName).add(archivedExpense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Set\u003cString\u003e archiveNames \u003d filterArchives.keySet();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (String archiveName : archiveNames) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Archive archive \u003d new Archive(archiveName, filterArchives.get(archiveName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            archiveList.put(archiveName, archive);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ArchiveWrapper(HashMap\u003cString, Archive\u003e archiveList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveList.putAll(archiveList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HashMap Overwrite operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Replaces the contents of the archives with {@code newArchives}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void setArchiveList(List\u003cArchive\u003e newArchiveList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveList.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (Archive archive : newArchiveList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            archiveList.put(archive.getArchiveName(), archive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Resets the existing data of this {@code Billboard} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void resetData(ReadOnlyArchiveWrapper newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        setArchiveList(newData.getArchiveList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Archive-Level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Set\u003cString\u003e getArchiveNames() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archiveList.keySet();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Checks if the archiveWrapper has an archive with the given archiveName."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean hasArchive(String archiveName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(archiveName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Set\u003cString\u003e archiveNames \u003d getArchiveNames();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archiveNames.contains(archiveName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchive(Archive newArchive) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveList.put(newArchive.getArchiveName(), newArchive);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void removeArchive(String targetArchiveName) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(targetArchiveName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveList.remove(targetArchiveName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense-Level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns true if an expense with the same identity as {@code expense} exists in the given archive."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given {@code archiveName} must exist."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean hasArchiveExpense(String archiveName, Expense expense) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Archive archive \u003d archiveList.get(archiveName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archive.contains(expense);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Adds an expense to the given archive."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchiveExpense(String archiveName, Expense p) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveList.get(archiveName).add(p);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Removes {@code key} from the given archive."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given {@code archiveName} must exist."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void removeArchiveExpense(String archiveName, Expense key) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireAllNonNull(archiveName, key);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveList.get(archiveName).remove(key);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ObservableList\u003cExpense\u003e getArchiveExpenses(String archiveName) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Archive archive \u003d archiveList.get(archiveName);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archive.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public List\u003cArchive\u003e getArchiveList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cArchive\u003e archives \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Set\u003cString\u003e archiveNames \u003d getArchiveNames();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (String archiveName : archiveNames) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            archives.add(archiveList.get(archiveName));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archives;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public List\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cArchive\u003e archives \u003d getArchiveList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (Archive archive : archives) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            List\u003cExpense\u003e toBeCopied \u003d archive.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            expenses.addAll(toBeCopied);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public ArchiveWrapper getClone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return new ArchiveWrapper((HashMap\u003cString, Archive\u003e) archiveList.clone());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    //@@author davidcwh"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void setArchives(ReadOnlyArchiveWrapper archives) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        setArchiveList(archives.getArchiveList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return getArchiveNames().toString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                || (other instanceof ArchiveWrapper // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 archiveList.equals(((ArchiveWrapper) other).archiveList));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archiveList.hashCode();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 184,
      "waynefong0401": 5,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/Billboard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.ExpenseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.TagCountManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Wraps all data at the Billboard level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Duplicates are allowed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class Billboard implements ReadOnlyBillboard {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ExpenseList expenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final TagCountManager count;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count \u003d new TagCountManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Billboard() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Creates an Billboard using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Billboard(ReadOnlyBillboard toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Billboard(ExpenseList expenses, UniqueTagList tags, TagCountManager count) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        setExpenses(expenses.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        setUniqueTagList(tags.getTagList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        setCountManager(count.getCountMap());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Replaces the contents of the expense list with {@code expense}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * {@code expense} must not contain duplicate expense."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expense) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.expenses.setExpenses(expense);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setUniqueTagList(Map\u003cString, Tag\u003e tagList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.tags.setTagList(tagList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setCountManager(Map\u003cTag, Integer\u003e count) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.count.setCountMap(count);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Resets the existing data of this {@code Billboard} with {@code newData}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void resetData(ReadOnlyBillboard newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        setExpenses(newData.getExpenses());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        setUniqueTagList(newData.getUniqueTagList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        setCountManager(newData.getCountManager());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public List\u003cExpense\u003e filterArchiveExpenses() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return expenses.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .stream().filter(Expense::isArchived).collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ReadOnlyBillboard removeArchiveExpenses() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e nonArchiveExpenses \u003d expenses.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .stream().filter(x -\u003e !x.isArchived()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard billboard \u003d new Billboard();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        billboard.setExpenses(nonArchiveExpenses);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        billboard.setCountManager(count.getCountMap());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        billboard.setUniqueTagList(tags.getTagList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return billboard;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Billboard getClone() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return new Billboard(expenses.getClone(), tags.getClone(), count.getClone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void setBillboard(Billboard billboard) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        setExpenses(billboard.getExpenses());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        setUniqueTagList(billboard.getTags().getTagList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        setCountManager(billboard.getCountManager());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public UniqueTagList getTags() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the billboard."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Adds an expense to the billboard."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * The expense must not already exist in the billboard."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void addExpense(Expense p) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenses.add(p);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * {@code target} must exist in the billboard."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * existing expense in the billboard."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Removes {@code key} from this {@code Billboard}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * {@code key} must exist in the billboard."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    //// Tag methods"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Retrieves tags to be added to an expense."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public Set\u003cTag\u003e retrieveTags(List\u003cString\u003e toRetrieve) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return tags.retrieveTags(toRetrieve);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Increments count of tags which will be added to an expense."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementCount(Set\u003cTag\u003e toIncrement) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.incrementAllCount(toIncrement);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Decreases count of tags removed from an expense."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Also removes tags whose count is 0 from the unique tag list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void decreaseCount(Set\u003cTag\u003e toDecrease) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.decreaseAllCount(toDecrease);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cTag\u003e toRemove \u003d count.removeZeroCount();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.removeAll(toRemove);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Gets a list of unique tag names."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public List\u003cString\u003e getTagNames() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return tags.getTagNames();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                || (other instanceof Billboard // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                \u0026\u0026 expenses.equals(((Billboard) other).expenses));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public Map\u003cString, Tag\u003e getUniqueTagList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return tags.getTagList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public Map\u003cTag, Integer\u003e getCountManager() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return count.getCountMap();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 18,
      "waifonglee": 69,
      "waynefong0401": 114,
      "weiijiie": 21
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Billboard getCombinedBillboard();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Billboard methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns the user prefs\u0027 billboard file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    Path getBillboardFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Sets the user prefs\u0027 billboard file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void setBillboardFilePath(Path billboardFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Replaces billboard data with the data in {@code billboard}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void setBillboard(ReadOnlyBillboard billboard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /** Returns the Billboard */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    ReadOnlyBillboard getBillboard();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the billboard."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * The expense must exist in the billboard."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * {@code expense} must not already exist in the billboard."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * {@code target} must exist in the billboard."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * The expense {@code editedExpense} must not be the same as another existing expense in the billboard."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Retrieves tags from unique tag list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param toRetrieve tags to be retrieved."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return set of tags retrieved."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Set\u003cTag\u003e retrieveTags(List\u003cString\u003e toRetrieve);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Decreases count of tags removed from an expense."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Also removes tags whose count is 0."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param toDecrease tags to decrease count from."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    void decreaseCount(Set\u003cTag\u003e toDecrease);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Increments counts of tags."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param toIncrement tags whose count are to be incremented."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    void incrementCount(Set\u003cTag\u003e toIncrement);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns a list of unique tag names."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return list of unique tag names."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    List\u003cString\u003e getTagNames();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenses();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the statistics type wrapped in an observable wrapper."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ObservableData\u003cStatisticsFormat\u003e getStatisticsFormat();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the observable wrapper to the new statistics format."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void setStatisticsFormat(StatisticsFormat format);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the statistics format options wrapped in an observable wrapper."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ObservableData\u003cStatisticsFormatOptions\u003e getStatisticsFormatOptions();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the observable wrapper to the new statistics format options."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void setStatisticsFormatOptions(StatisticsFormatOptions options);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Archive methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns a list of all existing archive names."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    List\u003cString\u003e getArchiveNames();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Replaces archive data with the data in {@code billboard}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void setArchives(ReadOnlyArchiveWrapper archives);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /** Returns the archive */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    ReadOnlyArchiveWrapper getArchives();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns true if an expense with the same identity as {@code expense} exists in the given archive."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    boolean hasArchiveExpense(String archiveName, Expense expense);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns true if an archive with the same name as {@code archiveName} exists in the archives."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    boolean hasArchive(String archive);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Deletes the given archive."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given {@code archiveName} must exist."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void deleteArchive(String archiveName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Deletes the given expense in the given archive."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given {@code archiveName} must exist."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void deleteArchiveExpense(String archiveName, Expense target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Adds the given expense into the given archive."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given {@code archiveName} must exist."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void addArchiveExpense(String archiveName, Expense expense);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Adds the given expense into the given archive."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given {@code archiveName} must exist."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void addArchive(Archive archive);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered archive expense list */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredArchiveExpenses(String archiveName);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Updates the filter of the filtered archive expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void updateFilteredArchiveExpenses(String archiveName, Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Get a deep copy object of itself."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return Model a deep copy of itself."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    Model getClone();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Set the model to new model."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @param  model a model."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void setModel(Model model);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Getter of filteredArchives."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return HashMap the filteredArchives."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    HashMap\u003cString, FilteredList\u003cExpense\u003e\u003e getFilteredArchives();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 62,
      "waifonglee": 29,
      "waynefong0401": 35,
      "-": 59,
      "weiijiie": 39
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseGrouping;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the in-memory model of the Billboard and Archive data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private final Billboard billboard;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final ArchiveWrapper archives;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpense;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final HashMap\u003cString, FilteredList\u003cExpense\u003e\u003e filteredArchives;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ObservableData\u003cStatisticsFormat\u003e statsFormat;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ObservableData\u003cStatisticsFormatOptions\u003e statsOptions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Initializes a ModelManager with the given billboard and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ModelManager(ReadOnlyBillboard initialBillboard, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireAllNonNull(initialBillboard, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e archiveExpenses \u003d initialBillboard.filterArchiveExpenses();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ReadOnlyBillboard noArchiveExpensesBillboard \u003d initialBillboard.removeArchiveExpenses();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archives \u003d new ArchiveWrapper(archiveExpenses);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.billboard \u003d new Billboard(noArchiveExpensesBillboard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.statsFormat \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.statsFormat.setValue(StatisticsFormat.TIMELINE); // default stats type"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.statsOptions \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.statsOptions.setValue(StatisticsFormatOptions.withOptions(DateInterval.MONTH,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        ExpenseGrouping.NONE)); // default values"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        logger.fine(\"Initializing with billboard: \" + billboard"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \" and archives: \" + archives"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \"and user prefs: \" + userPrefs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \"and chart type: \" + statsFormat.getValue());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        filteredExpense \u003d new FilteredList\u003c\u003e(this.billboard.getExpenses());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        filteredArchives \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Set\u003cString\u003e archiveNames \u003d this.archives.getArchiveNames();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (String archiveName : archiveNames) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            filteredArchives.put(archiveName,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    new FilteredList\u003c\u003e(this.archives.getArchiveExpenses(archiveName)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this(new Billboard(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Billboard getCombinedBillboard() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e combinedExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e nonArchiveExpenses \u003d billboard.getExpenses();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e archiveExpense \u003d archives.getExpenseList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        combinedExpenses.addAll(nonArchiveExpenses);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        combinedExpenses.addAll(archiveExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Billboard billboard \u003d this.billboard.getClone();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        billboard.setExpenses(combinedExpenses);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return billboard;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Path getBillboardFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return userPrefs.getBillboardFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setBillboardFilePath(Path billboardFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(billboardFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userPrefs.setBillboardFilePath(billboardFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Billboard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void setBillboard(ReadOnlyBillboard billboard) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.billboard.resetData(billboard);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public ReadOnlyBillboard getBillboard() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return billboard;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return billboard.hasExpense(expense);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        billboard.removeExpense(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        billboard.addExpense(expense);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        updateFilteredExpenses(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        billboard.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Archive \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public List\u003cString\u003e getArchiveNames() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new ArrayList\u003c\u003e(archives.getArchiveNames());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setArchives(ReadOnlyArchiveWrapper archives) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archives.resetData(archives);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ReadOnlyArchiveWrapper getArchives() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archives;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean hasArchiveExpense(String archiveName, Expense expense) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireAllNonNull(archiveName, expense);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archives.hasArchiveExpense(archiveName, expense);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean hasArchive(String archiveName) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archives.hasArchive(archiveName);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchive(String archiveName) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archives.removeArchive(archiveName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        filteredArchives.remove(archiveName);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchiveExpense(String archiveName, Expense target) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archives.removeArchiveExpense(archiveName, target);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchiveExpense(String archiveName, Expense expense) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archives.addArchiveExpense(archiveName, expense);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        updateFilteredArchiveExpenses(archiveName, PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchive(Archive archive) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archives.addArchive(archive);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String archiveName \u003d archive.getArchiveName();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        filteredArchives.put(archiveName,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                new FilteredList\u003c\u003e(this.archives.getArchiveExpenses(archiveName)));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTag methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public Set\u003cTag\u003e retrieveTags(List\u003cString\u003e toRetrieve) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(toRetrieve);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return billboard.retrieveTags(toRetrieve);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementCount(Set\u003cTag\u003e toIncrement) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(toIncrement);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        billboard.incrementCount(toIncrement);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void decreaseCount(Set\u003cTag\u003e toDecrease) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(toDecrease);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        billboard.decreaseCount(toDecrease);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public List\u003cString\u003e getTagNames() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return billboard.getTagNames();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * {@code versioned Billboard}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenses() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return filteredExpense;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        filteredExpense.setPredicate(predicate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredArchiveExpenses(String archiveName) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return filteredArchives.get(archiveName);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void updateFilteredArchiveExpenses(String archiveName, Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        filteredArchives.get(archiveName).setPredicate(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics Chart Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ObservableData\u003cStatisticsFormat\u003e getStatisticsFormat() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return statsFormat;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setStatisticsFormat(StatisticsFormat format) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        statsFormat.setValue(format);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ObservableData\u003cStatisticsFormatOptions\u003e getStatisticsFormatOptions() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return statsOptions;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setStatisticsFormatOptions(StatisticsFormatOptions options) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        statsOptions.setValue(options);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Clone Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Get a deep copy object of itself."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return Model a deep copy of itself."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Model getClone() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Billboard billboard \u003d getCombinedBillboard();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new ModelManager(billboard.getClone(), userPrefs);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // use the clone of the combined billboard, not the original"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Set the model to new model."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @param model a model."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void setModel(Model model) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.billboard.setBillboard((Billboard) model.getBillboard());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.archives.setArchives(model.getArchives());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.filteredArchives.clear();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.filteredArchives.putAll(model.getFilteredArchives());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Getter of filteredArchives."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return HashMap the filteredArchives."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public HashMap\u003cString, FilteredList\u003cExpense\u003e\u003e getFilteredArchives() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return filteredArchives;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return billboard.equals(other.billboard)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 archives.equals(other.archives)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 filteredExpense.equals(other.filteredExpense)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \u0026\u0026 filteredArchives.equals(other.filteredArchives);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return \"Billboard: \" + billboard.toString()"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \"\\nArchives: \" + archives.toString()"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \"\\nFiltered Expenses: \" + filteredExpense.toString()"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \"\\nFiltered Archives: \" + filteredArchives.toString();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 103,
      "waifonglee": 26,
      "waynefong0401": 49,
      "-": 106,
      "weiijiie": 71
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/ReadOnlyArchiveWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Unmodifiable view of the archives"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public interface ReadOnlyArchiveWrapper {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns an unmodifiable view of the expense list of the given archive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    ObservableList\u003cExpense\u003e getArchiveExpenses(String archiveName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns a list containing all archives."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    List\u003cArchive\u003e getArchiveList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns a list containing all archived expenses."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    List\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    ReadOnlyArchiveWrapper getClone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 31
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/ReadOnlyBillboard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Unmodifiable view of a Billboard"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public interface ReadOnlyBillboard {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns an unmodifiable view of the expense list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenses();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Map\u003cTag, Integer\u003e getCountManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    Map\u003cString, Tag\u003e getUniqueTagList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    List\u003cExpense\u003e filterArchiveExpenses();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    ReadOnlyBillboard removeArchiveExpenses();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 7,
      "waifonglee": 6,
      "waynefong0401": 4,
      "-": 10,
      "weiijiie": 2
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    Path getBillboardFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 14,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Path billboardFilePath \u003d Paths.get(\"data\" , \"billboard.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        setBillboardFilePath(newUserPrefs.getBillboardFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Path getBillboardFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return billboardFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setBillboardFilePath(Path billboardFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(billboardFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.billboardFilePath \u003d billboardFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                \u0026\u0026 billboardFilePath.equals(o.billboardFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Objects.hash(guiSettings, billboardFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return (\"Gui Settings : \" + guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \"\\nLocal data file location : \" + billboardFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 72,
      "weiijiie": 11
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/archive/Archive.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.model.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.ExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "//@@author davidcwh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an archive in Billboard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Archive extends ExpenseList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Archive(String archiveName, List\u003cExpense\u003e expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireAllNonNull(archiveName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        setExpenses(expense);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setArchive(List\u003cExpense\u003e expense) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        setExpenses(expense);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getArchiveName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archiveName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!(other instanceof Archive)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Archive otherArchive \u003d (Archive) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return otherArchive.getArchiveName().equals(getArchiveName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return Objects.hash(archiveName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"Archive name: \" + archiveName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 58
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/AllContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class AllContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public AllContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(expense.getName().name, keyword)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(expense.getDescription().description, keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                || (other instanceof AllContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 keywords.equals(((AllContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return Objects.hash(keywords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 40
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Represents an Expense\u0027s amount in Billboard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \"Amount should only contain a positive non-zero monetary value and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public final BigDecimal amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.amount \u003d new BigDecimal(amount);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Amount(BigDecimal amount) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            BigDecimal result \u003d new BigDecimal(test);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return result.compareTo(BigDecimal.ZERO) \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Adds this amount to another amount."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param other Amount to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return new Amount representing the combine total of the two amounts."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Amount add(Amount other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        BigDecimal result \u003d amount.add(other.amount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return new Amount(result.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                \u0026\u0026 amount.compareTo(((Amount) other).amount) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return decimalFormat.format(amount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 9,
      "waifonglee": 7,
      "waynefong0401": 36,
      "weiijiie": 12
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/AmountWithinRangePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class AmountWithinRangePredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Amount lowerLimit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Amount upperLimit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public AmountWithinRangePredicate(Amount lowerLimit, Amount upperLimit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.lowerLimit \u003d lowerLimit !\u003d null ? lowerLimit : new Amount(\"0\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.upperLimit \u003d upperLimit !\u003d null ? upperLimit : new Amount(\"9999999999.99\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return expense.getAmount().amount.compareTo(lowerLimit.amount) \u003e\u003d 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                \u0026\u0026 expense.getAmount().amount.compareTo(upperLimit.amount) \u003c\u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                || (other instanceof AmountWithinRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 lowerLimit \u003d\u003d ((AmountWithinRangePredicate) other).lowerLimit"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 upperLimit \u003d\u003d ((AmountWithinRangePredicate) other).upperLimit); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return Objects.hash(lowerLimit, upperLimit);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 31,
      "waynefong0401": 5
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/CreatedDateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents a Expense\u0027s created dateTime in the Billboard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class CreatedDateTime {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // More formats can be added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final List\u003cString\u003e ACCEPTABLE_PATTERNS \u003d List.of(\"d/M/yyyy[ HHmm]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Created date should follow one of these formats:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "             + String.join(\"\\n\", ACCEPTABLE_PATTERNS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public CreatedDateTime(String dateString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        dateTime \u003d tryParse(dateString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *  Convenience constructor to create the date time directly from a {@code LocalDateTime}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public CreatedDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Attempts to parse the given date string based on the acceptable formats."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param dateString Input date string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return The parsed LocalDateTime, if successful."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @throws IllegalArgumentException if the date string does not match the accepted formats."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static LocalDateTime tryParse(String dateString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cDateTimeFormatter\u003e acceptableFormats \u003d ACCEPTABLE_PATTERNS.stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(DateTimeFormatter::ofPattern)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (DateTimeFormatter formatter : acceptableFormats) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                TemporalAccessor accessor \u003d formatter.parseBest(dateString, LocalDateTime::from, LocalDate::from);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                if (accessor instanceof LocalDateTime) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    return (LocalDateTime) accessor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                } else if (accessor instanceof LocalDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    return ((LocalDate) accessor).atStartOfDay();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                    //e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns true if the given string is a valid date under the acceptable formats."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            tryParse(test);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        } catch (IllegalArgumentException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                || (other instanceof CreatedDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                \u0026\u0026 dateTime.equals(((CreatedDateTime) other).dateTime)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return dateTime.format(outputFormat);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "weiijiie": 92
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/DateWithinRangePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class DateWithinRangePredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private CreatedDateTime startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private CreatedDateTime endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public DateWithinRangePredicate(CreatedDateTime startDate, CreatedDateTime endDate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        boolean isBefore \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        boolean isAfter \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (startDate !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            isAfter \u003d expense.getCreated().dateTime.isEqual(startDate.dateTime)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                    || expense.getCreated().dateTime.isAfter(startDate.dateTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (endDate !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            isBefore \u003d expense.getCreated().dateTime.isEqual(endDate.dateTime)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                    || expense.getCreated().dateTime.isBefore(endDate.dateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return isBefore \u0026\u0026 isAfter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                || (other instanceof DateWithinRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 startDate \u003d\u003d ((DateWithinRangePredicate) other).startDate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 (endDate \u003d\u003d ((DateWithinRangePredicate) other).endDate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return Objects.hash(startDate, endDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 46
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Represents an Expense\u0027s description in Billboard."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description has no constraints\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Description(String value) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.description \u003d value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static boolean isValidDescription(String trimmedDescription) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 1,
      "waifonglee": 4,
      "waynefong0401": 34,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Represents a Expense in the billboard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private CreatedDateTime created;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Expense(Name name, Description description,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                   Amount amount, CreatedDateTime created,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                   Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireAllNonNull(name, description, created, amount, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.created \u003d created;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Expense(Name name, Description description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                   Amount amount, CreatedDateTime created,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                   Set\u003cTag\u003e tags, String archiveName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireAllNonNull(name, description, amount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.created \u003d created;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public CreatedDateTime getCreated() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return created;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getArchiveName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return archiveName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isArchived() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return !archiveName.equals(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void archiveTo(String archiveName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns deep clone of the expenses by creating a new Expense object with the same data."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Expense getClone() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new Expense(this.name, this.description, this.amount, this.created, this.tags, this.archiveName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return otherExpense.getName().equals(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                \u0026\u0026 otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                \u0026\u0026 otherExpense.getCreated().equals(getCreated())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                \u0026\u0026 otherExpense.getTags().equals(getTags());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Objects.hash(name, description, amount, created, tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return \"Name: \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + getName()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + \" Description: \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + getDescription()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + \" Amount: \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + getAmount()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \" Created: \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + getCreated()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \" Archive Name: \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + getArchiveName()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + \" Tags: \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + getTags();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 31,
      "waifonglee": 8,
      "waynefong0401": 30,
      "weiijiie": 70
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * A list of expenses. The expenses are unique as specified by the {@code equals} method of the {@code Expense} class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Replaces the record {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * The record {@code editedExpense} must not be the same as another existing record in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!target.equals(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Removes the equivalent record from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * The record must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void setExpenses(ExpenseList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Replaces the contents of this list with {@code expense}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * {@code expense} must not contain duplicate expense."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expense) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireAllNonNull(expense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!expensesAreUnique(expense)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        internalList.setAll(expense);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        \u0026\u0026 internalList.equals(((ExpenseList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns true if {@code Expense} contains only unique Expense."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private boolean expensesAreUnique(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenses.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                if (expenses.get(i).equals(expenses.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public ExpenseList getClone() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        ExpenseList clonedList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        for (Expense e : this.internalList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            Expense clonedExpense \u003d e.getClone(); // get a deep clone of each expense"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            clonedList.add(clonedExpense);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return clonedList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 1,
      "waifonglee": 4,
      "waynefong0401": 15,
      "-": 87,
      "weiijiie": 33
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/MultiArgPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class MultiArgPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private Set\u003cPredicate\u003cExpense\u003e\u003e predicateSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public MultiArgPredicate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicateSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return predicateSet.stream().allMatch(x -\u003e x.test(expense));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                || (other instanceof MultiArgPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u0026\u0026 predicateSet.equals(((MultiArgPredicate) other).predicateSet)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Set the keywords for the predicate used to filter through expenses. List should contain at least 1 keyword."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param keywords List of keywords used to filter through expenses."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setKeywords(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicateSet.add(new AllContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Set the date range limit for the predicate used to filter through expenses. Start date and end date cannot"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * both be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param startDate Start date limit, null if only have end date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param endDate End date limit, null if only have start date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDateRange(CreatedDateTime startDate, CreatedDateTime endDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicateSet.add(new DateWithinRangePredicate(startDate, endDate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Set the amount range limit for the predicate used to filter through expenses. Lower amount limit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * and upper amount limit cannot both be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param lowerAmtLimit Lower amount limit, null if only have upper amount limit."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param upperAmtLimit Upper amount limit, null if only have lower amount limit."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setAmtRange(Amount lowerAmtLimit, Amount upperAmtLimit) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicateSet.add(new AmountWithinRangePredicate(lowerAmtLimit, upperAmtLimit));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 59
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents a Expense\u0027s name in the Billboard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * The first character of the expense must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 50,
      "weiijiie": 6
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/exceptions/DuplicateExpenseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Signals that the operation will result in duplicate Expenses (Expenses are considered duplicates if they are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * considered equals under their @{code equals} method."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class DuplicateExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public DuplicateExpenseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        super(\"Operation would result in duplicate expenses\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 11
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/expense/exceptions/ExpenseNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 3,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/history/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Object to store all the executed command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String HAVE_HISTORY \u003d \"The following is the command history:%s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private static Stack\u003cString\u003e cmdList \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private static int statePointer \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Add executed command into command history."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @param cmd command to be added into the history."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static void addCmdHistory(String cmd) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        cmdList.push(cmd);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        statePointer \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Return the one next command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return String return the one next command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static String peekNextCmd() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (cmdList.empty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (statePointer \u003d\u003d cmdList.size()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return cmdList.get(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            statePointer++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return cmdList.get(cmdList.size() - statePointer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Return the one previous command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return String return the one previous command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static String peekPreviousCmd() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (cmdList.empty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (statePointer \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        } else if (statePointer \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            statePointer--;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            statePointer--;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return cmdList.get(cmdList.size() - statePointer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Check whether there is any command executed before."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return boolean return true if the cmdList is not empty."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static boolean hasCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return cmdList.size() !\u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Return all the history commands as a string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @return String return the string containing all the history commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static String getCmdHistory() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        for (int i \u003d cmdList.size() - 1; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            result \u003d result.concat(\"\\n\\t\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            result \u003d result.concat(cmdList.get(i - 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return String.format(HAVE_HISTORY, result);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Clear command history."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static void clearHistory() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        cmdList.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        statePointer \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 90
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/EmptyExpenseTimeline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Class representing an {@code ExpenseTimeline} with no expenses to show."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class EmptyExpenseTimeline implements ExpenseTimeline {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public EmptyExpenseTimeline() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        endDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        startDate \u003d endDate.minus(Period.ofMonths(1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public DateInterval getDateInterval() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return DateInterval.MONTH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public List\u003cPair\u003cDateRange, Amount\u003e\u003e getTimelineValues() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Collections.singletonList(new Pair\u003c\u003e(DateRange.fromClosed(startDate, endDate), new Amount(\"0\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 35
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/ExpenseBreakdown.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Interface representing the breakdown view of a collection of expenses."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public interface ExpenseBreakdown {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Getter for the the overall breakdown of expenses grouped according to some criteria."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return A map of string names of groupings to the list of expenses that are in that grouping"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    Map\u003cString, ? extends List\u003c ? extends Expense\u003e\u003e getBreakdownValues();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 19
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/ExpenseGrouping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static java.util.stream.Collectors.groupingBy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static java.util.stream.Collectors.mapping;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents a grouping that expenses can be partitioned by."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public enum ExpenseGrouping {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    TAG(\"tag\", expenses -\u003e expenses.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .flatMap(expense -\u003e expense.getTags()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    .map(tag -\u003e new Pair\u003c\u003e(tag, expense)))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .collect(groupingBy(pair -\u003e pair.getKey().tagName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    mapping(Pair::getValue, toList())))),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    MONTH(\"month\", expenses -\u003e expenses.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .collect(groupingBy(expense -\u003e expense.getCreated().dateTime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    .getMonth()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    .getDisplayName(TextStyle.SHORT, Locale.getDefault())))),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    DAY_OF_WEEK(\"day-of-week\", expenses -\u003e expenses.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .collect(groupingBy(expense -\u003e expense.getCreated().dateTime"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    .getDayOfWeek()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    .getDisplayName(TextStyle.SHORT, Locale.getDefault())))),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    NONE(\"none\", expenses -\u003e Map.of(\"All expenses\", expenses));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final Map\u003cString, ExpenseGrouping\u003e nameToGroupingMap;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final GroupingFunction\u003cExpense\u003e groupingFunction;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        nameToGroupingMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (var grouping : values()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            nameToGroupingMap.put(grouping.getName(), grouping);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    ExpenseGrouping(String name, GroupingFunction\u003cExpense\u003e groupingFunction) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.groupingFunction \u003d groupingFunction;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static Optional\u003cExpenseGrouping\u003e groupingFromName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Optional.ofNullable(nameToGroupingMap.get(name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public GroupingFunction\u003cExpense\u003e getGroupingFunction() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return groupingFunction;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 68
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/ExpenseHeatMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents a aggregation of expenses per day over a period of time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public interface ExpenseHeatMap {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns a representation of aggregate expenses per day over a period of time. Each pair in the list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * represents a week, with the {@code DateRange} specifying the dates of the start and end of the week, and the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * {@code EnumMap} specifying the days of the week mapped to the aggregate amount spend on that day."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    List\u003cEnumMap\u003cDayOfWeek, Amount\u003e\u003e getHeatMapValues();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 20
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/ExpenseTimeline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Interface representing the timeline view of a collection of expenses."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public interface ExpenseTimeline {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Getter for time interval used."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Time interval used, as a {@code DateInterval}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    DateInterval getDateInterval();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * List representing pairs of date ranges to the aggregate expenses over that date range. The keys are"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * {@code DateRange}s with duration equal to the given interval, and the values are the aggregate expenses"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * over that date range."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return List representing the timeline values."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    List\u003cPair\u003cDateRange, Amount\u003e\u003e getTimelineValues();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 30
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/FilledExpenseBreakdown.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents the breakdown of spending of a collection of expenses grouped by tags."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class FilledExpenseBreakdown implements ExpenseBreakdown {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Map\u003cString, ? extends List\u003c ? extends Expense\u003e\u003e breakdownValues;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Creates a new FilledExpenseBreakdown with the given map."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param breakdownValues A map of tags to the list of expenses that are tagged with that specific tag."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public FilledExpenseBreakdown(Map\u003cString, ? extends List\u003c? extends Expense\u003e\u003e breakdownValues) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(breakdownValues);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.breakdownValues \u003d breakdownValues;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Map\u003cString, ? extends List\u003c ? extends Expense\u003e\u003e getBreakdownValues() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return breakdownValues;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 30
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/FilledExpenseHeatMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents a concrete implementation of {@code ExpenseHeatMap}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class FilledExpenseHeatMap implements ExpenseHeatMap {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private List\u003cEnumMap\u003cDayOfWeek, Amount\u003e\u003e heatMapValues;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public FilledExpenseHeatMap(List\u003cEnumMap\u003cDayOfWeek, Amount\u003e\u003e heatMapValues) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.heatMapValues \u003d heatMapValues;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public List\u003cEnumMap\u003cDayOfWeek, Amount\u003e\u003e getHeatMapValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return heatMapValues;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 25
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/FilledExpenseTimeline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents the aggregate expenses for every interval of time, over a specified range of time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class FilledExpenseTimeline implements ExpenseTimeline {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String INVALID_PARAMETERS_MESSAGE \u003d \"Number of aggregate expenses and number of date \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            + \"intervals within the date range do not match!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final DateInterval dateInterval;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final List\u003cDateRange\u003e timelineIntervals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final List\u003cList\u003cExpense\u003e\u003e aggregateExpenses;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Creates a new FilledExpenseTimeline with the given parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param dateInterval      The level of \"granularity\" that the aggregate expenses are shown in."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param timelineIntervals List of the various date ranges for each interval in the timeline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param aggregateExpenses List of aggregate expenses. The nth element represents a list of all the expenses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *                          that occurred between {@code start + n * dateInterval} and {@code start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *                          + (n + 1) * dateInterval}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @throws IllegalArgumentException if the size of the aggregate expense list and the number of intervals in the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *                                  date range do not match."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public FilledExpenseTimeline(DateInterval dateInterval, List\u003cDateRange\u003e timelineIntervals,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                                 List\u003cList\u003cExpense\u003e\u003e aggregateExpenses)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireAllNonNull(dateInterval, timelineIntervals, aggregateExpenses);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.dateInterval \u003d dateInterval;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.timelineIntervals \u003d timelineIntervals;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.aggregateExpenses \u003d aggregateExpenses;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (timelineIntervals.size() !\u003d aggregateExpenses.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new IllegalArgumentException(INVALID_PARAMETERS_MESSAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Getter for time interval used."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Time interval used, as a {@code DateInterval}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public DateInterval getDateInterval() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return dateInterval;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Map representing the aggregate expenses over a timeline. The keys are {@code DateRange}s with duration equal to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * the given interval, and the values are the aggregate expenses over that date range. The output map has a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * predictable chronological ordering when iterated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Map representing the timeline."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public List\u003cPair\u003cDateRange, Amount\u003e\u003e getTimelineValues() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return IntStream.range(0, timelineIntervals.size())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .boxed()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(i -\u003e new Pair\u003c\u003e(timelineIntervals.get(i), totalAmount(aggregateExpenses.get(i))))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the {@code Amount} representing the total amount of all the expenses."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses List of expenses."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Total amount."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Amount totalAmount(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenses.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .reduce(new Amount(\"0\"), (amount, expense) -\u003e amount.add(expense.getAmount()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        Amount::add);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 89
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/GroupingFunction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Function that groups a list of type T into a map of strings to lists of type T."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public interface GroupingFunction\u003cT\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    Map\u003cString, ? extends List\u003c? extends T\u003e\u003e group(List\u003c? extends T\u003e items);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 12
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/StatisticsFormat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_GROUPING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_INTERVAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Enum representing the supported statistics formats."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public enum StatisticsFormat {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    TIMELINE(\"timeline\", PREFIX_GROUPING, PREFIX_INTERVAL),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    BREAKDOWN(\"breakdown\", PREFIX_GROUPING),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    HEAT_MAP(\"heatmap\", PREFIX_GROUPING);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static Map\u003cString, StatisticsFormat\u003e nameToFormatMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Prefix[] optionsPrefixes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        nameToFormatMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (StatisticsFormat format : StatisticsFormat.values()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            nameToFormatMap.put(format.getName(), format);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    StatisticsFormat(String name, Prefix... optionsPrefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.optionsPrefixes \u003d optionsPrefixes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the correct {@code StatisticsFormat} corresponding to the input name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param name String name of a {@code StatisticsFormat}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Optional wrapper around the corresponding {@code StatisticsFormat} or an empty optional if no"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * corresponding format exists."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static Optional\u003cStatisticsFormat\u003e formatFromName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Optional.ofNullable(nameToFormatMap.get(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the name of the {@code StatisticsFormat}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the supported prefixes for options of the {@code StatisticsFormat}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Prefix[] getOptionsPrefixes() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return optionsPrefixes;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 60
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/formats/StatisticsFormatOptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Encapsulates the changes in options that a user can select with regards to the display of the statistics."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class StatisticsFormatOptions {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DateInterval dateInterval;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ExpenseGrouping grouping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Private constructor to prevent instantiation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private StatisticsFormatOptions(DateInterval dateInterval, ExpenseGrouping grouping) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.dateInterval \u003d dateInterval;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.grouping \u003d grouping;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns a {@code StatisticsFormatOptions} object with no changes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static StatisticsFormatOptions emptyOption() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new StatisticsFormatOptions(null, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static StatisticsFormatOptions withOptions(DateInterval dateInterval, ExpenseGrouping grouping) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new StatisticsFormatOptions(dateInterval, grouping);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return an optional wrapper of the selected new date interval, if any."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Optional\u003cDateInterval\u003e getNewDateInterval() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Optional.ofNullable(dateInterval);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Optional\u003cExpenseGrouping\u003e getNewGrouping() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Optional.ofNullable(grouping);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        } else if (obj instanceof StatisticsFormatOptions) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            StatisticsFormatOptions other \u003d (StatisticsFormatOptions) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return other.dateInterval \u003d\u003d this.dateInterval"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    \u0026\u0026 other.grouping \u003d\u003d this.grouping;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 56
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/generators/BreakdownGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.generators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseBreakdown;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseGrouping;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.FilledExpenseBreakdown;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Stateless class to generate a breakdown of expenses. Methods here are guaranteed to have no external"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * side effects, or depend on external state."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class BreakdownGenerator implements StatisticsGenerator\u003cExpenseBreakdown\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an expense breakdown based on the given expense grouping grouped by the default of tags."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBreakdown generate(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return generate(expenses, ExpenseGrouping.TAG);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an expense breakdown based on the given expense grouping."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses Input expenses to be broken down."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param grouping Grouping that expenses should be grouped by."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Expense breakdown representing the broken down expenses."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBreakdown generate(List\u003c? extends Expense\u003e expenses, ExpenseGrouping grouping) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new FilledExpenseBreakdown(grouping.getGroupingFunction().group(expenses));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Asynchronously generates an expense breakdown based on the given expense grouping grouped by the default of tags."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Task\u003cExpenseBreakdown\u003e generateAsync(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return generateAsync(expenses, ExpenseGrouping.TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an expense breakdown asynchronously based on the given expense grouping."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses Input expenses to be broken down."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param grouping Grouping that expenses should be grouped by."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Task wrapper around an expense breakdown representing the broken down expenses."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Task\u003cExpenseBreakdown\u003e generateAsync(List\u003c? extends Expense\u003e expenses, ExpenseGrouping grouping) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Task\u003cExpenseBreakdown\u003e expenseBreakdownTask \u003d new Task\u003c\u003e() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            protected ExpenseBreakdown call() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                List\u003c? extends Expense\u003e copy \u003d new ArrayList\u003c\u003e(expenses);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                return generate(copy, grouping);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Thread thread \u003d new Thread(expenseBreakdownTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        thread.setDaemon(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        thread.start();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenseBreakdownTask;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 63
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/generators/HeatMapGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.generators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.checkNonEmpty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseHeatMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.FilledExpenseHeatMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Stateless class to generate a heatmap of aggregate expenses. Methods here are guaranteed to have no side effects,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * or depend on external state."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class HeatMapGenerator implements StatisticsGenerator\u003cExpenseHeatMap\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an {@code ExpenseHeatMap} from the given list of expenses over a default date range of one year"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * before the latest expense in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return An {@code ExpenseHeatMap} representing the aggregate expenses over each day in the date range."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseHeatMap generate(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(expenses);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!checkNonEmpty(expenses)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return new FilledExpenseHeatMap(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003c? extends Expense\u003e sortedExpense \u003d sortExpensesByDate(expenses);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate latestDate \u003d getLatestDate(sortedExpense);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return generate(expenses, DateRange.fromClosed(latestDate.minusYears(1), latestDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an {@code ExpenseHeatMap} from the given list of expenses over the specified date range."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return An {@code ExpenseHeatMap} representing the aggregate expenses over each day in the date range."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseHeatMap generate(List\u003c? extends Expense\u003e expenses, DateRange dateRange) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        requireAllNonNull(expenses, dateRange);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!checkNonEmpty(expenses)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return new FilledExpenseHeatMap(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003c? extends Expense\u003e sortedExpense \u003d sortExpensesByDate(expenses);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cEnumMap\u003cDayOfWeek, Amount\u003e\u003e heatMapValues \u003d dateRange"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .partitionByInterval(DateInterval.WEEK)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(range -\u003e new EnumMap\u003cDayOfWeek, Amount\u003e(DayOfWeek.class))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        sortedExpense.forEach(expense -\u003e addExpenseToHeatMap(dateRange, heatMapValues, expense));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new FilledExpenseHeatMap(heatMapValues);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an {@code ExpenseHeatMap} asynchronously from the given list of expenses over a default date range"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * of one year before the latest expense in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return An {@code ExpenseHeatMap} representing the aggregate expenses over each day in the date range."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Task\u003cExpenseHeatMap\u003e generateAsync(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(expenses);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!checkNonEmpty(expenses)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return taskFrom(() -\u003e generate(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003c? extends Expense\u003e sortedExpense \u003d sortExpensesByDate(expenses);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate latestDate \u003d getLatestDate(sortedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return generateAsync(sortedExpense, DateRange.fromClosed("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                latestDate.minusYears(1), latestDate));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an {@code ExpenseHeatMap} asynchronously from the given list of expenses over the specified date range."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return An {@code ExpenseHeatMap} representing the aggregate expenses over each day in the date range."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Task\u003cExpenseHeatMap\u003e generateAsync(List\u003c? extends Expense\u003e expenses, DateRange dateRange) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(expenses);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return taskFrom(() -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            List\u003c? extends Expense\u003e copy \u003d new ArrayList\u003c\u003e(expenses);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return generate(copy, dateRange);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private List\u003c? extends Expense\u003e sortExpensesByDate(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenses.stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .sorted(Comparator.comparing(expense -\u003e expense.getCreated().dateTime))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Gets the latest created date out of a list of expenses sorted by date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private LocalDate getLatestDate(List\u003c? extends Expense\u003e sortedExpense) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return sortedExpense.get(sortedExpense.size() - 1)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .getCreated()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .dateTime.toLocalDate();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Aggregates the given expense with the heat map values, if the expense lies within the accepted date range for"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * the heat map."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void addExpenseToHeatMap(DateRange dateRange,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                                     List\u003cEnumMap\u003cDayOfWeek, Amount\u003e\u003e heatMapValues,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                                     Expense expense) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate createdDate \u003d expense.getCreated().dateTime.toLocalDate();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (dateRange.contains(createdDate)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            int index \u003d (int) ChronoUnit.WEEKS.between("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    dateRange.getStartDate().with(DateInterval.WEEK.getAdjuster()), createdDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            DayOfWeek dayOfWeek \u003d createdDate.getDayOfWeek();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            heatMapValues.get(index).merge(dayOfWeek, expense.getAmount(), Amount::add);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Creates a task from the given supplier, returning it asynchronously."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private \u003cT\u003e Task\u003cT\u003e taskFrom(Supplier\u003cT\u003e supplier) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Task\u003cT\u003e task \u003d new Task\u003c\u003e() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            protected T call() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                return supplier.get();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        };"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Thread thread \u003d new Thread(task);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        thread.setDaemon(true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        thread.start();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 153
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/generators/StatisticsGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.generators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Interface for generating statistics."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public interface StatisticsGenerator\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates statistics based on the given list of expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses Input expenses list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return A statistic representation T."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    T generate(List\u003c? extends Expense\u003e expenses);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates statistics based on the given list of expenses, asynchronously."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses Input expenses list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return A {@code Task} wrapping the statistics representation T."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    Task\u003cT\u003e generateAsync(List\u003c? extends Expense\u003e expenses);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 27
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/statistics/generators/TimelineGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.generators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.EmptyExpenseTimeline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseTimeline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.FilledExpenseTimeline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Stateless class to generate a timeline of aggregate expenses. Methods here are guaranteed to have no side effects,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * or depend on external state."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class TimelineGenerator implements StatisticsGenerator\u003cExpenseTimeline\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an {@code ExpenseTimeline} using a default date interval of a month."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseTimeline generate(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return generate(expenses, DateInterval.MONTH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an {@code ExpenseTimeline} based on the input expenses and the specified date interval."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses Input expenses."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param interval Specified date interval."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return A representation of the expenses as a timeline"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseTimeline generate(List\u003c? extends Expense\u003e expenses, DateInterval interval) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!CollectionUtil.checkNonEmpty(expenses)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return new EmptyExpenseTimeline();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e sortedExpenses \u003d expenses.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .sorted(Comparator.comparing(expense -\u003e expense.getCreated().dateTime))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDateTime startDateTime \u003d sortedExpenses.get(0).getCreated().dateTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDateTime endDateTime \u003d sortedExpenses.get(sortedExpenses.size() - 1).getCreated().dateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.fromClosed(startDateTime.toLocalDate(), endDateTime.toLocalDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cDateRange\u003e timelineIntervals \u003d dateRange.partitionByInterval(interval);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new FilledExpenseTimeline(interval, timelineIntervals,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                getAggregateExpensesFromSorted(timelineIntervals, sortedExpenses));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an {@code ExpenseTimeline} asynchronously using a default date interval of a month."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Task\u003cExpenseTimeline\u003e generateAsync(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return generateAsync(expenses, DateInterval.MONTH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Generates an {@code ExpenseTimeline} asynchronously based on the input expenses and the specified date interval."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses Input expenses."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param interval Specified date interval."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return A {@code Task} wrapping the representation of the expenses as a timeline."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Task\u003cExpenseTimeline\u003e generateAsync(List\u003c? extends Expense\u003e expenses, DateInterval interval) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Task\u003cExpenseTimeline\u003e expenseTimelineTask \u003d new Task\u003c\u003e() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            protected ExpenseTimeline call() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                List\u003c? extends Expense\u003e copy \u003d new ArrayList\u003c\u003e(expenses);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                return generate(copy, interval);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        };"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Thread thread \u003d new Thread(expenseTimelineTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        thread.setDaemon(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        thread.start();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenseTimelineTask;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Preconditions: {@code ranges} and {@code expenses} are both sorted chronologically."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private List\u003cList\u003cExpense\u003e\u003e getAggregateExpensesFromSorted(List\u003cDateRange\u003e ranges, List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cList\u003cExpense\u003e\u003e aggregateExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e listView \u003d expenses;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (var range : ranges) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            List\u003cExpense\u003e aggregateExpense \u003d extractExpensesInDateRange(listView, range);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            aggregateExpenses.add(aggregateExpense);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            listView \u003d listView.subList(aggregateExpense.size(), listView.size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return aggregateExpenses;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the sublist of expenses from the that occur within the specified date range. The input expense list must"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * be sorted chronologically."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses Chronologically sorted expense list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param range Desired date range for output list to be contained within."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return List of expenses that occur within specified date range."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private List\u003cExpense\u003e extractExpensesInDateRange(List\u003cExpense\u003e expenses, DateRange range) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenses.stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        .takeWhile(expense -\u003e range.contains(expense.getCreated().dateTime.toLocalDate()))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 115
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/tag/ContainsTagPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Tags} matches any of the tag names given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class ContainsTagPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public ContainsTagPredicate(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                .anyMatch(tag -\u003e expense.getTags().contains(tag));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                || (other instanceof ContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                \u0026\u0026 tags.equals(((ContainsTagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 30
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Represents a Tag in the billboard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/tag/TagCountManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Tracks tags and the number of expenses they are tagged to."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class TagCountManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Map\u003cTag, Integer\u003e count \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Checks if tag exists in map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tag   tag to be checked."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return      tag\u0027s existence."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean contains(Tag tag) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return count.containsKey(tag);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Adds a tag given in the argument into the map."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Tag must not exist in the map."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tag to be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void add(Tag tag) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (contains(tag)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.put(tag, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Checks and add tags that does not exist in the map."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tags to be checked."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void addNewTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            if (!contains(tag)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                add(tag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Increments count of tag given in the argument."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Tag must exist in the map."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tag whose count to be incremented."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementCount(Tag tag) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!contains(tag)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        int current \u003d count.get(tag);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.replace(tag, current + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Increments count of all the tags in the set given in argument."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * If tag does not exist, it will be added to the Map."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tags whose count needs to be incremented by 1."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementAllCount(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        addNewTags(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            incrementCount(tag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Decrease count of tag given in the argument."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Tag must exist in list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tag whose count to be decreased."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void decreaseCount(Tag tag) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!contains(tag)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        int current \u003d count.get(tag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.replace(tag, current - 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Decrease count of all tags specified in argument."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tags whose count to be decreased."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void decreaseAllCount(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            decreaseCount(tag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Removes all tags whose count \u003d 0 and returns a list of tags removed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return list of tags removed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public List\u003cTag\u003e removeZeroCount() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cTag\u003e toReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Iterator it \u003d count.entrySet().iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            Integer num \u003d (Integer) pair.getValue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            if (num \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                toReturn.add((Tag) pair.getKey());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                it.remove();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Sets the current map to the specified map given in argument."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param count to replace the current map."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setCountMap(Map\u003cTag, Integer\u003e count) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(count);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.count \u003d new HashMap\u003c\u003e(count);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns an unmodifiable current map."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return current map."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public Map\u003cTag, Integer\u003e getCountMap() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Collections.unmodifiableMap(count);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns a clone of this object."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return clone of this object."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public TagCountManager getClone() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        TagCountManager result \u003d new TagCountManager();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        result.setCountMap(getCountMap());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    //@@author waifonglee"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!(other instanceof TagCountManager)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        TagCountManager otherList \u003d (TagCountManager) other;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return otherList.getCountMap().equals(getCountMap());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 169,
      "waynefong0401": 6
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/tag/UniqueTagList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * A Tag is considered unique by comparing their hashcode.  As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Tag uses hashcode and equals() for equality so as to ensure that the Tag being added, updated"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * or removed is unique in terms of identity in the UniqueTagList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Supports a minimal set of Map operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class UniqueTagList {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Map\u003cString, Tag\u003e tagList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Checks if tag of specific name exists in the Map."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tagName  of the tag."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return         tag\u0027s existence."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean contains(String tagName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return tagList.containsKey(tagName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Retrieves tag which has the tag name given in the argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * The Tag must exist in the Map."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tagName name of the tag."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return Tag of the specific tag name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public Tag retrieveTag(String tagName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!contains(tagName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return tagList.get(tagName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Adds a tag with the name given in the argument into the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Tag must not exist in the Map."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tagName name of the tag."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void add(String tagName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (contains(tagName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tagList.put(tagName, new Tag(tagName));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Checks and adds tags that do not exist in the Map."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param toAdd list of tag names to be checked."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void addNewTags(List\u003cString\u003e toAdd) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (String tagName: toAdd) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            if (!contains(tagName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                add(tagName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Retrieves corresponding tags according to the list of tag names."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * If tag does not exist, it will be added to the Map."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param toRetrieve List of tag names."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return Set of all tags retrieved."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public Set\u003cTag\u003e retrieveTags(List\u003cString\u003e toRetrieve) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e toReturn \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        addNewTags(toRetrieve);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (String current : toRetrieve) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            toReturn.add(retrieveTag(current));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Collections.unmodifiableSet(toReturn);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns a clone of this object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return clone of this object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public UniqueTagList getClone() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cString, Tag\u003e clonedMap \u003d new HashMap\u003c\u003e(tagList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        UniqueTagList clonedList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        clonedList.setTagList(clonedMap);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return clonedList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    //@@author waifonglee"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Removes mapping of specified tag name and its corresponding tag."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Tag name must exist in the Map."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tagName to be removed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void remove(String tagName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!contains(tagName)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tagList.remove(tagName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Removes mapping of all tags specified in argument."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tags to be removed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void removeAll(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            remove(tag.tagName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Sets current map to the one specified in the argument."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @param tagList to replace the current map."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setTagList(Map\u003cString, Tag\u003e tagList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        requireNonNull(tagList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.tagList \u003d new HashMap\u003c\u003e(tagList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns an unmodifiable current map."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return current map."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public Map\u003cString, Tag\u003e getTagList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return Collections.unmodifiableMap(tagList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Returns a list of unique tag names."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * @return list of unique tag names."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public List\u003cString\u003e getTagNames() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d new ArrayList\u003c\u003e(tagList.keySet());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Collections.sort(tagNames);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return List.copyOf(tagNames);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        if (!(other instanceof UniqueTagList)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        UniqueTagList otherList \u003d (UniqueTagList) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return otherList.getTagList().equals(getTagList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 173,
      "waynefong0401": 6
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Signals that the operation will result in duplicate Tag (Tags are considered duplicates if they are"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * considered equals under their @{code equals} method."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 12
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " * Signals that the operation is unable to find the specified tag."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class TagNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 7
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Contains utility methods for populating {@code Billboard} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            new Expense(new Name(\"Welcome to Billboard\"), new Description(\"Description goes here (optional)\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    new Amount(\"20.00\"), new CreatedDateTime(\"08/11/2019\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    getTagSet(\"many\", \"tags\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            new Expense(new Name(\"Paid bills\"), new Description(\"I can include things like bills!\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    new Amount(\"40.00\"), new CreatedDateTime(\"12/12/2018\"), getTagSet(\"bills\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            new Expense(new Name(\"Bought lunch\"), new Description(\"And food!\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    new Amount(\"3.70\"), new CreatedDateTime(\"1/1/2018\"), getTagSet(\"food\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            new Expense(new Name(\"Billboard is great\"), new Description(\"Yes it is.\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    new Amount(\"12.34\"), new CreatedDateTime(\"3/05/2019\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    getTagSet(\"upgrade\", \"now\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static ReadOnlyBillboard getSampleBillboard() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Billboard sampleBb \u003d new Billboard();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            sampleBb.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            List\u003cString\u003e tagNames \u003d sampleExpense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            Set\u003cTag\u003e tags \u003d sampleBb.retrieveTags(tagNames);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            sampleBb.incrementCount(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return sampleBb;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 7,
      "waynefong0401": 7,
      "-": 25,
      "weiijiie": 17
    }
  },
  {
    "path": "src/main/java/seedu/billboard/model/versionedbillboard/VersionedBillboard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.versionedbillboard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Undo command List, store the previous model and command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class VersionedBillboard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private static Stack\u003cModel\u003e stateList \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static Stack\u003cPair\u003cString, CommandResult\u003e\u003e cmdList \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private static int currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Saves the current billboard state in state history."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static void commit(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (currentStatePointer !\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            for (int i \u003d 0; i \u003c currentStatePointer; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                stateList.pop();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                cmdList.pop();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        stateList.push(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static void addCmd(String cmd, CommandResult result) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        cmdList.push(new Pair\u003c\u003e(cmd, result));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *  Restores the previous billboard state from state history."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static Model getUndoModel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return stateList.get(stateList.size() - currentStatePointer - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static String getUndoCmd() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return cmdList.get(cmdList.size() - currentStatePointer).getKey();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static CommandResult getUndoCmdResult() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return cmdList.get(cmdList.size() - currentStatePointer).getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     *  Restores a previously undone billboard state from state history."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static Model getRedoModel() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return stateList.get(stateList.size() - currentStatePointer - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static String getRedoCmd() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return cmdList.get(cmdList.size() - currentStatePointer).getKey();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static CommandResult getRedoCmdResult() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return cmdList.get(cmdList.size() - currentStatePointer).getValue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static boolean isUndoable() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return currentStatePointer !\u003d cmdList.size() \u0026\u0026 !cmdList.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static boolean isRedoable() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return currentStatePointer !\u003d 0 \u0026\u0026 !cmdList.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Clear all the state history."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static void clearStateList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        stateList.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        cmdList.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Compare the history of two Billboard states."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public boolean compareBillboardModels(Stack\u003cModel\u003e modelList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return VersionedBillboard.stateList.equals(modelList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static void setCurrentStatePointer(int currentStatePointer) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.currentStatePointer \u003d currentStatePointer;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 79,
      "weiijiie": 15
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/BillboardStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents a storage for {@link Billboard} to store current expenses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public interface BillboardStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    Path getBillboardFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns Billboard data as a {@link ReadOnlyBillboard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    Optional\u003cReadOnlyBillboard\u003e readBillboard() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @see #getBillboardFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    Optional\u003cReadOnlyBillboard\u003e readBillboard(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Saves the given {@link ReadOnlyBillboard} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param billboard cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void saveBillboard(ReadOnlyBillboard billboard) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @see #saveBillboard(ReadOnlyBillboard)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void saveBillboard(ReadOnlyBillboard billboard, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 4,
      "waynefong0401": 11,
      "-": 30,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/JsonAdaptedExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final DateTimeFormatter dateStoragePattern \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final String created;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final String archiveName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                              @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                              @JsonProperty(\"created\") String created,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                              @JsonProperty(\"archive\") String archiveName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.created \u003d created;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        created \u003d source.getCreated().dateTime.format(dateStoragePattern);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveName \u003d source.getArchiveName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (created \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, CreatedDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            dateTime \u003d dateStoragePattern.parse(created, LocalDateTime::from);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new IllegalValueException(CreatedDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        final CreatedDateTime modelCreated \u003d new CreatedDateTime(dateTime);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveName \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    \"Archive name\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final String modelArchiveName \u003d archiveName;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new Expense(modelName, modelDescription, modelAmount, modelCreated, modelTags, modelArchiveName);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 12,
      "waifonglee": 7,
      "waynefong0401": 27,
      "-": 48,
      "weiijiie": 37
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/JsonBillboardStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * A class to access Billboard data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class JsonBillboardStorage implements BillboardStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBillboardStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public JsonBillboardStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Path getBillboardFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Optional\u003cReadOnlyBillboard\u003e readBillboard() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return readBillboard(getBillboardFilePath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Similar to {@link #readBillboard()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Optional\u003cReadOnlyBillboard\u003e readBillboard(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Optional\u003cJsonSerializableBillboard\u003e jsonBillboard \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                filePath, JsonSerializableBillboard.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (jsonBillboard.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return Optional.of(jsonBillboard.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void saveBillboard(ReadOnlyBillboard billboard) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        saveBillboard(billboard, getBillboardFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Similar to {@link #saveBillboard(ReadOnlyBillboard)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void saveBillboard(ReadOnlyBillboard billboard, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        requireNonNull(billboard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBillboard(billboard), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 14,
      "waynefong0401": 13,
      "-": 50,
      "weiijiie": 3
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/JsonSerializableBillboard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * An Immutable Billboard that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "@JsonRootName(value \u003d \"expenses\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "class JsonSerializableBillboard {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"Expenses list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Constructs a {@code JsonSerializableBillboard} with the given expenses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public JsonSerializableBillboard(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Converts a given {@code ReadOnlyBillboard} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBillboard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public JsonSerializableBillboard(ReadOnlyBillboard source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenses.addAll(source.getExpenses().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts this Billboard into the model\u0027s {@code Billboard} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Billboard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard billboard \u003d new Billboard();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (billboard.hasExpense(expense)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            List\u003cString\u003e tagNames \u003d expense.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                    .map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            Set\u003cTag\u003e tags \u003d billboard.retrieveTags(tagNames);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            Expense edited \u003d new Expense(expense.getName(), expense.getDescription(), expense.getAmount(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    expense.getCreated(), tags, expense.getArchiveName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            billboard.incrementCount(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            billboard.addExpense(edited);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return billboard;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 6,
      "waifonglee": 10,
      "waynefong0401": 9,
      "-": 34,
      "weiijiie": 11
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public interface Storage extends BillboardStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Billboard methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    Path getBillboardFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    Optional\u003cReadOnlyBillboard\u003e readBillboard() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    void saveBillboard(ReadOnlyBillboard billboard) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 5,
      "waynefong0401": 7,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Manages storage of Billboard data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private BillboardStorage billboardStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public StorageManager(BillboardStorage billboardStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.billboardStorage \u003d billboardStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Billboard methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Path getBillboardFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return billboardStorage.getBillboardFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Optional\u003cReadOnlyBillboard\u003e readBillboard() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return readBillboard(billboardStorage.getBillboardFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public Optional\u003cReadOnlyBillboard\u003e readBillboard(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return billboardStorage.readBillboard(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void saveBillboard(ReadOnlyBillboard billboard) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        saveBillboard(billboard, billboardStorage.getBillboardFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void saveBillboard(ReadOnlyBillboard billboard, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        billboardStorage.saveBillboard(billboard, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 7,
      "waynefong0401": 11,
      "-": 54,
      "weiijiie": 5
    }
  },
  {
    "path": "src/main/java/seedu/billboard/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Represents a storage for {@link seedu.billboard.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Saves the given {@link seedu.billboard.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.history.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        commandTextField.setOnKeyPressed(e -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            if (e.getCode().equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                commandTextField.setText(CommandHistory.peekNextCmd());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            } else if (e.getCode().equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                commandTextField.setText(CommandHistory.peekPreviousCmd());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            commandTextField.end();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            CommandHistory.addCmdHistory(commandTextField.getText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "         * @see seedu.billboard.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 20,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Address Book level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        name.setText(expense.getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        amount.setText(expense.getAmount().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        description.setText(expense.getDescription().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        date.setText(expense.getCreated().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        expense.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 20,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/ExpenseListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Changes the list of expenses being displayed on the panel."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param expenseList New list of expenses to be displayed on the panel."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setExpenseListView(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 18,
      "waynefong0401": 9,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-f12-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.ui.charts.ChartBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ObservableList\u003cExpense\u003e displayedExpenses;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ChartBox chartBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private AnchorPane chartBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.displayedExpenses \u003d FXCollections.observableArrayList(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(displayedExpenses);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseListPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        chartBox \u003d new ChartBox(displayedExpenses, logic.getStatisticsFormat(), logic.getStatisticsFormatOptions());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        chartBoxPlaceholder.getChildren().add(chartBox.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getBillboardFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * @see seedu.billboard.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            Optional\u003cString\u003e listNameToBeDisplayed \u003d commandResult.getListToBeDisplayed();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            listNameToBeDisplayed.ifPresent(name -\u003e {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    List\u003c? extends Expense\u003e listToBeDisplayed \u003d \"\".equals(name)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                            ? logic.getFilteredExpenseList()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                            : logic.getFilteredArchiveExpenseList(name);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    displayedExpenses.setAll(listToBeDisplayed);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            );"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 5,
      "waynefong0401": 8,
      "-": 178,
      "weiijiie": 28
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/ChartBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseGrouping;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.generators.BreakdownGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.generators.HeatMapGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.generators.TimelineGenerator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Container for charts. Controls type of chart being displayed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ChartBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String FXML \u003d \"ChartBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private AnchorPane chartContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ObservableList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ObservableData\u003cDateInterval\u003e dateInterval;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ObservableData\u003cExpenseGrouping\u003e expenseGrouping;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ExpenseChart currentChart;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ChartBox(ObservableList\u003cExpense\u003e expenses, ObservableData\u003cStatisticsFormat\u003e statsType,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    ObservableData\u003cStatisticsFormatOptions\u003e statsOptions) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.expenses \u003d expenses;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.dateInterval \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.expenseGrouping \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        statsType.observe(this::onStatsTypeChanged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        statsOptions.observe(options -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            options.getNewDateInterval().ifPresent(dateInterval::setValue);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            options.getNewGrouping().ifPresent(expenseGrouping::setValue);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Callback which is called when the observed statistics type changes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param type New statistic type to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void onStatsTypeChanged(StatisticsFormat type) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (currentChart !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            chartContainer.getChildren().remove(currentChart.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case TIMELINE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            currentChart \u003d new ExpenseTimelineChart(expenses, dateInterval, expenseGrouping, new TimelineGenerator());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case BREAKDOWN:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            currentChart \u003d new ExpenseBreakdownChart(expenses, expenseGrouping, new BreakdownGenerator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case HEAT_MAP:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            currentChart \u003d new ExpenseHeatMapChart(expenses, expenseGrouping, new HeatMapGenerator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new UnsupportedOperationException(\"Chart not implemented for selected statistic\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        chartContainer.getChildren().add(currentChart.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 73
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/ExpenseBreakdownChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseBreakdown;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseGrouping;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.generators.BreakdownGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * A chart showing the breakdown of expense spending by tag for the currently displayed expenses."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ExpenseBreakdownChart extends ExpenseChart {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String FXML \u003d \"ExpenseBreakdownChart.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ObservableData\u003cExpenseGrouping\u003e expenseGrouping;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final BreakdownGenerator breakdownGenerator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ObservableList\u003cPieChart.Data\u003e dataList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns a new {@code ExpenseBreakdownChart} with the specified parameters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses           An observable wrapper of the currently displayed expenses."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenseGrouping    An observable wrapper of the currently selected grouping to group expenses by."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param breakdownGenerator Instance of a generator that generates the breakdown to be viewed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBreakdownChart(ObservableList\u003c? extends Expense\u003e expenses,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                                 ObservableData\u003cExpenseGrouping\u003e expenseGrouping,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                                 BreakdownGenerator breakdownGenerator) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        super(FXML, expenses);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.breakdownGenerator \u003d breakdownGenerator;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.dataList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.expenseGrouping \u003d expenseGrouping;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseGrouping.setValue(ExpenseGrouping.TAG); // Default value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseBreakdown expenseBreakdown \u003d breakdownGenerator.generate(expenses);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        dataList.setAll(breakdownValuesToList(expenseBreakdown.getBreakdownValues()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        pieChart.setData(dataList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        setupListeners();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets up listeners to observe for changes in the relevant observables and update the breakdown accordingly."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void setupListeners() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseGrouping.observe(grouping -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                updateBreakdown(breakdownGenerator.generateAsync(expenses, grouping)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenses.addListener((ListChangeListener\u003cExpense\u003e) c -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                updateBreakdown(breakdownGenerator.generateAsync(c.getList(), expenseGrouping.getValue())));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Helper method called when the displayed list of expenses change."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void updateBreakdown(Task\u003cExpenseBreakdown\u003e newDataTask) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        newDataTask.setOnSucceeded(event -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            ExpenseBreakdown newData \u003d newDataTask.getValue();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            List\u003cPieChart.Data\u003e data \u003d breakdownValuesToList(newData.getBreakdownValues());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            Platform.runLater(() -\u003e dataList.setAll(data));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Converts a map of breakdown values into a list of pie chart data"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private List\u003cPieChart.Data\u003e breakdownValuesToList(Map\u003cString, ? extends List\u003c? extends Expense\u003e\u003e breakdownValues) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return breakdownValues.entrySet()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(entry -\u003e new PieChart.Data(entry.getKey(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        totalAmount(entry.getValue()).amount.doubleValue()))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns the {@code Amount} representing the total amount of all the expenses."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses List of expenses."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @return Total amount."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Amount totalAmount(List\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return expenses.stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .reduce(new Amount(\"0\"), (amount, expense) -\u003e amount.add(expense.getAmount()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        Amount::add);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 104
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/ExpenseChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Represents a chart showing a certain statistic for expenses."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public abstract class ExpenseChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    protected final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    protected ObservableList\u003c? extends Expense\u003e expenses;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseChart(String fxmlFilePath, ObservableList\u003c? extends Expense\u003e expenses) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        super(fxmlFilePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.expenses \u003d expenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 25
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/ExpenseHeatMapChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseGrouping;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseHeatMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.generators.HeatMapGenerator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.ui.charts.converters.DayOfWeekConverter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.ui.charts.converters.MonthConverter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * A chart showing the heatmap for the currently displayed expenses."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ExpenseHeatMapChart extends ExpenseChart {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String FXML \u003d \"ExpenseHeatMapChart.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final int SCALE_FACTOR \u003d 8;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private ProportionalBubbleChart\u003cInteger, Integer\u003e heatMapChart;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private NumberAxis xAxis;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ObservableData\u003cExpenseGrouping\u003e expenseGrouping;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final HeatMapGenerator heatMapGenerator;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final SeriesManager\u003cInteger, Integer\u003e seriesManager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final DateRange currentYearRange \u003d getCurrentYearRange();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns a new {@code ExpenseHeatMapChart} with the specified parameters."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses           An observable wrapper of the currently displayed expenses."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenseGrouping    An observable wrapper of the currently selected grouping to group expenses by."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param heatMapGenerator   Instance of a generator that generates the heatmap to be viewed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseHeatMapChart(ObservableList\u003c? extends Expense\u003e expenses,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                               ObservableData\u003cExpenseGrouping\u003e expenseGrouping,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                               HeatMapGenerator heatMapGenerator) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        super(FXML, expenses);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.expenseGrouping \u003d expenseGrouping;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseGrouping.setValue(ExpenseGrouping.NONE); // Default value"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.heatMapGenerator \u003d heatMapGenerator;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.seriesManager \u003d new SeriesManager\u003c\u003e("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                expenseGrouping.getValue().getGroupingFunction().group(expenses).keySet(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                heatMapChart);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        xAxis.setTickLabelFormatter(new MonthConverter(currentYearRange.getStartDate(), TextStyle.SHORT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        yAxis.setTickLabelFormatter(new DayOfWeekConverter(TextStyle.SHORT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        updateHeatMap(expenses, expenseGrouping.getValue());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        setupListeners();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets up listeners to observe for changes in the relevant observables and update the heatmap accordingly."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void setupListeners() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseGrouping.observe(grouping -\u003e updateHeatMap(expenses, grouping));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenses.addListener((ListChangeListener\u003cExpense\u003e) c -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                updateHeatMap(c.getList(), expenseGrouping.getValue()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Updates the heatmap based on the given parameters."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void updateHeatMap(List\u003c? extends Expense\u003e expenses, ExpenseGrouping grouping) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        var expenseListMap \u003d grouping.getGroupingFunction().group(expenses);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        seriesManager.updateSeriesSet(expenseListMap.keySet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        seriesManager.updateSeries(series -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                updateSeries(heatMapGenerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        .generateAsync(expenseListMap.get(series.getName()), currentYearRange), series));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Helper method to get the current date range representing the past year adjusted to start on a monday."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DateRange getCurrentYearRange() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return DateRange.fromClosed(currentDate.minusYears(1).with(DateInterval.WEEK.getAdjuster()), currentDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Helper method called when the displayed list of expenses change."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void updateSeries(Task\u003cExpenseHeatMap\u003e newDataTask, XYChart.Series\u003cInteger, Integer\u003e series) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        newDataTask.setOnSucceeded(event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            ExpenseHeatMap heatMap \u003d newDataTask.getValue();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            List\u003cXYChart.Data\u003cInteger, Integer\u003e\u003e data \u003d mapToData(heatMap.getHeatMapValues());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            Platform.runLater(() -\u003e series.getData().setAll(data));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Helper method to convert the heatmap values into a list of {@code XYChart.Data} for the chart to use."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private List\u003cXYChart.Data\u003cInteger, Integer\u003e\u003e mapToData("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            List\u003cEnumMap\u003cDayOfWeek, Amount\u003e\u003e heatmapValues) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return IntStream.range(0, heatmapValues.size())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .boxed()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .flatMap(idx -\u003e heatmapValues.get(idx)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        .entrySet()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        .map(entry -\u003e heatMapEntryToData(idx, entry)))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Converts a heatmap entry with an index representing the week, to a data item for the chart."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private XYChart.Data\u003cInteger, Integer\u003e heatMapEntryToData(Integer week, Map.Entry\u003cDayOfWeek, Amount\u003e entry) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new XYChart.Data\u003c\u003e(week + 1, entry.getKey().getValue(), getAmountValueAdjusted(entry));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Gets the value of the given amounted adjusted by an appropriate scale factor to fit on the chart."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private double getAmountValueAdjusted(Map.Entry\u003cDayOfWeek, Amount\u003e entry) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Math.log10(entry.getValue().amount.doubleValue()) / SCALE_FACTOR;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 148
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/ExpenseTimelineChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static java.util.stream.Collectors.summarizingLong;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.LongSummaryStatistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.function.BinaryOperator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.function.LongUnaryOperator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseGrouping;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseTimeline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.generators.TimelineGenerator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.ui.charts.converters.FormattedDateConverter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.ui.charts.converters.TruncatedNumberConverter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * A chart showing the timeline for the currently displayed expenses."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ExpenseTimelineChart extends ExpenseChart {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String FXML \u003d \"ExpenseTimelineChart.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private LineChart\u003cLong, BigDecimal\u003e timelineChart;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private NumberAxis xAxis;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ObservableData\u003cDateInterval\u003e dateInterval;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ObservableData\u003cExpenseGrouping\u003e expenseGrouping;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final TimelineGenerator timelineGenerator;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final SeriesManager\u003cLong, BigDecimal\u003e seriesManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final FormattedDateConverter formattedDateConverter;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Returns a new {@code ExpenseTimelineChart} with the specified parameters."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenses          An observable wrapper of the currently displayed expenses."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param dateInterval      Selected date dateInterval to display."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param expenseGrouping   Selected expense grouping to use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param timelineGenerator Instance of a class that generates the timeline to be viewed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseTimelineChart(ObservableList\u003c? extends Expense\u003e expenses, ObservableData\u003cDateInterval\u003e dateInterval,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                                ObservableData\u003cExpenseGrouping\u003e expenseGrouping,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                                TimelineGenerator timelineGenerator) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        super(FXML, expenses);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.dateInterval \u003d dateInterval;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.expenseGrouping \u003d expenseGrouping;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        dateInterval.setValue(DateInterval.MONTH);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseGrouping.setValue(ExpenseGrouping.NONE); // Default values"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.timelineGenerator \u003d timelineGenerator;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.seriesManager \u003d new SeriesManager\u003c\u003e("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                expenseGrouping.getValue().getGroupingFunction().group(expenses).keySet(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                timelineChart);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        formattedDateConverter \u003d new FormattedDateConverter(getDateIntervalFormats(dateInterval.getValue()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        xAxis.setTickLabelFormatter(formattedDateConverter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        xAxis.setTickLabelRotation(90);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        yAxis.setTickLabelFormatter(new TruncatedNumberConverter());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        updateTimeline(expenses, expenseGrouping.getValue(), dateInterval.getValue());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        setupListeners();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets up listeners to observe for changes in the relevant observables and update the timeline accordingly."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void setupListeners() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseGrouping.observe(grouping -\u003e updateTimeline(expenses, grouping, dateInterval.getValue()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenses.addListener((ListChangeListener\u003cExpense\u003e) c -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                updateTimeline(c.getList(), expenseGrouping.getValue(), dateInterval.getValue()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        dateInterval.observe(newInterval -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            formattedDateConverter.setFormatter(getDateIntervalFormats(newInterval));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            updateTimeline(expenses, expenseGrouping.getValue(), newInterval);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Updates the timeline upon new expenses, groupings, or intervals. If the numbers/types of series changes,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * {@code setupSeriesMapping} will be called to reset the mappings."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void updateTimeline(List\u003c? extends Expense\u003e expenses, ExpenseGrouping grouping, DateInterval interval) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LongSummaryStatistics statistics \u003d expenses.stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(summarizingLong(expense -\u003e expense.getCreated().dateTime.toLocalDate().toEpochDay()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        double tickUnit \u003d getDateIntervalTickUnit(interval, statistics.getMax() - statistics.getMin());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        updateXAxisRange(statistics.getMin(), statistics.getMax(), tickUnit, interval);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Map\u003cString, ? extends List\u003c? extends Expense\u003e\u003e expenseListMap \u003d grouping.getGroupingFunction().group(expenses);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        seriesManager.updateSeriesSet(expenseListMap.keySet());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        seriesManager.updateSeries(series -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                updateSeries(timelineGenerator.generateAsync(expenseListMap.get(series.getName()), interval), series));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Helper method called to asynchronously update a series."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void updateSeries(Task\u003cExpenseTimeline\u003e newTimelineTask, XYChart.Series\u003cLong, BigDecimal\u003e series) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        newTimelineTask.setOnSucceeded(event -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            ExpenseTimeline timeline \u003d newTimelineTask.getValue();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            List\u003cXYChart.Data\u003cLong, BigDecimal\u003e\u003e data \u003d transformToData(timeline);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            Platform.runLater(() -\u003e series.getData().setAll(data));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Updates the xAxis\u0027 range with the given values, where min and max should be the min and max of the current range"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * shown on the xAxis, and tick unit is dependent on the selected interval."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void updateXAxisRange(long min, long max, double adjustedTickUnit, DateInterval interval) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LongUnaryOperator adjuster \u003d x -\u003e LocalDate.ofEpochDay(x)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .with(interval.getAdjuster())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .plusDays(interval \u003d\u003d DateInterval.DAY ? 0 : 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .toEpochDay();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        xAxis.setLowerBound(adjuster.applyAsLong(min) - adjustedTickUnit);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        xAxis.setUpperBound(adjuster.applyAsLong(max) + adjustedTickUnit);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        xAxis.setTickUnit(adjustedTickUnit);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Maps a list of pairs of date range and amount into a list of formatted data ready to be displayed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private List\u003cXYChart.Data\u003cLong, BigDecimal\u003e\u003e transformToData(ExpenseTimeline timeline) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return timeline.getTimelineValues()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(this::dataFromPair)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Transforms a single pair of {@code DateRange} and {@code Amount} to a data object. The date range is"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * formatted as a string according to the given date dateInterval."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private XYChart.Data\u003cLong, BigDecimal\u003e dataFromPair(Pair\u003cDateRange, Amount\u003e entry) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new XYChart.Data\u003c\u003e(entry.getKey().getStartDate().toEpochDay(), entry.getValue().amount);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Helper method to get the appropriate {@code DateTimeFormatter} to format the range represented by the given"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * interval."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DateTimeFormatter getDateIntervalFormats(DateInterval interval) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        switch (interval) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return DateTimeFormatter.ofPattern(\"MMM/yy\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return DateTimeFormatter.ofPattern(\"yyyy\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            assert false : \"Missing enum value in switch\" + interval;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new UnsupportedOperationException(\"Date formatter not defined for given date interval.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Helper method to get the appropriate tick unit to format xAxis of the chart. The units do not have to be exact,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * and thus are just an approximation."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private double getDateIntervalTickUnit(DateInterval interval, long range) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        BinaryOperator\u003cDouble\u003e adjustment \u003d (tickUnit, maxTicks) -\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                range / tickUnit \u003e maxTicks ? range / maxTicks : tickUnit;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        switch (interval) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return adjustment.apply(1.0, 25.0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return adjustment.apply(7.0, 21.0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return adjustment.apply(30.5, 20.0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return adjustment.apply(365.0, 15.0);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            assert false : \"Missing enum value in switch\" + interval;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new UnsupportedOperationException(\"Tick unit not defined for given date interval.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "weiijiie": 207
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/ProportionalBubbleChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.beans.NamedArg;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.Axis;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.BubbleChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.shape.Ellipse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Implementation of JavaFx {@code BubbleChart} that maintains a proportional bubble."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ProportionalBubbleChart\u003cX, Y\u003e extends BubbleChart\u003cX, Y\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ProportionalBubbleChart(@NamedArg(\"xAxis\") Axis\u003cX\u003e xAxis, @NamedArg(\"yAxis\") Axis\u003cY\u003e yAxis) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        super(xAxis, yAxis);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    protected void layoutPlotChildren() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        super.layoutPlotChildren();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        getData().stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .flatMap(series -\u003e series.getData().stream())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(Data::getNode)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .map(node -\u003e ((StackPane) node).getShape())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .forEach(shape -\u003e ((Ellipse) shape).setRadiusX(((Ellipse) shape).getRadiusY()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 27
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/SeriesManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Manager for the series that an {@code XYChart} displays. Includes operations to update the series set and update"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * each series individually."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * @param \u003cX\u003e Type for the x axis values of the series."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * @param \u003cY\u003e Type for the y axis values of the series."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "class SeriesManager\u003cX, Y\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final XYChart\u003cX, Y\u003e chart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Map\u003cString, XYChart.Series\u003cX, Y\u003e\u003e seriesMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    SeriesManager(Set\u003cString\u003e seriesNames, XYChart\u003cX, Y\u003e chart) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.chart \u003d chart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.seriesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        generateSeriesMap(seriesNames);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Updates the set of series with the given set. If the set names and the current series names differ, the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * series manager will generate a new set of series to replace the old one."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void updateSeriesSet(Set\u003cString\u003e seriesNames) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (!seriesMap.keySet().equals(seriesNames)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            generateSeriesMap(seriesNames);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Updates the managed series according to the provided series updater."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param seriesUpdater Consumer which takes in a managed series that is being displayed on the chart."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void updateSeries(Consumer\u003cXYChart.Series\u003cX, Y\u003e\u003e seriesUpdater) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cXYChart.Series\u003cX, Y\u003e\u003e unusedSeries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (var series : chart.getData()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            String name \u003d series.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            if (seriesMap.containsKey(name)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                seriesUpdater.accept(series);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                unusedSeries.add(series);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        chart.getData().removeAll(unusedSeries);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Idempotent method which updates {@code seriesMap} with new series names input set and generates new series"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * based on those names to replace the current series in the chart."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void generateSeriesMap(Set\u003cString\u003e seriesNames) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        seriesMap.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (var name : seriesNames) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            XYChart.Series\u003cX, Y\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            series.setName(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            seriesMap.put(name, series);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        chart.getData().setAll(seriesMap.values());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 72
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/converters/DayOfWeekConverter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * StringConverter to convert between a numerical value representing a day of week and the day of week\u0027s name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class DayOfWeekConverter extends StringConverter\u003cNumber\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final TextStyle textStyle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Locale locale;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Map\u003cString, DayOfWeek\u003e namesMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Initializes a {@code DayOfWeekConverter} with the given text style, which formats the output day of week"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param textStyle Given text style for day of week formatting."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public DayOfWeekConverter(TextStyle textStyle) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.textStyle \u003d textStyle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.locale \u003d Locale.getDefault();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.namesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (var dayOfWeek : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            namesMap.put(dayOfWeek.getDisplayName(textStyle, locale), dayOfWeek);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String toString(Number number) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(number);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return DayOfWeek.of(number.intValue()).getDisplayName(textStyle, locale);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Number fromString(String string) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(string);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DayOfWeek dayOfWeek \u003d namesMap.get(string);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (dayOfWeek \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new IllegalArgumentException(\"DayOfWeek does not exist for string: \" + string);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return dayOfWeek.getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 52
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/converters/FormattedDateConverter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * StringConverter to convert between the numerical value of an unix Epoch time, and the formatted string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * representation of that date. Formats the string representation according to the provided {@code DateTimeFormatter}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class FormattedDateConverter extends StringConverter\u003cNumber\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public FormattedDateConverter(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.formatter \u003d formatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String toString(Number number) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(number);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return LocalDate.ofEpochDay(number.longValue()).format(formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Number fromString(String string) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(string);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return LocalDate.parse(string, formatter).toEpochDay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the formatter to be used for the dates converted by this converter."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param formatter Formatter to be used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setFormatter(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.formatter \u003d formatter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 41
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/converters/MonthConverter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * StringConverter to convert between a numerical value representing a week in a year, and the name of the month that"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * contains it. Takes into account a date offset."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class MonthConverter extends StringConverter\u003cNumber\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final TextStyle textStyle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Locale locale;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final LocalDate dateOffset;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Map\u003cString, Month\u003e namesMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Initializes a {@code MonthConverter} with the given date offset, where the last month of the year will be the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * same month as the offset. For example, if the date offset fall on February, the numerical value of 12 will map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * to February and vice versa. Additionally takes in a {@code TextStyle} for formatting purposes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param dateOffset Given date offset."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * @param textStyle  Given text style for month name formatting."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public MonthConverter(LocalDate dateOffset, TextStyle textStyle) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.textStyle \u003d textStyle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.locale \u003d Locale.getDefault();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.dateOffset \u003d dateOffset;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.namesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (var month : Month.values()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            namesMap.put(month.getDisplayName(textStyle, locale), month);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private int offsetNumberToMonthName(int monthPosition) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return (monthPosition + dateOffset.getMonthValue()) % 12 + 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private int offsetMonthNameToNumber(int monthNameValue) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return (monthNameValue - dateOffset.getMonthValue() + 11) % 12;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String toString(Number number) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(number);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // 54 weeks / 12 months \u003d 4.5 weeks per month"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Month.of(offsetNumberToMonthName((int) Math.floor(number.doubleValue() / 4.5)))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .getDisplayName(textStyle, locale);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Number fromString(String string) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Objects.requireNonNull(string);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Month month \u003d namesMap.get(string);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        if (month \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new IllegalArgumentException(\"Month does not exist for string: \" + string);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return offsetMonthNameToNumber(month.getValue()) * 4.5;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 68
    }
  },
  {
    "path": "src/main/java/seedu/billboard/ui/charts/converters/TruncatedNumberConverter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * StringConverter to convert between a number and the truncated string representation of that number. If the number\u0027s"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * string representation is longer than a certain specified length, the number will be formatted in scientific notation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * instead."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class TruncatedNumberConverter extends StringConverter\u003cNumber\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final int MAX_CHARS \u003d 19; // Quintillion dollars :)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public String toString(Number number) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String untruncated \u003d number.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return untruncated.length() \u003e MAX_CHARS"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                ? String.format(\"%.2E\", number.doubleValue())"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                : untruncated;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Number fromString(String string) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new BigDecimal(string);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 26
    }
  },
  {
    "path": "src/main/resources/view/ChartBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            minHeight\u003d\"370.0\" prefHeight\u003d\"400.0\" maxHeight\u003d\"400.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            minWidth\u003d\"540.0\" prefWidth\u003d\"540.0\" maxWidth\u003d\"540.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            fx:id\u003d\"chartContainer\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 11
    }
  },
  {
    "path": "src/main/resources/view/ExpenseBreakdownChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    \u003cPieChart fx:id\u003d\"pieChart\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              AnchorPane.topAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              minHeight\u003d\"370.0\" prefHeight\u003d\"400.0\" maxHeight\u003d\"400.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              minWidth\u003d\"540.0\" prefWidth\u003d\"540.0\" maxWidth\u003d\"540.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              title\u003d\"Breakdown\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              legendSide\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cInsets left\u003d\"15.0\" right\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cURL value\u003d\"@PieChart.css\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    \u003c/PieChart\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 31
    }
  },
  {
    "path": "src/main/resources/view/ExpenseHeatMapChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import seedu.billboard.ui.charts.ProportionalBubbleChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    \u003cProportionalBubbleChart fx:id\u003d\"heatMapChart\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                             AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                             AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                             AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                             AnchorPane.topAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                             minHeight\u003d\"370.0\" prefHeight\u003d\"400.0\" maxHeight\u003d\"400.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                             minWidth\u003d\"540.0\" prefWidth\u003d\"540.0\" maxWidth\u003d\"540.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                             title\u003d\"Heatmap\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cNumberAxis fx:id\u003d\"xAxis\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        autoRanging\u003d\"false\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        tickUnit\u003d\"4.5\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        minorTickCount\u003d\"0\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        upperBound\u003d\"54\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003c/NumberAxis\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cNumberAxis fx:id\u003d\"yAxis\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        autoRanging\u003d\"false\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        tickUnit\u003d\"1\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        minorTickCount\u003d\"0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        lowerBound\u003d\"1\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        upperBound\u003d\"7\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003c/NumberAxis\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    \u003c/ProportionalBubbleChart\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 40
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" style\u003d\"-fx-font-size: 15;\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003cLabel fx:id\u003d\"amount\" style\u003d\"-fx-underline: true; -fx-font-size: 20px;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 20,
      "waynefong0401": 2,
      "-": 29,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "  \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "      \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 5,
      "-": 6,
      "weiijiie": 1
    }
  },
  {
    "path": "src/main/resources/view/ExpenseTimelineChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    \u003cLineChart fx:id\u003d\"timelineChart\" maxHeight\u003d\"400.0\" maxWidth\u003d\"540.0\" minHeight\u003d\"370.0\" minWidth\u003d\"540.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "               prefHeight\u003d\"400.0\" prefWidth\u003d\"540.0\" title\u003d\"Timeline\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "               AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cNumberAxis fx:id\u003d\"xAxis\" animated\u003d\"false\" label\u003d\"Date\" forceZeroInRange\u003d\"false\" autoRanging\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003c/NumberAxis\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cNumberAxis fx:id\u003d\"yAxis\" animated\u003d\"false\" label\u003d\"Amount/$\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003c/NumberAxis\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 2,
      "weiijiie": 22
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background: #343d46;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/InertiaTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#116466 , 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    background-color: #343d46 ; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-control-inner-background: #343d46;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #343d46;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#343d46, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4f5b66;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#343d46, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #343d46;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-color: transparent, -fx-background;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-insets: 3px, 3px, 3px, 3px;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #4f5b66 ;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-radius: 5px;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #65737e;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-radius: 5px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #4b51b4;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: #343d46;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     -fx-background-color: #343d46;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     -fx-background-color: #343d46;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     -fx-border-color: #4f5b66;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     -fx-border-top-width: 2px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".status-bar { /* bottom bar */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #aaa9ad;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-border-radius: 5px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #d9b08c;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: #d9b08c;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#343d46 , 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: derive(#343d46 , 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#343d46 , 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".context-menu { /*top bar */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #e8a87c;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".menu-bar { /*top bar */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #e8a87c;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #343d46;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "  -fx-text-fill: #116466;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #343d46;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #343d46;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #343d46;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#343d46, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#343d46, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#343d46, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent derive(#343d46, 20%) transparent derive(#343d46, 20%);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: derive(#343d46, 20%) derive(#343d46, 20%) #ffffff derive(#343d46, 20%);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent, #65737e, transparent, #65737e;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: #e8a87c;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #ff5a5a;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "   -fx-background-color: steelblue;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "  -fx-font-family: \u0027DejaVu Sans\u0027, Arial, Helvetica, sans-serif;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "  -fx-font-size: 1.6em;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "  -fx-padding: 10px;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "  -fx-underline: true;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".chart-plot-background {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-color: gainsboro;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".chart-vertical-grid-lines {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-stroke: silver;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".chart-horizontal-grid-lines {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-stroke: silver;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".chart-alternative-row-fill {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-fill: lightgray;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-stroke-width: 0;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-tick-label-fill: lightgray;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".default-color0.chart-line-symbol {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-color: #ff5a5a, white;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ".default-color0.chart-series-line {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-stroke: #ff5a5a;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".chart-bubble.default-color0 {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    -fx-bubble-fill: #ff6a6a;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 352,
      "waifonglee": 56,
      "weiijiie": 5
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "         title\u003d\"Billboard\" minWidth\u003d\"940\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        \u003cURL value\u003d\"@InertiaTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "          \u003cVBox fx:id\u003d\"expenseList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"360\" prefWidth\u003d\"360\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "          HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "          \u003cVBox styleClass\u003d\"pane-with-border\" minWidth\u003d\"580\" prefWidth\u003d\"580\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"chartBoxPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                   minHeight\u003d\"120\" prefHeight\u003d\"120\" maxHeight\u003d\"120\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 1,
      "-": 52,
      "weiijiie": 21
    }
  },
  {
    "path": "src/main/resources/view/PastelExtensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #d06651; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background: #faebd7 ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 20
    }
  },
  {
    "path": "src/main/resources/view/PastelTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-control-inner-background: #faebd7;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #faebd7;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-color: transparent, -fx-background ;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-insets: 3px, 3px, 3px, 3px ;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-color: #f5e3e6;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-color: #f5e3e6;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".stack-pane { /* Command box background */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     -fx-background-color: derive(#faebd7 , 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".pane-with-border { /* Main background */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     /*-fx-background-color: derive(#faebd7, 20%);*/"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     -fx-background-color: linear-gradient(from 25% 25% to 100% 100%, #d9e4f5 0%, #f5e3e6 74%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     -fx-border-color: derive(#faebd7, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: derive(#faebd7, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7 , 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: derive(#faebd7 , 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7 , 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7 , 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#faebd7 , 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #fadad7;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #fadad7;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#fadad7, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#fadad7, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: derive(#fadad7, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent #faebd7 transparent #faebd7;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-color: #faebd7 #faebd7 #ffffff #faebd7;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: transparent, #faebd7, transparent, #faebd7;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-text-fill: #595959;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-color: #d4aaf4 ;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 349,
      "waifonglee": 10
    }
  },
  {
    "path": "src/main/resources/view/PieChart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    -fx-fill: #DDDDDDDD;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    -fx-padding: 20px;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ".chart-legend-item-symbol {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 11
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" style\u003d\"-fx-border-radius: 5;\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 1,
      "-": 6,
      "weiijiie": 1
    }
  },
  {
    "path": "src/test/java/seedu/billboard/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/core/date/DateRangeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class DateRangeTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private LocalDate startDate \u003d LocalDate.of(2018, 4, 13);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private LocalDate endDate \u003d LocalDate.of(2019, 4, 13);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void from_givenValidDates_returnsEquivalentDateRange() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.from(startDate, endDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(startDate, dateRange.getStartDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(endDate, dateRange.getEndDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(endDate.minus(Period.ofDays(1)), dateRange.getEndDateInclusive());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange minAndMax \u003d DateRange.from(LocalDate.MIN, LocalDate.MAX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.MIN, minAndMax.getStartDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.MAX, minAndMax.getEndDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void from_givenInvalidDates_throwsException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateRange.from(endDate, startDate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                DateRange.from(startDate, startDate.minus(Period.ofDays(1))));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateRange.from(null, startDate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateRange.from(endDate, null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateRange.from(null, null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void fromClosed_givenValidDates_returnsEquivalentDateRange() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.fromClosed(startDate, endDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(startDate, dateRange.getStartDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(endDate.plus(Period.ofDays(1)), dateRange.getEndDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(endDate, dateRange.getEndDateInclusive());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange sameStartAndEndDateRange \u003d DateRange.fromClosed(startDate, startDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(startDate, sameStartAndEndDateRange.getStartDate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(startDate, sameStartAndEndDateRange.getEndDateInclusive());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // represents an empty date -\u003e fromClosed(date, date - 1) is the same as from(date, date) which is a valid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // (empty) date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange endOneBeforeStart \u003d DateRange.fromClosed(startDate, startDate.minus(Period.ofDays(1)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(startDate, endOneBeforeStart.getStartDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(startDate, endOneBeforeStart.getEndDate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(startDate.minus(Period.ofDays(1)), endOneBeforeStart.getEndDateInclusive());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // Date should overflow"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateRange.fromClosed(LocalDate.MAX, LocalDate.MAX));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void fromClosed_givenEndDateEarlierThanStartDate_throwsException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateRange.fromClosed(endDate, startDate));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                DateRange.fromClosed(startDate, startDate.minus(Period.ofDays(2))));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void overPeriod() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // normal period"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange actual \u003d DateRange.overPeriod(startDate, Period.of(0, 1, 2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange expected \u003d DateRange.fromClosed(startDate, LocalDate.of(2018, 5, 14));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // zero period"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange zeroActual \u003d DateRange.overPeriod(startDate, Period.ZERO);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange zeroExpected \u003d DateRange.from(startDate, startDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(zeroExpected, zeroActual);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // negative period"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                DateRange.overPeriod(startDate, Period.of(-1, 1, 1)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.fromClosed(startDate, endDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(dateRange.contains(LocalDate.of(2019, 1, 6)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(dateRange.contains(LocalDate.of(2019, 4, 14)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // value same as start date, returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(dateRange.contains(startDate));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // value same as end date, returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(dateRange.contains(endDate));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // One day date range contains itself"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(DateRange.fromClosed(startDate, startDate).contains(startDate));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void partitionByInterval_weeklyInterval_expectedList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.fromClosed(startDate, endDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateInterval weekInterval \u003d DateInterval.WEEK;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cDateRange\u003e partitioned \u003d dateRange.partitionByInterval(weekInterval);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate expectedStart \u003d startDate.with(TemporalAdjusters.previous(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate expectedEndExclusive \u003d endDate.with(TemporalAdjusters.next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        long expectedNumberOfIntervals \u003d ChronoUnit.WEEKS.between(expectedStart, expectedEndExclusive);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedNumberOfIntervals, partitioned.size()); // size correct"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedStart, partitioned.get(0).getStartDate()); // start date equal"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedEndExclusive, partitioned.get(partitioned.size() - 1).getEndDate()); // end date equal"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (var range : partitioned) { // all date ranges correct"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            assertEquals(weekInterval.getPeriod(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    periodBetweenInclusive(range.getStartDate(), range.getEndDateInclusive()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test void partitionByInterval_monthlyInterval_expectedList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(2018, Month.DECEMBER, 6);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(2019, Month.FEBRUARY, 13);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange range \u003d DateRange.fromClosed(startDate, endDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cDateRange\u003e partitioned \u003d range.partitionByInterval(DateInterval.MONTH);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(3, partitioned.size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // contains December"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dec \u003d partitioned.get(0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.of(2018, Month.DECEMBER, 1), dec.getStartDate());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.of(2018, Month.DECEMBER, 31), dec.getEndDateInclusive());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // contains January"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange jan \u003d partitioned.get(1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.of(2019, Month.JANUARY, 1), jan.getStartDate());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.of(2019, Month.JANUARY, 31), jan.getEndDateInclusive());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // contains February"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange feb \u003d partitioned.get(2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.of(2019, Month.FEBRUARY, 1), feb.getStartDate());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.of(2019, Month.FEBRUARY, 28), feb.getEndDateInclusive());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void partitionByInterval_intervalLargerThanDateRange_listOfSizeOne() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.fromClosed(LocalDate.of(2019, 1, 1),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                LocalDate.of(2019, 1, 2));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateInterval yearInterval \u003d DateInterval.YEAR;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cDateRange\u003e partitioned \u003d dateRange.partitionByInterval(yearInterval);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(1, partitioned.size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRangeOfInterval \u003d partitioned.get(0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(yearInterval.getPeriod(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                periodBetweenInclusive(dateRangeOfInterval.getStartDate(), dateRangeOfInterval.getEndDateInclusive()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange range1 \u003d DateRange.fromClosed(startDate, endDate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange range2 \u003d DateRange.fromClosed(startDate, endDate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(range1, range2); // same start and end dates"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange range3 \u003d DateRange.fromClosed(startDate, LocalDate.of(2018, 6, 12));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(range3, range1); // different end date"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange range4 \u003d DateRange.fromClosed(LocalDate.MIN, endDate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(range4, range1); // different start date"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange range5 \u003d DateRange.overPeriod(LocalDate.MIN, Period.of(1, 2, 3));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(range5, range1); // different start and end dates"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Period periodBetweenInclusive(LocalDate startDateInclusive, LocalDate endDateInclusive) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Period.between(startDateInclusive, endDateInclusive.plus(Period.ofDays(1)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 203
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/observable/ObservableDataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.commons.observable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.mockito.ArgumentMatchers.any;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.mockito.Mockito.never;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.mockito.Mockito.times;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.mockito.Mockito.verify;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.mockito.ArgumentMatchers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.mockito.Mock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.mockito.MockitoAnnotations;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.Observer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ObservableDataTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Mock"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Observer\u003cObject\u003e observerMock;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        MockitoAnnotations.initMocks(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void getAndSetValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // primitive"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ObservableData\u003cInteger\u003e intObservable \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        intObservable.setValue(2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(2, intObservable.getValue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ObservableData\u003cObject\u003e nullObservable \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        nullObservable.setValue(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNull(nullObservable.getValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // object identity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ObservableData\u003cObject\u003e objectObservable \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Object object \u003d new Object();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        objectObservable.setValue(object);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(object, objectObservable.getValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // set same value, no updates"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        objectObservable.observe(observerMock);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        objectObservable.setValue(object);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        verify(observerMock, times(1)).onChanged(any()); // 1 from observe only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void observe() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ObservableData\u003cObject\u003e observable \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e observable.observe(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Object object1 \u003d new Object();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Object object2 \u003d new Object();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.setValue(object1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // Test behavior"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.observe(observerMock);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        verify(observerMock).onChanged(ArgumentMatchers.eq(object1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.setValue(object2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        verify(observerMock).onChanged(ArgumentMatchers.eq(object2));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void observe_observeDuplicate_shouldOnlyReceiveOneUpdate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ObservableData\u003cString\u003e observable \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String test \u003d \"test\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.setValue(test);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // add duplicate, should still only get one update for each observe call (2 total)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.observe(observerMock);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.observe(observerMock);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        verify(observerMock, times(2)).onChanged(ArgumentMatchers.eq(test));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void removeObserver() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ObservableData\u003cInteger\u003e observable \u003d new ObservableData\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.observe(observerMock);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.removeObserver(observerMock);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        observable.setValue(5);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        verify(observerMock, never()).onChanged(5);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 97
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", 1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void checkNonEmpty() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(CollectionUtil.checkNonEmpty(List.of(1, 2, 3, 4)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(CollectionUtil.checkNonEmpty(Set.of(new Object(), new Object())));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(CollectionUtil.checkNonEmpty(Collections.singletonList(DateInterval.MONTH)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(CollectionUtil.checkNonEmpty(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(CollectionUtil.checkNonEmpty(Set.of()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.checkNonEmpty(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 104,
      "weiijiie": 17
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/billboard/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.AMOUNT_DESC_DINNER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DATE_DESC_DINNER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESCRIPTION_DESC_DINNER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.NAME_DESC_DINNER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.DINNER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.storage.JsonBillboardStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonBillboardStorage billboardStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new JsonBillboardStorage(temporaryFolder.resolve(\"billboard.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StorageManager storage \u003d new StorageManager(billboardStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // Setup LogicManager with JsonBillboardIoExceptionThrowingStub and JsonArchiveIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonBillboardStorage billboardStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new JsonBillboardIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StorageManager storage \u003d new StorageManager(billboardStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_DINNER + DESCRIPTION_DESC_DINNER"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + AMOUNT_DESC_DINNER + DATE_DESC_DINNER;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(DINNER).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static class JsonBillboardIoExceptionThrowingStub extends JsonBillboardStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        private JsonBillboardIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public void saveBillboard(ReadOnlyBillboard billboard, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 2,
      "waynefong0401": 18,
      "-": 121,
      "weiijiie": 22
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/AddArchiveCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_DINNER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboardWithArchiveExpenses;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * {@code AddArchiveCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class AddArchiveCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboardWithArchiveExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddArchiveCommand(VALID_ARCHIVE_TAXES, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddArchiveCommand(null, INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullArchiveNameAndExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddArchiveCommand(null, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddArchiveCommand(VALID_ARCHIVE_TAXES,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                INDEX_FIRST_EXPENSE).execute(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AddArchiveCommand firstAddArchiveCommand \u003d new AddArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AddArchiveCommand secondAddArchiveCommand \u003d new AddArchiveCommand(VALID_ARCHIVE_DINNER, INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(firstAddArchiveCommand, firstAddArchiveCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AddArchiveCommand firstAddArchiveCommandCopy \u003d new AddArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(firstAddArchiveCommand, firstAddArchiveCommandCopy);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(1, firstAddArchiveCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(null, firstAddArchiveCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(firstAddArchiveCommand, secondAddArchiveCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 75
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_newExpense_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d validExpense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(new AddCommand(validExpense.getName(), validExpense.getDescription(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                        validExpense.getAmount(), validExpense.getCreated(), tagNames), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validExpense), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expenseInList \u003d model.getBillboard().getExpenses().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d expenseInList.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandFailure(new AddCommand(expenseInList.getName(), expenseInList.getDescription(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                expenseInList.getAmount(), expenseInList.getCreated(), tagNames),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                model, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 12,
      "waynefong0401": 9,
      "-": 26,
      "weiijiie": 8
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.observable.ObservableData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ReadOnlyArchiveWrapper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.TagCountManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null, null, null,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                null, null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExpense.getName(), validExpense.getDescription(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                validExpense.getAmount(), validExpense.getCreated(), getTagNames(validExpense)).execute(modelStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Collections.singletonList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validExpense.getName(), validExpense.getDescription(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                validExpense.getAmount(), validExpense.getCreated(), getTagNames(validExpense));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExpense(validExpense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_EXPENSE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense alice \u003d new ExpenseBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense bob \u003d new ExpenseBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice.getName(), alice.getDescription(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                alice.getAmount(), alice.getCreated(), getTagNames(alice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob.getName(), bob.getDescription(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                bob.getAmount(), bob.getCreated(), getTagNames(bob));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice.getName(), alice.getDescription(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                alice.getAmount(), alice.getCreated(), getTagNames(alice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommandCopy);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(1, addAliceCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(null, addAliceCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(addAliceCommand, addBobCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private List\u003cString\u003e getTagNames(Expense expense) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return expense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public Path getBillboardFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public void setBillboardFilePath(Path billboardFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public void setBillboard(ReadOnlyBillboard newData) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public ReadOnlyBillboard getBillboard() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public Set\u003cTag\u003e retrieveTags(List\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new AssertionError(\"This method should not be called. \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public void incrementCount(Set\u003cTag\u003e toIncrement) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new AssertionError(\"This method should not be called. \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public void decreaseCount(Set\u003cTag\u003e toDecrease) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new AssertionError(\"This method should not be called. \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public List\u003cString\u003e getTagNames() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            throw new AssertionError(\"This method should not be called. \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenses() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public ObservableData\u003cStatisticsFormat\u003e getStatisticsFormat() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void setStatisticsFormat(StatisticsFormat type) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public ObservableData\u003cStatisticsFormatOptions\u003e getStatisticsFormatOptions() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void setStatisticsFormatOptions(StatisticsFormatOptions options) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public Billboard getCombinedBillboard() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public List\u003cString\u003e getArchiveNames() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public void setArchives(ReadOnlyArchiveWrapper archives) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public ReadOnlyArchiveWrapper getArchives() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public boolean hasArchiveExpense(String archiveName, Expense expense) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public boolean hasArchive(String archive) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public void deleteArchive(String archiveName) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public void deleteArchiveExpense(String archiveName, Expense target) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public void addArchiveExpense(String archiveName, Expense expense) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public void addArchive(Archive archive) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredArchiveExpenses(String archiveName) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public void updateFilteredArchiveExpenses(String archiveName, Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public Model getClone() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public void setModel(Model model) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public HashMap\u003cString, FilteredList\u003cExpense\u003e\u003e getFilteredArchives() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        private final UniqueTagList tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        private final TagCountManager count \u003d new TagCountManager();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            List\u003cString\u003e tagNames \u003d expense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            tags.addNewTags(tagNames);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            count.incrementAllCount(expense.getTags());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return this.expense.equals(expense);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public Set\u003cTag\u003e retrieveTags(List\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return tags.retrieveTags(tagNames);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public void incrementCount(Set\u003cTag\u003e toIncrement) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            count.incrementAllCount(toIncrement);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        private final TagCountManager count \u003d new TagCountManager();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            return expensesAdded.stream().anyMatch(expense::equals);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public Set\u003cTag\u003e retrieveTags(List\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return tagNames.stream().map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public void incrementCount(Set\u003cTag\u003e toIncrement) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            count.incrementAllCount(toIncrement);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        public ReadOnlyBillboard getBillboard() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return new Billboard();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 64,
      "waifonglee": 68,
      "waynefong0401": 42,
      "-": 128,
      "weiijiie": 57
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/AddTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class AddTagCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static final List\u003cString\u003e SINGLE_TAG_STUB \u003d new ArrayList\u003c\u003e(Collections.singletonList(\"school\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static final List\u003cString\u003e DOUBLE_TAG_STUB \u003d new ArrayList\u003c\u003e(Arrays.asList(\"school\", \"home\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_addTag_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenses().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(firstExpense).withExistingTags(SINGLE_TAG_STUB.get(0)).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_EXPENSE, SINGLE_TAG_STUB);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedModel.setExpense(firstExpense, editedExpense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_addMultipleTags_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenses().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(firstExpense).withExistingTags(DOUBLE_TAG_STUB.get(0),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                DOUBLE_TAG_STUB.get(1)).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_EXPENSE, DOUBLE_TAG_STUB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedModel.setExpense(firstExpense, editedExpense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenses().size() + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(outOfBoundIndex, SINGLE_TAG_STUB);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_existingTags_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_EXPENSE, Collections.singletonList(\"bills\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandFailure(addTagCommand, model, AddTagCommand.MESSAGE_ADD_TAG_FAILURE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        final AddTagCommand standardCommand \u003d new AddTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                SINGLE_TAG_STUB);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddTagCommand commandWithSameValues \u003d new AddTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                SINGLE_TAG_STUB);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(standardCommand, new ClearCommand());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(standardCommand, new AddTagCommand(INDEX_SECOND_EXPENSE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                SINGLE_TAG_STUB));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different tag names -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(standardCommand, new AddTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                DOUBLE_TAG_STUB));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 105
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_emptyBillboard_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_nonEmptyBillboard_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        expectedModel.setBillboard(new Billboard());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 7,
      "-": 20,
      "weiijiie": 5
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, \"\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, \"\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, \"\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, \"\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, \"\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 5,
      "waynefong0401": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.model.expense.MultiArgPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_NAME_DINNER \u003d \"got dinner\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_NAME_TAXES \u003d \"paid taxes\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_DESCRIPTION_DINNER \u003d \"bought mala from pgp\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_DESCRIPTION_TAXES \u003d \"paid income tax\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_AMOUNT_DINNER \u003d \"21.50\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_AMOUNT_TAXES \u003d \"320.50\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_DATE_DINNER \u003d \"23/04/2018 1900\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_DATE_TAXES \u003d \"11/05/2018\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_TAG_DINNER \u003d \"food\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String VALID_TAG_TAXES \u003d \"bills\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String VALID_ARCHIVE_DINNER \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String VALID_ARCHIVE_TAXES \u003d \"2018 bills\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String NAME_DESC_DINNER \u003d \" \" + PREFIX_NAME + VALID_NAME_DINNER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String NAME_DESC_TAXES \u003d \" \" + PREFIX_NAME + VALID_NAME_TAXES;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DESCRIPTION_DESC_DINNER \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_DINNER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DESCRIPTION_DESC_TAXES \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TAXES;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String AMOUNT_DESC_DINNER \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_DINNER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String AMOUNT_DESC_TAXES \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_TAXES;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DATE_DESC_DINNER \u003d \" \" + PREFIX_DATE + VALID_DATE_DINNER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DATE_DESC_TAXES \u003d \" \" + PREFIX_DATE + VALID_DATE_TAXES;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String TAG_DESC_DINNER \u003d \" \" + PREFIX_TAG + VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public static final String TAG_DESC_TAXES \u003d \" \" + PREFIX_TAG + VALID_TAG_TAXES;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"25.20abc\"; // alphabet not allowed in amount"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"23.12.19 1231\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_DINNER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_TAXES;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DESC_DINNER \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_DINNER)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_DINNER).withAmount(VALID_AMOUNT_DINNER)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withCreatedDateTime(VALID_DATE_DINNER).withTags(VALID_TAG_TAXES).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DESC_TAXES \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_TAXES)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TAXES).withAmount(VALID_AMOUNT_TAXES)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withCreatedDateTime(VALID_DATE_TAXES).withTags(VALID_TAG_DINNER, VALID_TAG_TAXES).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * - the billboard, filtered expense list and selected expense in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Billboard expectedBillboard \u003d new Billboard(actualModel.getBillboard());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenses());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(expectedBillboard, actualModel.getBillboard());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenses());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * {@code model}\u0027s billboard."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenses().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenses().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        final String[] splitName \u003d expense.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Collections.singletonList(splitName[0]));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        model.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(1, model.getFilteredExpenses().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 2,
      "xinmingzh": 4,
      "waifonglee": 2,
      "waynefong0401": 16,
      "-": 68,
      "weiijiie": 40
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/DeleteArchiveCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboardWithArchiveExpenses;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteArchiveCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboardWithArchiveExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteArchiveCommand(VALID_ARCHIVE_TAXES, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteArchiveCommand(null, INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullArchiveNameAndExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteArchiveCommand(null, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteArchiveCommand(VALID_ARCHIVE_TAXES,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                INDEX_FIRST_EXPENSE).execute(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_validExpenseAndIndex_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getCombinedBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense expenseToDelete \u003d expectedModel.getFilteredArchiveExpenses(\"luxury\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.deleteArchiveExpense(\"luxury\", expenseToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        DeleteArchiveCommand deleteArchiveCommand \u003d new DeleteArchiveCommand(\"luxury\", INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteArchiveCommand.MESSAGE_DELETE_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                expenseToDelete.getName(), \"luxury\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandSuccess(deleteArchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_deleteLastExpenseInArchive_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // So that the \"luxury\" archive in model will have only one expense"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense intialRemoveExpense \u003d model.getFilteredArchiveExpenses(\"luxury\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.deleteArchiveExpense(\"luxury\", intialRemoveExpense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getCombinedBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense expenseToDelete \u003d expectedModel.getFilteredArchiveExpenses(\"luxury\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.deleteArchiveExpense(\"luxury\", expenseToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.deleteArchive(\"luxury\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        DeleteArchiveCommand deleteArchiveCommand \u003d new DeleteArchiveCommand(\"luxury\", INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteArchiveCommand.MESSAGE_DELETE_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                expenseToDelete.getName(), \"luxury\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedMessage +\u003d \"\\n\" + String.format(DeleteArchiveCommand.MESSAGE_EMPTY_ARCHIVE_AFTER_DELETE_EXPENSE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \"luxury\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandSuccess(deleteArchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e archiveList \u003d model.getFilteredArchiveExpenses(\"luxury\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(archiveList.size() + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        DeleteArchiveCommand deleteArchiveCommand \u003d new DeleteArchiveCommand(\"luxury\", outOfBoundIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandFailure(deleteArchiveCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_nonExistentArchive_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        DeleteArchiveCommand deleteArchiveCommand \u003d new DeleteArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandFailure(deleteArchiveCommand, model, Messages.MESSAGE_NONEXISTENT_ARCHIVE_ENTERED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final DeleteArchiveCommand standardCommand \u003d new DeleteArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        DeleteArchiveCommand commandWithSameValues \u003d new DeleteArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_SECOND_EXPENSE)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different tag names -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteArchiveCommand(\"luxury\", INDEX_FIRST_EXPENSE)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 127
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and UndoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenses().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenses().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenses().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        showNoExpense(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of billboard list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBillboard().getExpenses().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(1, deleteFirstCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(null, deleteFirstCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no expense."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void showNoExpense(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model.updateFilteredExpenses(p -\u003e false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(model.getFilteredExpenses().isEmpty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 10,
      "waynefong0401": 13,
      "-": 61,
      "weiijiie": 32
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESC_DINNER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESC_TAXES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TAXES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_NAME_TAXES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and UndoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenses().get(0), editedExpense);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenses().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenses().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense editedExpense \u003d expenseInList.withName(VALID_NAME_TAXES).withDescription(VALID_DESCRIPTION_TAXES)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withTags(VALID_TAG_DINNER).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_TAXES)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TAXES).withTags(VALID_TAG_DINNER).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.setExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, new EditCommand.EditExpenseDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenses().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expenseInFilteredList \u003d model.getFilteredExpenses().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(expenseInFilteredList).withName(VALID_NAME_TAXES).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_TAXES).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenses().get(0), editedExpense);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_duplicateExpenseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenses().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(firstExpense).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_duplicateExpenseFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // edit expense in filtered list into a duplicate in billboard"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense expenseInList \u003d model.getBillboard().getExpenses().get(INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                new EditExpenseDescriptorBuilder(expenseInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenses().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                .withName(VALID_NAME_TAXES).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * but smaller than size of billboard"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_invalidExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of billboard list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBillboard().getExpenses().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_TAXES).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, DESC_DINNER);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand.EditExpenseDescriptor copyDescriptor \u003d new EditCommand.EditExpenseDescriptor(DESC_DINNER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EXPENSE, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(standardCommand, new ClearCommand());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(standardCommand, new EditCommand(INDEX_SECOND_EXPENSE, DESC_DINNER));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(standardCommand, new EditCommand(INDEX_FIRST_EXPENSE, DESC_TAXES));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 13,
      "waynefong0401": 22,
      "-": 86,
      "weiijiie": 59
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/EditExpenseDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESC_DINNER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESC_TAXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_AMOUNT_TAXES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TAXES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_NAME_TAXES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditExpenseDescriptor descriptorWithSameValues \u003d new EditExpenseDescriptor(DESC_DINNER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(DESC_DINNER, descriptorWithSameValues);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(DESC_DINNER, DESC_DINNER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(null, DESC_DINNER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(5, DESC_DINNER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(DESC_DINNER, DESC_TAXES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        EditExpenseDescriptor editedDinner \u003d new EditExpenseDescriptorBuilder(DESC_DINNER)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                .withName(VALID_NAME_TAXES).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(DESC_DINNER, editedDinner);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        editedDinner \u003d new EditExpenseDescriptorBuilder(DESC_DINNER).withDescription(VALID_DESCRIPTION_TAXES).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(DESC_DINNER, editedDinner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        editedDinner \u003d new EditExpenseDescriptorBuilder(DESC_DINNER).withAmount(VALID_AMOUNT_TAXES).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(DESC_DINNER, editedDinner);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        editedDinner \u003d new EditExpenseDescriptorBuilder(DESC_DINNER).withTags(VALID_TAG_DINNER).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(DESC_DINNER, editedDinner);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 9,
      "-": 26,
      "weiijiie": 20
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 1,
      "waynefong0401": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/FilterTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.MOVIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.ContainsTagPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class FilterTagCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_zeroTag_noExpenseFound() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        FilterTagCommand command \u003d new FilterTagCommand(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedModel.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenses());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_multipleTags_multipleExpensesFound() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate predicate \u003d preparePredicate(\"bills leisure monday\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        FilterTagCommand command \u003d new FilterTagCommand(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedModel.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(Arrays.asList(BILLS, FOOD, MOVIE), model.getFilteredExpenses());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate firstPredicate \u003d preparePredicate(\"first\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate secondPredicate \u003d preparePredicate(\"second\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        FilterTagCommand filterFirstCommand \u003d new FilterTagCommand(firstPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        FilterTagCommand filterSecondCommand \u003d new FilterTagCommand(secondPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(filterFirstCommand, filterFirstCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        FilterTagCommand filterFirstCommandCopy \u003d new FilterTagCommand(firstPredicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(filterFirstCommand, filterFirstCommandCopy);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(1, filterFirstCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(null, filterFirstCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(filterFirstCommand, filterSecondCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Parses {@code userInput} into a {@code ContainsTagPredicate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private ContainsTagPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String[] tags \u003d userInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            set.add(new Tag(tag));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return new ContainsTagPredicate(set);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 86
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.GROCERIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.MOVIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.model.expense.MultiArgPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate firstPredicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        firstPredicate.setKeywords(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate secondPredicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        secondPredicate.setKeywords(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommandCopy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(1, findFirstCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(null, findFirstCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(findFirstCommand, findSecondCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"  \".split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenses());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"food movie groceries\".split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedModel.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(Arrays.asList(FOOD, GROCERIES, MOVIE), model.getFilteredExpenses());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 10,
      "xinmingzh": 9,
      "waynefong0401": 6,
      "-": 41,
      "weiijiie": 18
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 1,
      "waynefong0401": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/HistoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.history.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class HistoryCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.addCmdHistory(\"history\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //Empty history -\u003e empty history message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        HistoryCommand historyCommand \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertCommandSuccess(historyCommand, model, HistoryCommand.MESSAGE_EMPTY_HISTORY, model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //Not empty history -\u003e history records"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.addCmdHistory(\"history\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertCommandSuccess(historyCommand, model, String.format(CommandHistory.HAVE_HISTORY, \"\\n\\thistory\"), model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 35
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/ListArchiveCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_DINNER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.ListArchiveCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboardWithArchiveExpenses;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListArchiveCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboardWithArchiveExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ListArchiveCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_invalidArchiveName_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ListArchiveCommand listArchiveCommand \u003d new ListArchiveCommand(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandFailure(listArchiveCommand, model, Messages.MESSAGE_INVALID_ARCHIVE_NAME + \"\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_existingArchiveName_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ListArchiveCommand listArchiveCommand \u003d new ListArchiveCommand(\"lalala\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandFailure(listArchiveCommand, model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                Messages.MESSAGE_NONEXISTENT_ARCHIVE_ENTERED + \"\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ListArchiveCommand firstListArchiveCommand \u003d new ListArchiveCommand(VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ListArchiveCommand secondListArchiveCommand \u003d new ListArchiveCommand(VALID_ARCHIVE_DINNER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(firstListArchiveCommand, firstListArchiveCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ListArchiveCommand firstListArchiveCommandCopy \u003d new ListArchiveCommand(VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(firstListArchiveCommand, firstListArchiveCommandCopy);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(1, firstListArchiveCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(null, firstListArchiveCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(firstListArchiveCommand, secondListArchiveCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 68
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/ListArchiveNamesCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboardWithArchiveExpenses;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListArchiveNamesCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model withArchivesModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model noArchivesModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model withArchivesExpectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model noArchivesExpectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        withArchivesModel \u003d new ModelManager(getTypicalBillboardWithArchiveExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        noArchivesModel \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        withArchivesExpectedModel \u003d new ModelManager(withArchivesModel.getCombinedBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        noArchivesExpectedModel \u003d new ModelManager(noArchivesModel.getCombinedBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_listArchiveNames_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String expectedFeedback \u003d \"Here are the existing archive(s):\\n[hobbies],\\n[luxury]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedFeedback);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandSuccess(new ListArchiveNamesCommand(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                withArchivesModel, expectedCommandResult, withArchivesExpectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_noArchivesToList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String expectedFeedback \u003d \"There are no existing archives\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedFeedback);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandSuccess(new ListArchiveNamesCommand(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                noArchivesModel, expectedCommandResult, noArchivesExpectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 44
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 6,
      "-": 28,
      "weiijiie": 5
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/ListTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class ListTagCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_listTags_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedFeedback \u003d \"Here are the existing tags(s):\\n[bills],\\n[friends],\\n[leisure],\\n[monday]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedFeedback);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(new ListTagCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_noTags_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedFeedback \u003d \"There is no existing tag\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        model \u003d new ModelManager(new Billboard(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedFeedback);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(new ListTagCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 40
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getDeleteTypicalBillboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.versionedbillboard.VersionedBillboard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private RedoCommand redo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.clearStateList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.commit(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        redo \u003d new RedoCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertCommandFailure(redo, model, Messages.MESSAGE_NOT_REDOABLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model deleteModel \u003d new ModelManager(getDeleteTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.commit(deleteModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String deleteCmd \u003d \"delete 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CommandResult deleteCommandResult \u003d new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, BILLS),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        VersionedBillboard.addCmd(deleteCmd, deleteCommandResult);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.getUndoModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_REDO_SUCCESS, deleteCmd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertCommandSuccess(redo, model, expectedMessage, deleteModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 40,
      "weiijiie": 5
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/RemoveTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "//@@author waifonglee"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class RemoveTagCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static final List\u003cString\u003e SINGLE_TAG_STUB \u003d new ArrayList\u003c\u003e(Collections.singletonList(\"friends\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static final List\u003cString\u003e DOUBLE_TAG_STUB \u003d new ArrayList\u003c\u003e(Arrays.asList(\"friends\", \"monday\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_removeTag_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense secondExpense \u003d model.getFilteredExpenses().get(INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(secondExpense).withTags(\"monday\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        RemoveTagCommand rmTagCommand \u003d new RemoveTagCommand(INDEX_SECOND_EXPENSE, SINGLE_TAG_STUB);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_RM_TAG_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedModel.setExpense(secondExpense, editedExpense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(rmTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_removeMultipleTags_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense secondExpense \u003d model.getFilteredExpenses().get(INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(secondExpense).removeAllTags().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        RemoveTagCommand rmTagCommand \u003d new RemoveTagCommand(INDEX_SECOND_EXPENSE, DOUBLE_TAG_STUB);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_RM_TAG_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedModel.setExpense(secondExpense, editedExpense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandSuccess(rmTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenses().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        RemoveTagCommand rmTagCommand \u003d new RemoveTagCommand(outOfBoundIndex, SINGLE_TAG_STUB);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandFailure(rmTagCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void execute_removeNonExistingTags_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        RemoveTagCommand rmTagCommand \u003d new RemoveTagCommand(INDEX_SECOND_EXPENSE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                Collections.singletonList(\"transport\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertCommandFailure(rmTagCommand, model, RemoveTagCommand.MESSAGE_RM_TAG_FAILURE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        final RemoveTagCommand standardCommand \u003d new RemoveTagCommand(INDEX_SECOND_EXPENSE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                SINGLE_TAG_STUB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        RemoveTagCommand commandWithSameValues \u003d new RemoveTagCommand(INDEX_SECOND_EXPENSE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                SINGLE_TAG_STUB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(standardCommand, new ClearCommand());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(standardCommand, new RemoveTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                SINGLE_TAG_STUB));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different tag names -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(standardCommand, new RemoveTagCommand(INDEX_SECOND_EXPENSE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                DOUBLE_TAG_STUB));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 106
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/RevertArchiveCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboardWithArchiveExpenses;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class RevertArchiveCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboardWithArchiveExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RevertArchiveCommand(VALID_ARCHIVE_TAXES, null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RevertArchiveCommand(null, INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullArchiveNameAndExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RevertArchiveCommand(null, null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RevertArchiveCommand(VALID_ARCHIVE_TAXES,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                INDEX_FIRST_EXPENSE).execute(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_validExpenseAndIndex_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense newLuxuryExpense \u003d new ExpenseBuilder().withName(\"Airpod Pro\").withArchiveName(\"luxury\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.addArchiveExpense(\"luxury\", newLuxuryExpense);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalBillboardWithArchiveExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.addArchiveExpense(\"luxury\", newLuxuryExpense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense expenseToUnarchive \u003d expectedModel.getFilteredArchiveExpenses(\"luxury\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .get(INDEX_THIRD_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.deleteArchiveExpense(\"luxury\", expenseToUnarchive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.addExpense(expenseToUnarchive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseToUnarchive.archiveTo(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        RevertArchiveCommand revertArchiveCommand \u003d new RevertArchiveCommand(\"luxury\", INDEX_THIRD_EXPENSE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String expectedMessage \u003d String.format(RevertArchiveCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                expenseToUnarchive.getName(), \"luxury\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandSuccess(revertArchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_revertLastExpenseInArchive_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // Adding an archive in model that has only one expense"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense archiveTaxes \u003d new ExpenseBuilder().withArchiveName(VALID_ARCHIVE_TAXES).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        model.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e(Arrays.asList(archiveTaxes))));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Billboard(model.getCombinedBillboard()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense expenseToUnarchive \u003d expectedModel.getFilteredArchiveExpenses(VALID_ARCHIVE_TAXES)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.deleteArchiveExpense(VALID_ARCHIVE_TAXES, expenseToUnarchive);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.deleteArchive(VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModel.addExpense(expenseToUnarchive);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseToUnarchive.archiveTo(\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        RevertArchiveCommand revertArchiveCommand \u003d new RevertArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String expectedMessage \u003d String.format(RevertArchiveCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                expenseToUnarchive.getName(), VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedMessage +\u003d \"\\n\" + String.format(RevertArchiveCommand.MESSAGE_EMPTY_ARCHIVE_AFTER_REVERT_EXPENSE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandSuccess(revertArchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e archiveList \u003d model.getFilteredArchiveExpenses(\"luxury\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(archiveList.size() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        RevertArchiveCommand revertArchiveCommand \u003d new RevertArchiveCommand(\"luxury\", outOfBoundIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandFailure(revertArchiveCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute_nonExistentArchive_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        RevertArchiveCommand revertArchiveCommand \u003d new RevertArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertCommandFailure(revertArchiveCommand, model, Messages.MESSAGE_NONEXISTENT_ARCHIVE_ENTERED);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final RevertArchiveCommand standardCommand \u003d new RevertArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        RevertArchiveCommand commandWithSameValues \u003d new RevertArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(standardCommand.equals(new RevertArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_SECOND_EXPENSE)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // different tag names -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(standardCommand.equals(new RevertArchiveCommand(\"luxury\", INDEX_FIRST_EXPENSE)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 140
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getDeleteTypicalBillboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.versionedbillboard.VersionedBillboard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model deleteModel \u003d new ModelManager(getDeleteTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.clearStateList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.commit(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        UndoCommand undo \u003d new UndoCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertCommandFailure(undo, model, Messages.MESSAGE_NOT_UNDOABLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.commit(deleteModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String deleteCmd \u003d \"delete 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CommandResult deleteCommandResult \u003d new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, BILLS),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                false, false, CommandResult.DEFAULT_LIST_VIEW);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        VersionedBillboard.addCmd(deleteCmd, deleteCommandResult);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_UNDO_SUCCESS, deleteCmd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertCommandSuccess(undo, deleteModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 33,
      "weiijiie": 5
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/AddArchiveCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.AddArchiveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class AddArchiveCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private AddArchiveCommandParser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        parser \u003d new AddArchiveCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String validArgs \u003d INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_ARCHIVE + \"luxury\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseSuccess(parser, validArgs, new AddArchiveCommand(\"luxury\", INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String invalidIndex \u003d \"a \" + PREFIX_ARCHIVE + \"luxury\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseFailure(parser, invalidIndex,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_invalidArchiveName_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String invalidArchiveName \u003d INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseFailure(parser, invalidArchiveName,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 42
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.AMOUNT_DESC_DINNER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.AMOUNT_DESC_TAXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DATE_DESC_DINNER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DATE_DESC_TAXES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESCRIPTION_DESC_DINNER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TAXES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.NAME_DESC_DINNER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.NAME_DESC_TAXES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_AMOUNT_TAXES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TAXES;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_NAME_TAXES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_TAXES;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.DINNER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.TAXES;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(TAXES).withTags(VALID_TAG_TAXES).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Name name \u003d expectedExpense.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Description description \u003d expectedExpense.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Amount amount \u003d expectedExpense.getAmount();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        CreatedDateTime dateTime \u003d expectedExpense.getCreated();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d expectedExpense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + AMOUNT_DESC_TAXES + DATE_DESC_TAXES + TAG_DESC_TAXES,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new AddCommand(name, description, amount, dateTime, tagNames));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_DINNER + NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + AMOUNT_DESC_TAXES + DATE_DESC_TAXES + TAG_DESC_TAXES,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new AddCommand(name, description, amount, dateTime, tagNames));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TAXES + DESCRIPTION_DESC_DINNER + DESCRIPTION_DESC_TAXES"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + AMOUNT_DESC_TAXES + DATE_DESC_TAXES + TAG_DESC_TAXES,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new AddCommand(name, description, amount, dateTime, tagNames));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // multiple amounts - last amounts accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES + AMOUNT_DESC_DINNER"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + AMOUNT_DESC_TAXES + DATE_DESC_TAXES + TAG_DESC_TAXES,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new AddCommand(name, description, amount, dateTime, tagNames));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES + AMOUNT_DESC_TAXES"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + DATE_DESC_DINNER + DATE_DESC_TAXES + TAG_DESC_TAXES,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new AddCommand(name, description, amount, dateTime, tagNames));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expectedExpenseMultipleTags \u003d new ExpenseBuilder(TAXES).withTags(VALID_TAG_TAXES, VALID_TAG_DINNER)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e multipleTags \u003d expectedExpenseMultipleTags.getTags()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                .stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES + AMOUNT_DESC_TAXES"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + TAG_DESC_TAXES + DATE_DESC_TAXES + TAG_DESC_DINNER,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new AddCommand(name, description, amount, dateTime, multipleTags));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(DINNER).withTags().withDescription(\"\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Name name \u003d expectedExpense.getName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Description description \u003d expectedExpense.getDescription();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Amount amount \u003d expectedExpense.getAmount();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        CreatedDateTime dateTime \u003d expectedExpense.getCreated();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d expectedExpense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_DINNER + AMOUNT_DESC_DINNER + DATE_DESC_DINNER,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new AddCommand(name, description, amount, dateTime, tagNames));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_TAXES + DESCRIPTION_DESC_TAXES + AMOUNT_DESC_TAXES,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES + VALID_AMOUNT_TAXES,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_TAXES + VALID_DESCRIPTION_TAXES + VALID_AMOUNT_TAXES,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DESCRIPTION_DESC_TAXES + AMOUNT_DESC_TAXES"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + TAG_DESC_TAXES + TAG_DESC_DINNER, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES + INVALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + TAG_DESC_TAXES + TAG_DESC_DINNER, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES + AMOUNT_DESC_TAXES"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + INVALID_DATE_DESC + TAG_DESC_TAXES + TAG_DESC_DINNER, CreatedDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES + AMOUNT_DESC_TAXES"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_TAXES, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DESCRIPTION_DESC_TAXES + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_TAXES + DESCRIPTION_DESC_TAXES"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + AMOUNT_DESC_TAXES + TAG_DESC_TAXES + TAG_DESC_DINNER,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 31,
      "waynefong0401": 18,
      "-": 51,
      "weiijiie": 49
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/AddTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_TAXES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class AddTagCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private AddTagCommandParser parser \u003d new AddTagCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // One tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddTagCommand expectedCommand \u003d new AddTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new ArrayList\u003c\u003e(Collections.singletonList(VALID_TAG_DINNER)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Multiple tags"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_DINNER + TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedCommand \u003d new AddTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(VALID_TAG_DINNER, VALID_TAG_TAXES)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        //Duplicate tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TAXES + TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedCommand \u003d new AddTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(VALID_TAG_TAXES, VALID_TAG_TAXES)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        //no index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_DINNER, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_invalidTagName_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String userInput \u003d INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 66
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/ArchiveCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.ArchiveCommandParser.MESSAGE_ARCHIVE_COMMANDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.AddArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ListArchiveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ListArchiveNamesCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ArchiveCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final ArchiveCommandParser parser \u003d new ArchiveCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseCommand_listArchiveNames_success() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ListArchiveNamesCommand expectedCommand \u003d new ListArchiveNamesCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedCommand, parser.parse(ListArchiveNamesCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseCommand_listArchive_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ListArchiveCommand expectedCommand \u003d new ListArchiveCommand(VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String actualInput \u003d ListArchiveCommand.COMMAND_WORD + \" \" + VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedCommand, parser.parse(actualInput));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseCommand_addArchive_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AddArchiveCommand expectedCommand \u003d new AddArchiveCommand(VALID_ARCHIVE_TAXES, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String actualInput \u003d AddArchiveCommand.COMMAND_WORD + \" 1 arc/\" + VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedCommand, parser.parse(actualInput));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_ARCHIVE_COMMANDS, () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_ARCHIVE_COMMANDS, () -\u003e parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 48
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/BillboardParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.model.expense.MultiArgPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class BillboardParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private final BillboardParser parser \u003d new BillboardParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Name name \u003d expense.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Description description \u003d expense.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Amount amount \u003d expense.getAmount();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        CreatedDateTime dateTime \u003d expense.getCreated();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d expense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ExpenseUtil.getAddCommand(expense));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(new AddCommand(name, description, amount, dateTime, tagNames), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                + CliSyntax.PREFIX_DESCRIPTION + String.join(\" \", keywords));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(keywords);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertEquals(new FindCommand(predicate), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 7,
      "waifonglee": 12,
      "waynefong0401": 19,
      "-": 66,
      "weiijiie": 10
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/DeleteArchiveCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.DeleteArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteArchiveCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private DeleteArchiveCommandParser parser \u003d new DeleteArchiveCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String validArgs \u003d INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_ARCHIVE + \"luxury\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseSuccess(parser, validArgs, new DeleteArchiveCommand(\"luxury\", INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String invalidIndex \u003d \"a \" + PREFIX_ARCHIVE + \"luxury\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseFailure(parser, invalidIndex,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_invalidArchiveName_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String invalidArchiveName \u003d INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseFailure(parser, invalidArchiveName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 35
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 5,
      "-": 25,
      "weiijiie": 2
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/DisplayStatsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_GROUPING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_INTERVAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.logic.commands.DisplayStatsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseGrouping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.StatisticsFormatOptions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class DisplayStatsCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String BREAKDOWN_ARG \u003d StatisticsFormat.BREAKDOWN.getName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String TIMELINE_ARG \u003d StatisticsFormat.TIMELINE.getName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String WEEK_INTERVAL_OPTION \u003d \" \" + PREFIX_INTERVAL + DateInterval.WEEK.getName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String TAG_GROUPING_OPTION \u003d \" \" + PREFIX_GROUPING + ExpenseGrouping.TAG.getName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DisplayStatsCommandParser parser \u003d new DisplayStatsCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void parse_validArgs_returnsDisplayStatsCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StatisticsFormatOptions emptyOptions \u003d StatisticsFormatOptions.emptyOption();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DisplayStatsCommand expectedCommand \u003d new DisplayStatsCommand(StatisticsFormat.BREAKDOWN, emptyOptions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, BREAKDOWN_ARG, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String trailingWhitespace \u003d TIMELINE_ARG + \"  \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DisplayStatsCommand expectedCommand2 \u003d new DisplayStatsCommand(StatisticsFormat.TIMELINE, emptyOptions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, trailingWhitespace, expectedCommand2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String leadingWhitespace \u003d \"    \" + TIMELINE_ARG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, leadingWhitespace, expectedCommand2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String argsWithTimelineOption \u003d TIMELINE_ARG + WEEK_INTERVAL_OPTION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DisplayStatsCommand expectedCommandWithTimelineOption \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new DisplayStatsCommand("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        StatisticsFormat.TIMELINE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        StatisticsFormatOptions.withOptions(DateInterval.WEEK, null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, argsWithTimelineOption, expectedCommandWithTimelineOption);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String argsWithGroupingOption \u003d TIMELINE_ARG + TAG_GROUPING_OPTION;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DisplayStatsCommand expectedCommandWithGroupingOption \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new DisplayStatsCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        StatisticsFormat.TIMELINE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        StatisticsFormatOptions.withOptions(null, ExpenseGrouping.TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, argsWithGroupingOption, expectedCommandWithGroupingOption);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String argsWithAllOptions \u003d TIMELINE_ARG + TAG_GROUPING_OPTION + WEEK_INTERVAL_OPTION;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DisplayStatsCommand expectedCommandWithAllOptions \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new DisplayStatsCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        StatisticsFormat.TIMELINE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        StatisticsFormatOptions.withOptions(DateInterval.WEEK, ExpenseGrouping.TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, argsWithAllOptions, expectedCommandWithAllOptions);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String emptyInput \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, emptyInput,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayStatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String whitespaceOnly \u003d \"   \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, whitespaceOnly,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayStatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String randomInput \u003d \"qjoij qkpo1d\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, randomInput,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayStatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 74
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.AMOUNT_DESC_DINNER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.AMOUNT_DESC_TAXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DATE_DESC_DINNER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DATE_DESC_TAXES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESCRIPTION_DESC_DINNER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TAXES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.NAME_DESC_DINNER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.NAME_DESC_TAXES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_AMOUNT_DINNER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_AMOUNT_TAXES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DATE_DINNER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DATE_TAXES;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DESCRIPTION_DINNER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TAXES;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_NAME_DINNER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_NAME_TAXES;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_TAXES;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_DINNER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_DINNER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_DINNER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, CreatedDateTime.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // invalid amount followed by valid name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + NAME_DESC_DINNER, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // invalid date followed by a valid amount"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC + AMOUNT_DESC_TAXES,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                CreatedDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // valid amount followed by invalid amount. The test case for invalid amount followed by valid amount"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_TAXES + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expense} being edited,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_DINNER + TAG_DESC_TAXES + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_DINNER + TAG_EMPTY + TAG_DESC_TAXES, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_DINNER + TAG_DESC_TAXES, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_AMOUNT_DESC + VALID_AMOUNT_DINNER"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                        + VALID_DESCRIPTION_DINNER, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_DINNER + DESCRIPTION_DESC_TAXES + DATE_DESC_DINNER"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + AMOUNT_DESC_DINNER + TAG_DESC_DINNER + TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_DINNER)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TAXES).withAmount(VALID_AMOUNT_DINNER)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withCreatedDateTime(VALID_DATE_DINNER).withTags(VALID_TAG_DINNER, VALID_TAG_TAXES)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_TAXES + AMOUNT_DESC_TAXES;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_TAXES)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withAmount(VALID_AMOUNT_TAXES).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_DINNER;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_DINNER).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_DINNER;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_DINNER).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_DINNER;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_DINNER).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_DINNER;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCreatedDateTime(VALID_DATE_DINNER).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withTags(VALID_TAG_DINNER).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_DINNER + AMOUNT_DESC_DINNER"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + TAG_DESC_DINNER + DESCRIPTION_DESC_DINNER + AMOUNT_DESC_DINNER"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + DATE_DESC_DINNER + DATE_DESC_TAXES + DESCRIPTION_DESC_TAXES"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + AMOUNT_DESC_TAXES + TAG_DESC_TAXES + TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_TAXES)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withAmount(VALID_AMOUNT_TAXES)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withCreatedDateTime(VALID_DATE_TAXES)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                .withTags(VALID_TAG_DINNER, VALID_TAG_TAXES, VALID_TAG_DINNER)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_TAXES + DESCRIPTION_DESC_TAXES;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_TAXES)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "                .withAmount(VALID_AMOUNT_TAXES).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_TAXES + INVALID_NAME_DESC + AMOUNT_DESC_TAXES"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                + DATE_DESC_TAXES + NAME_DESC_TAXES;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withAmount(VALID_AMOUNT_TAXES)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withName(VALID_NAME_TAXES)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withCreatedDateTime(VALID_DATE_TAXES)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 1,
      "waynefong0401": 27,
      "-": 112,
      "weiijiie": 84
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/FilterTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_TAXES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.FilterTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.ContainsTagPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class FilterTagCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private FilterTagCommandParser parser \u003d new FilterTagCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseFailure(parser, \"    \","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_invalidTagName_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC, expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_validArgs_returnFilterTagCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Single tag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(new Tag(VALID_TAG_DINNER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        FilterTagCommand expectedCommand \u003d new FilterTagCommand(new ContainsTagPredicate(tags));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_DINNER, expectedCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Multiple tags"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(new Tag(VALID_TAG_TAXES));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedCommand \u003d new FilterTagCommand(new ContainsTagPredicate(tags));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_DINNER + TAG_DESC_TAXES, expectedCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        //Duplicate tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e duplicate \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        duplicate.add(new Tag(VALID_TAG_DINNER));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        duplicate.add(new Tag(VALID_TAG_DINNER));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedCommand \u003d new FilterTagCommand(new ContainsTagPredicate(duplicate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_DINNER + TAG_DESC_DINNER, expectedCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 56
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.model.expense.MultiArgPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertParseSuccess(parser, \" d/Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertParseSuccess(parser, \" d/\\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 6,
      "waynefong0401": 5,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/ListArchiveCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.ListArchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListArchiveCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ListArchiveCommandParser parser \u003d new ListArchiveCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_validArgs_returnsListArchiveCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseSuccess(parser, \"hobbies\", new ListArchiveCommand(\"hobbies\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 18
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"test\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String INVALID_DATE \u003d \"9/12/15/12 3529am\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static final String INVALID_ARCHIVE \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static final String VALID_DESC \u003d \"eating at macs\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String VALID_DATETIME \u003d \"05/03/2019 1234\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static final String VALID_ARCHIVE \u003d \"gorilla\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseAmt_validValueWithoutWhitespace_returnsAmt() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Amount expectedAmt \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedAmt, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseAmt_validValueWithWhitespace_returnsAmt() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String amtWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Amount expectedAmt \u003d new Amount(amtWithWhitespace.trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedAmt, ParserUtil.parseAmount(amtWithWhitespace));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseAmt_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseAmt_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseDesc_validValueWithoutWhitespace_returnsDesc() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Description expectedDesc \u003d new Description(VALID_DESC);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedDesc, ParserUtil.parseDescription(VALID_DESC));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseDesc_validValueWithWhitespace_returnsTrimmedDesc() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String descWithWhitespace \u003d WHITESPACE + VALID_DESC + WHITESPACE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Description expectedDesc \u003d new Description(descWithWhitespace.trim());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedDesc, ParserUtil.parseDescription(descWithWhitespace));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseDesc_validWhitespace_returnsDesc() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String descOfWhitespace \u003d WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Description expectedDesc \u003d new Description(WHITESPACE.trim());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedDesc, ParserUtil.parseDescription(descOfWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseDesc_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseTagName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTagName(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseTagName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTagName(INVALID_TAG));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseTagName_validValueWithoutWhitespace_returnsString() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedTagName \u003d VALID_TAG_1.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedTagName, ParserUtil.parseTagName(VALID_TAG_1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseTagName_validValueWithWhitespace_returnsTrimmedString() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedTagName \u003d tagWithWhitespace.trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedTagName, ParserUtil.parseTagName(tagWithWhitespace));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseTagNames_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTagNames(null));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseTagNames_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTagNames(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseTagNames_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(ParserUtil.parseTagNames(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseTagNames_collectionWithValidTags_returnsTagNamesList() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e actualTagNamesList \u003d ParserUtil.parseTagNames(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e expectedTagNamesList \u003d new ArrayList\u003c\u003e(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedTagNamesList, actualTagNamesList);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void parseCreatedDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCreatedDateTime(null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void parseCreatedDateTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCreatedDateTime(INVALID_DATE));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void parseCreatedDateTime_validValueWithoutWhitespace_returnsCreatedDateTime() throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CreatedDateTime expectedCreatedDateTime \u003d new CreatedDateTime(VALID_DATETIME);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedCreatedDateTime, ParserUtil.parseCreatedDateTime(VALID_DATETIME));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void parseCreatedDateTime_validValueWithWhitespace_returnsTrimmedCreatedDateTime() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String dateTimeWithWhitespace \u003d WHITESPACE + VALID_DATETIME + WHITESPACE;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        CreatedDateTime expected \u003d new CreatedDateTime(VALID_DATETIME);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expected, ParserUtil.parseCreatedDateTime(dateTimeWithWhitespace));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseArchive_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseArchive((String) null));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseArchive_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseArchive(INVALID_ARCHIVE));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseArchive_validValueWithoutWhitespace_returnsTrue() throws Exception {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(VALID_ARCHIVE, ParserUtil.parseArchive(VALID_ARCHIVE));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parseArchive_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_ARCHIVE + WHITESPACE;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(VALID_ARCHIVE, ParserUtil.parseArchive(VALID_ARCHIVE));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 22,
      "waifonglee": 99,
      "waynefong0401": 6,
      "-": 107,
      "weiijiie": 35
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/RemoveTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_TAXES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class RemoveTagCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private RemoveTagCommandParser parser \u003d new RemoveTagCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // One tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_DINNER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        RemoveTagCommand expectedCommand \u003d new RemoveTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new ArrayList\u003c\u003e(Collections.singletonList(VALID_TAG_DINNER)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Multiple tags"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_DINNER + TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedCommand \u003d new RemoveTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(VALID_TAG_DINNER, VALID_TAG_TAXES)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        //Duplicate tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TAXES + TAG_DESC_TAXES;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedCommand \u003d new RemoveTagCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(VALID_TAG_TAXES, VALID_TAG_TAXES)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        //no index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_DINNER, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parse_invalidTagName_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        String userInput \u003d INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 67
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/RevertArchiveCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.logic.commands.RevertArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class RevertArchiveCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private RevertArchiveCommandParser parser \u003d new RevertArchiveCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String validArgs \u003d INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_ARCHIVE + \"luxury\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseSuccess(parser, validArgs, new RevertArchiveCommand(\"luxury\", INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String invalidIndex \u003d \"a \" + PREFIX_ARCHIVE + \"luxury\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseFailure(parser, invalidIndex,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RevertArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void parse_invalidArchiveName_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String invalidArchiveName \u003d INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertParseFailure(parser, invalidArchiveName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RevertArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 35
    }
  },
  {
    "path": "src/test/java/seedu/billboard/logic/parser/TagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.logic.parser.TagCommandParser.MESSAGE_TAG_COMMANDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class TagCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseCommand_addTag() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        final List\u003cString\u003e tagNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tagNames.add(\"school\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        AddTagCommand command \u003d (AddTagCommand) parser.parse(AddTagCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_TAG + tagNames.get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(new AddTagCommand(INDEX_FIRST_EXPENSE, tagNames), command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_TAG_COMMANDS, ()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_TAG_COMMANDS, () -\u003e parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 40
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/ArchiveWrapperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.FOOTBALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.GUCCI_SLIDES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.IPHONE11;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.KPOP_LIGHT_STICK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.TAXES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalArchiveExpenses;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalArchiveWrapper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ArchiveWrapperTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ArchiveWrapper archiveWrapper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper \u003d new ArchiveWrapper(getTypicalArchiveExpenses());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ArchiveWrapper((HashMap\u003cString, Archive\u003e) null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // reset tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e archiveWrapper.resetData(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void resetData_withValidReadOnlyArchiveWrapper_replacesData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArchiveWrapper newData \u003d getTypicalArchiveWrapper();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(newData, archiveWrapper);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // has tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchive_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e archiveWrapper.hasArchive(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchive_archiveNotInArchiveWrapper_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(archiveWrapper.hasArchive(VALID_ARCHIVE_TAXES));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchive_archiveInArchiveWrapper_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(archiveWrapper.hasArchive(VALID_ARCHIVE_TAXES));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper.hasArchiveExpense(VALID_ARCHIVE_TAXES, null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper.hasArchiveExpense(null, TAXES));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_expenseNotInArchive_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(archiveWrapper.hasArchiveExpense(\"luxury\", TAXES));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_expenseInArchive_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.addArchiveExpense(VALID_ARCHIVE_TAXES, TAXES);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(archiveWrapper.hasArchiveExpense(VALID_ARCHIVE_TAXES, TAXES));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // add tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchive_nullArchive_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper.addArchive(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchive_validArchive_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense taxes \u003d new ExpenseBuilder().withArchiveName(VALID_ARCHIVE_TAXES).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e(Arrays.asList(taxes))));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArchiveWrapper expectedArchiveWrapper \u003d new ArchiveWrapper(new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                Arrays.asList(IPHONE11, GUCCI_SLIDES, KPOP_LIGHT_STICK, FOOTBALL, taxes)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedArchiveWrapper, archiveWrapper);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchiveExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper.addArchiveExpense(VALID_ARCHIVE_TAXES, null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchiveExpense_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper.addArchiveExpense(null, TAXES));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // remove tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchive_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper.removeArchive(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchive_existingArchiveName_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.removeArchive(\"luxury\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArchiveWrapper expectedArchiveWrapper \u003d new ArchiveWrapper("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(KPOP_LIGHT_STICK, FOOTBALL)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedArchiveWrapper, archiveWrapper);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchive_nonExistentArchiveName_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.removeArchive(VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArchiveWrapper expectedArchiveWrapper \u003d new ArchiveWrapper(getTypicalArchiveExpenses());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedArchiveWrapper, archiveWrapper);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchiveExpense_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper.removeArchiveExpense(null, KPOP_LIGHT_STICK));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchiveExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper.removeArchiveExpense(\"luxury\", null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchiveExpense_validArchiveNameAndExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.removeArchiveExpense(\"hobbies\", KPOP_LIGHT_STICK);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArchiveWrapper expectedArchiveWrapper \u003d new ArchiveWrapper("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(IPHONE11, GUCCI_SLIDES, FOOTBALL)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedArchiveWrapper, archiveWrapper);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchiveExpense_nonExistentExpenseInExistingArchive_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e archiveWrapper"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .removeArchiveExpense(\"luxury\", KPOP_LIGHT_STICK));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchiveExpense_nonExistentArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archiveWrapper"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .removeArchiveExpense(VALID_ARCHIVE_TAXES, KPOP_LIGHT_STICK));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // other tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchiveExpenses_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.addArchiveExpense(VALID_ARCHIVE_TAXES, TAXES);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                archiveWrapper.getArchiveExpenses(VALID_ARCHIVE_TAXES).remove(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchiveNames_validArchiveNames_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(getTypicalArchiveWrapper().getArchiveNames(), archiveWrapper.getArchiveNames());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getExpenseList_nonEmptyArchives_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(getTypicalArchiveWrapper().getExpenseList(), archiveWrapper.getExpenseList());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getExpenseList_emptyArchives_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArchiveWrapper newData \u003d new ArchiveWrapper(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.resetData(newData);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(), archiveWrapper.getExpenseList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchiveNames_noArchiveNames_success() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArchiveWrapper newData \u003d new ArchiveWrapper(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveWrapper.resetData(newData);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(new HashSet\u003c\u003e(), newData.getArchiveNames());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public void getClone_success() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        ArchiveWrapper aw \u003d getTypicalArchiveWrapper();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        ArchiveWrapper cloned \u003d aw.getClone();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertTrue(aw.equals(cloned));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 205,
      "waynefong0401": 9
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/BillboardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalArchiveExpenses;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboardWithArchiveExpenses;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.TagCountManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class BillboardTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Billboard billboard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        billboard \u003d new Billboard();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(Collections.emptyList(), billboard.getExpenses());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(new HashMap\u003cTag, Integer\u003e(), billboard.getCountManager());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(new HashMap\u003cString, Tag\u003e(), billboard.getUniqueTagList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e billboard.resetData(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void resetData_withValidReadOnlyBillboard_replacesData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Billboard newData \u003d getTypicalBillboard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        billboard.resetData(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(newData, billboard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void resetData_withDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // Two expenses with the same identity fields"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Expense duplicateExpense \u003d new ExpenseBuilder(BILLS).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e newExpenses \u003d Arrays.asList(BILLS, duplicateExpense);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        BillboardStub newData \u003d new BillboardStub(newExpenses, new HashMap\u003c\u003e(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e billboard.resetData(newData));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void filterArchiveExpenses_archiveExpenses_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard newData \u003d getTypicalBillboardWithArchiveExpenses();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        billboard.resetData(newData);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e archivesExpenses \u003d billboard.filterArchiveExpenses();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(getTypicalArchiveExpenses(), archivesExpenses);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void filterArchiveExpenses_nonArchiveExpenses_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard newData \u003d getTypicalBillboard();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        billboard.resetData(newData);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e archivesExpenses \u003d billboard.filterArchiveExpenses();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(), archivesExpenses);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchiveExpenses_archiveExpensesRemoved_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard newData \u003d getTypicalBillboardWithArchiveExpenses();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        billboard.resetData(newData);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ReadOnlyBillboard noArchiveExpensesBillboard \u003d billboard.removeArchiveExpenses();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(getTypicalBillboard(), new Billboard(noArchiveExpensesBillboard));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void removeArchiveExpenses_noArchiveExpensesRemoved_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard newData \u003d getTypicalBillboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        billboard.resetData(newData);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ReadOnlyBillboard noArchiveExpensesBillboard \u003d billboard.removeArchiveExpenses();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(getTypicalBillboard(), new Billboard(noArchiveExpensesBillboard));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e billboard.hasExpense(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void hasExpense_expenseNotInBillboard_returnsFalse() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertFalse(billboard.hasExpense(BILLS));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void hasExpense_expenseInBillboard_returnsTrue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        billboard.addExpense(BILLS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertTrue(billboard.hasExpense(BILLS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e billboard.getExpenses().remove(0));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void getUniqueTagList_modifyMap_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e billboard.getUniqueTagList().remove(0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void getTagCountManager_modifyMap_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e billboard.getCountManager().remove(0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * A stub ReadOnlyBillboard whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private static class BillboardStub implements ReadOnlyBillboard {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        private final UniqueTagList uniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        private final TagCountManager countManager \u003d new TagCountManager();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        BillboardStub(Collection\u003cExpense\u003e expenses, HashMap\u003cString, Tag\u003e tags,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                      HashMap\u003cTag, Integer\u003e count) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            this.uniqueTagList.setTagList(tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            this.countManager.setCountMap(count);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public List\u003cExpense\u003e filterArchiveExpenses() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        public ReadOnlyBillboard removeArchiveExpenses() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public Map\u003cString, Tag\u003e getUniqueTagList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return uniqueTagList.getTagList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        public Map\u003cTag, Integer\u003e getCountManager() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            return countManager.getCountMap();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 61,
      "waifonglee": 35,
      "waynefong0401": 19,
      "-": 49,
      "weiijiie": 12
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.FOOTBALL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.GUCCI_SLIDES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.IPHONE11;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.KPOP_LIGHT_STICK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.TAXES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.model.expense.MultiArgPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.BillboardBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(new Billboard(), new Billboard(modelManager.getBillboard()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // user prefs/gui settings tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userPrefs.setBillboardFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userPrefs.setBillboardFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // Billboard tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setBillboardFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setBillboardFilePath(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setBillboardFilePath_validPath_setsBillboardFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        modelManager.setBillboardFilePath(path);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(path, modelManager.getBillboardFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpense(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void hasExpense_expenseNotInBillboard_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(modelManager.hasExpense(BILLS));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void hasExpense_expenseInBillboard_returnsTrue() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        modelManager.addExpense(BILLS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(modelManager.hasExpense(BILLS));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenses().remove(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // ArchiveWrapper tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchiveNames_noArchiveNames_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(), modelManager.getArchiveNames());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchiveNames_nonEmptyArchiveNames_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cString\u003e expectedArchiveNameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedArchiveNameList.add(VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedArchiveNameList, modelManager.getArchiveNames());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setArchives_nullArchiveWrapper_nullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setArchives(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchives_noArchives_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(new ArchiveWrapper(new ArrayList\u003c\u003e()), modelManager.getArchives());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasArchiveExpense(VALID_ARCHIVE_TAXES, null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasArchiveExpense(null, TAXES));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_nonExistentArchive_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasArchiveExpense(VALID_ARCHIVE_TAXES, TAXES));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_expenseNotInArchive_returnsFalse() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(modelManager.hasArchiveExpense(VALID_ARCHIVE_TAXES, TAXES));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchiveExpense_expenseInArchive_returnsTrue() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expenseList.add(TAXES);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.addArchive(new Archive(VALID_ARCHIVE_TAXES, expenseList));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(modelManager.hasArchiveExpense(VALID_ARCHIVE_TAXES, TAXES));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void hasArchive_nullArchive_throwsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasArchive(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchive_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteArchive(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchive_existingArchiveName_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.deleteArchive(VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchive_nonExistentArchiveName_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.deleteArchive(VALID_ARCHIVE_TAXES);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchiveExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteArchiveExpense(VALID_ARCHIVE_TAXES, null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchiveExpense_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteArchiveExpense(null, TAXES));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchiveExpense_validArchiveNameAndExpense_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.addArchive(new Archive(\"hobbies\", new ArrayList\u003c\u003e(Arrays.asList(KPOP_LIGHT_STICK, FOOTBALL))));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.deleteArchiveExpense(\"hobbies\", KPOP_LIGHT_STICK);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedModelManager.addArchive(new Archive(\"hobbies\", new ArrayList\u003c\u003e(Arrays.asList(FOOTBALL))));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchiveExpense_nonExistentArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .deleteArchiveExpense(VALID_ARCHIVE_TAXES, KPOP_LIGHT_STICK));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteArchiveExpense_nonExistentExpenseInExistingArchive_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.addArchive(new Archive(\"hobbies\", new ArrayList\u003c\u003e(Arrays.asList(KPOP_LIGHT_STICK, FOOTBALL))));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e modelManager.deleteArchiveExpense(\"hobbies\", GUCCI_SLIDES));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchive_nullArchive_throwsNullPointerException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.addArchive(null));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchive_validArchive_success() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.addArchive(new Archive(\"hobbies\", new ArrayList\u003c\u003e(Arrays.asList(KPOP_LIGHT_STICK, FOOTBALL))));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard expectedBillboard \u003d new Billboard();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        expectedBillboard.setExpenses(new ArrayList\u003c\u003e(Arrays.asList(KPOP_LIGHT_STICK, FOOTBALL)));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(expectedBillboard, new UserPrefs());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchiveExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.addArchiveExpense(VALID_ARCHIVE_TAXES, null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addArchiveExpense_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.addArchiveExpense(null, TAXES));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getFilteredArchiveExpenses_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager.addArchive(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredArchiveExpenses"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                (VALID_ARCHIVE_TAXES).remove(0));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getCombinedBillboard_validBillboardArchiveWrapper_success() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard billboard \u003d new Billboard();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(billboard, modelManager.getCombinedBillboard());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // Other tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard billboard \u003d new BillboardBuilder().withExpense(BILLS).withExpense(FOOD)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .withExpense(IPHONE11).withExpense(KPOP_LIGHT_STICK).build();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Billboard differentBillboard \u003d new Billboard();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        modelManager \u003d new ModelManager(billboard, userPrefs);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(billboard, userPrefs);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(modelManager, modelManagerCopy);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(null, modelManager);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(5, modelManager);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // different billboard -\u003e returns false"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(differentBillboard, userPrefs));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String[] keywords \u003d BILLS.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        modelManager.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(billboard, userPrefs));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        modelManager.updateFilteredExpenses(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        differentUserPrefs.setBillboardFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(billboard, differentUserPrefs));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 182,
      "xinmingzh": 4,
      "waynefong0401": 3,
      "-": 90,
      "weiijiie": 28
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setBillboardFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setBillboardFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 17,
      "weiijiie": 2
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/archive/ArchiveTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "package seedu.billboard.model.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_DINNER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_ARCHIVE_TAXES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.TAXES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ArchiveTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final Archive archive \u003d new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullArchiveName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Archive(null, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void constructor_nullExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Archive(VALID_ARCHIVE_DINNER, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchiveName_correctArchiveNameReturned_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(VALID_ARCHIVE_TAXES, archive.getArchiveName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchiveName_incorrectArchiveNameReturned_fail() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(VALID_ARCHIVE_DINNER, archive.getArchiveName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setArchive_nullExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archive.setArchive(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setArchive_emptyExpenseList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archive.add(TAXES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archive.setArchive(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(), archive.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void toString_correctStringReturned_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"Archive name: \" + VALID_ARCHIVE_TAXES, archive.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void toString_incorrectStringReturned_fail() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(\"Archive name: \" + VALID_ARCHIVE_DINNER, archive.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals_sameObject_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(archive, archive);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals_sameValues_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e()), archive);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals_differentTypes_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(1, archive);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals_differentArchive_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(new Archive(VALID_ARCHIVE_DINNER, new ArrayList\u003c\u003e()), archive);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void equals_null_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertNotEquals(null, archive);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archive.contains(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertFalse(archive.contains(BILLS));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archive.add(TAXES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertTrue(archive.contains(TAXES));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archive.add(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void add_duplicateExpense_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archive.add(TAXES);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e archive.add(TAXES));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archive.setExpense(null, TAXES));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archive.setExpense(TAXES, null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e archive.setExpense(TAXES, TAXES));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archive.remove(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e archive.remove(TAXES));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archive.add(TAXES);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archive.remove(TAXES);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Archive expectedArchiveList \u003d new Archive(VALID_ARCHIVE_TAXES, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(expectedArchiveList, archive);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setExpenses_nullUniqueArchive_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archive.setExpenses((Archive) null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archive.setExpenses((List\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e archive"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 169
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/expense/AllContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class AllContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AllContainsKeywordsPredicate firstPredicate \u003d new AllContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AllContainsKeywordsPredicate secondPredicate \u003d new AllContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AllContainsKeywordsPredicate firstPredicateCopy \u003d new AllContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AllContainsKeywordsPredicate predicate \u003d new AllContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Bob\").withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AllContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Bob\").withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AllContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Carol\").withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Carol Alice\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Carol Alice\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AllContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Bob\").withDescription(\"alice\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AllContainsKeywordsPredicate predicate \u003d new AllContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Alice\").withDescription(\"Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AllContainsKeywordsPredicate(Collections.singletonList(\"Carol\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Alice Bob\").withDescription(\"David\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Keywords match amount but does not match name and description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AllContainsKeywordsPredicate(Arrays.asList(\"9.60\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"bills\").withAmount(\"9.60\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"bills\").withAmount(\"9.60\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"bills\").withDescription(\"bills\").withAmount(\"9.60\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 87
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/expense/AmountWithinRangePredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class AmountWithinRangePredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount firstPredicateLowerAmtLimit \u003d new Amount(\"2\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount secondPredicateLowerAmtLimit \u003d new Amount(\"3\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount firstPredicateUpperAmtLimit \u003d new Amount(\"4\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount secondPredicateUpperAmtLimit \u003d new Amount(\"5\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AmountWithinRangePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new AmountWithinRangePredicate(firstPredicateLowerAmtLimit, firstPredicateUpperAmtLimit);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AmountWithinRangePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new AmountWithinRangePredicate(secondPredicateLowerAmtLimit, secondPredicateUpperAmtLimit);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AmountWithinRangePredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new AmountWithinRangePredicate(firstPredicateLowerAmtLimit, firstPredicateUpperAmtLimit);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void test_amountWithinRange_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Amount in between limits"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AmountWithinRangePredicate predicate \u003d new AmountWithinRangePredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new Amount(\"2\"), new Amount(\"4\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"3\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Amount equals lower limit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AmountWithinRangePredicate("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new Amount(\"3\"), new Amount(\"7\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"3\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Amount equals upper limit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AmountWithinRangePredicate("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new Amount(\"5\"), new Amount(\"100\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"100\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Amount (non whole int) in between limits"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AmountWithinRangePredicate("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new Amount(\"10\"), new Amount(\"1000\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"99.9\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Amount (very large) in between limits"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AmountWithinRangePredicate("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new Amount(\"10000000000000\"), new Amount(\"20000000000000\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"15000000000000\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void test_amountNotWithinRange_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Amount smaller than lower limit"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        AmountWithinRangePredicate predicate \u003d new AmountWithinRangePredicate("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new Amount(\"2\"), new Amount(\"4\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withAmount(\"1\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Amount larger than upper limit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new AmountWithinRangePredicate("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new Amount(\"2\"), new Amount(\"4\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withAmount(\"5\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 82
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/expense/CreatedDateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class CreatedDateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CreatedDateTime((String) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String invalidDate \u003d \"june\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CreatedDateTime(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CreatedDateTime.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(CreatedDateTime.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(CreatedDateTime.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(CreatedDateTime.isValidDate(\"2359 23/12/2019\")); // wrong format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(CreatedDateTime.isValidDate(\"32/1/2019 1234\")); // correct format, non existent date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(CreatedDateTime.isValidDate(\"31/1/2019 2401\")); // correct format, non existent time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(CreatedDateTime.isValidDate(\"07/01/2019 12:34\")); // slightly wrong format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(CreatedDateTime.isValidDate(\"23/12/2019 1234\")); // normal date with time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(CreatedDateTime.isValidDate(\"23/12/2019\")); // normal date no time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(CreatedDateTime.isValidDate(\"1/1/2019\")); // date without leading zeros"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(CreatedDateTime.isValidDate(\"01/01/2019\")); // date with leading zeroes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 41
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/expense/DateWithinRangePredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class DateWithinRangePredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime firstPredicateStartDate \u003d new CreatedDateTime(\"1/1/2019\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime secondPredicateStartDate \u003d new CreatedDateTime(\"2/2/2019\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime firstPredicateEndDate \u003d new CreatedDateTime(\"1/1/2019\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime secondPredicateEndDate \u003d new CreatedDateTime(\"2/2/2019\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        DateWithinRangePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new DateWithinRangePredicate(firstPredicateStartDate, firstPredicateEndDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        DateWithinRangePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new DateWithinRangePredicate(secondPredicateStartDate, secondPredicateEndDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        DateWithinRangePredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new DateWithinRangePredicate(firstPredicateStartDate, firstPredicateEndDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void test_dateWithinRange_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Date in between start and end date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        DateWithinRangePredicate predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"1/6/2019\"), new CreatedDateTime(\"1/7/2019\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"2/6/2019\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Date equals start date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"1/6/2019\"), new CreatedDateTime(\"1/7/2019\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"1/6/2019\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Date equals end date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"1/6/2019\"), new CreatedDateTime(\"1/7/2019\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"1/7/2019\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Same date different time"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"1/6/2019 0800\"), new CreatedDateTime(\"1/6/2019 1000\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"1/6/2019 0900\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void test_dateIsNotWithinRange_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Date before start date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        DateWithinRangePredicate predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"1/6/2019\"), new CreatedDateTime(\"1/7/2019\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"30/5/2019\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Date after end date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"1/6/2019\"), new CreatedDateTime(\"1/7/2019\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"2/7/2019\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Same date, time before start time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"1/6/2019 0800\"), new CreatedDateTime(\"1/6/2019 1000\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"1/6/2019 0700\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Same date, time after end time"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"5/6/2019 0800\"), new CreatedDateTime(\"5/6/2019 1000\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"5/6/2019 1100\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // Date before start date, time correct"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new DateWithinRangePredicate("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new CreatedDateTime(\"1/6/2019 0800\"), new CreatedDateTime(\"3/6/2019 1000\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"1/5/2019 0900\").build()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 92
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/expense/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_AMOUNT_TAXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DATE_TAXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TAXES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_NAME_TAXES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.TAXES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expense.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense billsCopy \u003d new ExpenseBuilder(BILLS).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(BILLS, billsCopy);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(BILLS, BILLS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(null, BILLS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(5, BILLS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(BILLS, TAXES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense editedBills \u003d new ExpenseBuilder(BILLS).withName(VALID_NAME_TAXES).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(BILLS, editedBills);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        editedBills \u003d new ExpenseBuilder(BILLS).withDescription(VALID_DESCRIPTION_TAXES).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(BILLS, editedBills);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        editedBills \u003d new ExpenseBuilder(BILLS).withAmount(VALID_AMOUNT_TAXES).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(BILLS, editedBills);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        editedBills \u003d new ExpenseBuilder(BILLS).withCreatedDateTime(VALID_DATE_TAXES).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(BILLS, editedBills);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        editedBills \u003d new ExpenseBuilder(BILLS).withTags(VALID_TAG_DINNER).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(BILLS, editedBills);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 7,
      "-": 28,
      "weiijiie": 29
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/expense/MultiArgPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class MultiArgPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount firstPredicateLowerAmtLimit \u003d new Amount(\"2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount secondPredicateLowerAmtLimit \u003d new Amount(\"3\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount firstPredicateUpperAmtLimit \u003d new Amount(\"4\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Amount secondPredicateUpperAmtLimit \u003d new Amount(\"5\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime firstPredicateStartDate \u003d new CreatedDateTime(\"1/1/2019\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime secondPredicateStartDate \u003d new CreatedDateTime(\"2/2/2019\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime firstPredicateEndDate \u003d new CreatedDateTime(\"2/1/2019\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        CreatedDateTime secondPredicateEndDate \u003d new CreatedDateTime(\"3/2/2019\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate firstPredicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        firstPredicate.setKeywords(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        firstPredicate.setDateRange(firstPredicateStartDate, firstPredicateEndDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        firstPredicate.setAmtRange(firstPredicateLowerAmtLimit, firstPredicateUpperAmtLimit);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate secondPredicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        secondPredicate.setKeywords(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        secondPredicate.setDateRange(secondPredicateStartDate, secondPredicateEndDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        secondPredicate.setAmtRange(secondPredicateLowerAmtLimit, secondPredicateUpperAmtLimit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate firstPredicateCopy \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        firstPredicateCopy.setKeywords(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        firstPredicateCopy.setDateRange(firstPredicateStartDate, firstPredicateEndDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        firstPredicateCopy.setAmtRange(firstPredicateLowerAmtLimit, firstPredicateUpperAmtLimit);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void test_argumentsWithinLimit_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 3 Limits"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"book\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/8/2019\"), new CreatedDateTime(\"20/8/2019\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"2\"), new Amount(\"20\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"buy book\").withCreatedDateTime(\"3/8/2019\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .withAmount(\"10\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 2 Limits"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"book\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/8/2019\"), new CreatedDateTime(\"20/8/2019\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"buy book\").withCreatedDateTime(\"2/8/2019\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"book\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"2\"), new Amount(\"20\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"buy book\").withAmount(\"18\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/8/2019\"), new CreatedDateTime(\"20/8/2019\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"2\"), new Amount(\"20\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"3/8/2019\").withAmount(\"18\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 1 Limit"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"book\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"buy book\").build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/8/2019\"), new CreatedDateTime(\"20/8/2019\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"6/8/2019\").build()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"2\"), new Amount(\"20\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"18\").build()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void test_argumentsNotWithinLimit_returnsFalse() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 3 conditions, none met"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"book\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/8/2019\"), new CreatedDateTime(\"20/8/2019\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"2\"), new Amount(\"20\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 3 conditions, 1 met"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"car\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"6/8/2019\"), new CreatedDateTime(\"30/9/2019\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"59\"), new Amount(\"880\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"buy car\").build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"2/9/2019\").build()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withAmount(\"666\").build()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 3 conditions, 2 met"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"boat\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"6/8/2009\"), new CreatedDateTime(\"30/9/2010\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"500\"), new Amount(\"555\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"buy boat\").withCreatedDateTime(\"2/8/2019\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"20/8/2009\").withAmount(\"522\").build()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"sell boat\").withAmount(\"544\").build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 2 conditions, 1 met"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"book\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/8/2019\"), new CreatedDateTime(\"20/8/2019\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"buy book\").build()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"2/8/2019\").build()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 2 conditions, none met"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"lunch\", \"school\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/8/2018\"), new CreatedDateTime(\"20/8/2018\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().build()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        // 1 condition, none met"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Arrays.asList(\"book\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().build()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setKeywords_singletonList_setPredicateSuccess() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setKeywords(Collections.singletonList(\"book\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"buy book\").build()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDateRange_startDateAndEndDate_setPredicateSuccess() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/1/2019\"), new CreatedDateTime(\"1/3/2109\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"1/2/2019\").build()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDateRange_startDateNoEndDate_setPredicateSuccess() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(new CreatedDateTime(\"1/1/2019\"), null);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"1/2/2019\").build()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDateRange_endDateNoStartDate_setPredicateSuccess() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setDateRange(null, new CreatedDateTime(\"1/3/2109\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCreatedDateTime(\"1/2/2019\").build()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setAmtRange_lowerLimitAndUpperLimit_setPredicateSuccess() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"20\"), new Amount(\"50\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"30\").build()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setAmtRange_lowerLimitNoUpperLimit_setPredicateSuccess() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(new Amount(\"20\"), null);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"30\").build()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setAmtRange_upperLimitNoLowerLimit_setPredicateSuccess() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MultiArgPredicate predicate \u003d new MultiArgPredicate();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        predicate.setAmtRange(null, new Amount(\"50\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withAmount(\"30\").build()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 207
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/expense/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/expense/UniqueExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_AMOUNT_TAXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.TAXES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class UniqueExpenseListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(expenseList.contains(BILLS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(expenseList.contains(BILLS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.add(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void add_duplicateExpense_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e expenseList.add(BILLS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.setExpense(null, BILLS));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.setExpense(BILLS, null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e expenseList.setExpense(BILLS, BILLS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense_editedExpenseIsSameExpense_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        expenseList.setExpense(BILLS, BILLS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedExpenseList.add(BILLS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense_editedExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(BILLS).withAmount(VALID_AMOUNT_TAXES).withTags(VALID_TAG_DINNER)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        expenseList.setExpense(BILLS, editedAlice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedExpenseList.add(editedAlice);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense_editedExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        expenseList.setExpense(BILLS, TAXES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedExpenseList.add(TAXES);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpense_editedExpenseHasNonUniqueIdentity_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(TAXES);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e expenseList.setExpense(BILLS, TAXES));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.remove(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e expenseList.remove(BILLS));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.remove(BILLS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpenses_nullUniqueExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.setExpenses((ExpenseList) null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpenses_uniqueExpenseList_replacesOwnListWithProvidedUniqueExpenseList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedExpenseList.add(TAXES);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        expenseList.setExpenses(expectedExpenseList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.setExpenses((List\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expenseList.add(BILLS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d Collections.singletonList(TAXES);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.expenseList.setExpenses(expenseList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expectedExpenseList.add(TAXES);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expectedExpenseList, this.expenseList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void setExpenses_listWithDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e listWithDuplicateExpenses \u003d Arrays.asList(BILLS, BILLS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e expenseList.setExpenses(listWithDuplicateExpenses));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            -\u003e expenseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 12,
      "-": 80,
      "weiijiie": 70
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/history/CommandHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class CommandHistoryTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void peekNextCmd() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //Empty command history"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(\"\", CommandHistory.peekNextCmd());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.addCmdHistory(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(\"first\", CommandHistory.peekNextCmd());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(\"first\", CommandHistory.peekNextCmd());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void peekPreviousCmd() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //Empty command history"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(CommandHistory.peekPreviousCmd(), \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.addCmdHistory(\"first\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(\"\", CommandHistory.peekPreviousCmd());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.peekNextCmd();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(\"\", CommandHistory.peekPreviousCmd());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.addCmdHistory(\"second\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.peekNextCmd();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        CommandHistory.peekNextCmd();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(\"second\", CommandHistory.peekPreviousCmd());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 38
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/statistics/formats/FilledExpenseBreakdownTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.Matchers.equalTo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class FilledExpenseBreakdownTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void constructor_nullInputs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FilledExpenseBreakdown(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // Based off the expenses found in TypicalExpenses"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void getBreakdownValues_normalInput_returnsEquivalentMap() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e typicalExpenses \u003d TypicalExpenses.getTypicalExpenses();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Map\u003cString, List\u003cExpense\u003e\u003e testMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        typicalExpenses.forEach(expense -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                expense.getTags().forEach(tag -\u003e testMap.merge(tag.tagName, List.of(expense), (list1, list2) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        List\u003cExpense\u003e newList \u003d new ArrayList\u003c\u003e(list1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        newList.addAll(list2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        return newList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        FilledExpenseBreakdown breakdown \u003d new FilledExpenseBreakdown(testMap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Map\u003cString, ? extends List\u003c ? extends Expense\u003e\u003e actualValues \u003d breakdown.getBreakdownValues();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualValues.entrySet(), equalTo(testMap.entrySet()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 44
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/statistics/formats/FilledExpenseTimelineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.Matchers.hasItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class FilledExpenseTimelineTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final Function\u003cAmount, Expense\u003e expenseFromAmount \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        amount -\u003e new Expense(new Name(\"blank\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new Description(\"\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                amount,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new CreatedDateTime(\"01/01/2019\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void constructor_numberOfIntervalsAndSizeOfAggregateExpenseListMismatch_throwsException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.fromClosed(LocalDate.of(2016, 6, 12),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                LocalDate.of(2017, 6, 21));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateInterval interval \u003d DateInterval.MONTH; // 12 months"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cList\u003cExpense\u003e\u003e aggregateExpenses \u003d IntStream.range(0, 11)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .mapToObj(i -\u003e Collections.singletonList(expenseFromAmount.apply(new Amount(i + \".70\"))))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList()); // 11 aggregate expenses"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new FilledExpenseTimeline(interval, dateRange.partitionByInterval(interval), aggregateExpenses));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void constructor_nullInputs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new FilledExpenseTimeline(null, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new FilledExpenseTimeline(DateInterval.MONTH, null, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new FilledExpenseTimeline(DateInterval.MONTH, new ArrayList\u003c\u003e(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void getTimeline_oneInterval_expectedMap() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.fromClosed(LocalDate.of(2019, 1, 1),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                LocalDate.of(2019, 1, 6));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateInterval interval \u003d DateInterval.WEEK;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cList\u003cExpense\u003e\u003e aggregateExpense \u003d Collections.singletonList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                Collections.singletonList(expenseFromAmount.apply(new Amount(\"1.50\"))));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cPair\u003cDateRange, Amount\u003e\u003e actual \u003d new FilledExpenseTimeline("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                interval, dateRange.partitionByInterval(interval), aggregateExpense)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .getTimelineValues();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actual, hasItem(new Pair\u003c\u003e(dateRange.partitionByInterval(interval).get(0), new Amount(\"1.50\"))));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void getTimeline_manyIntervals_expectedMap() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateRange dateRange \u003d DateRange.fromClosed(LocalDate.of(2000, 1, 4),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                LocalDate.of(2000, 12, 2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateInterval interval \u003d DateInterval.MONTH;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cList\u003cExpense\u003e\u003e aggregateExpenses \u003d IntStream.rangeClosed(1, 12)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .mapToObj(i -\u003e Collections.singletonList(expenseFromAmount.apply(new Amount(i + \".20\"))))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cPair\u003cDateRange, Amount\u003e\u003e actual \u003d new FilledExpenseTimeline("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                interval, dateRange.partitionByInterval(interval), aggregateExpenses)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .getTimelineValues();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 12; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            DateRange range \u003d DateRange.fromClosed(LocalDate.of(2000, i, 1),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    LocalDate.of(2000, i, 1).with(TemporalAdjusters.lastDayOfMonth()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            Amount amount \u003d new Amount(i + \".20\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            assertEquals(new Pair\u003c\u003e(range, amount), actual.get(i - 1)); // zero based"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 101
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/statistics/formats/StatisticsFormatOptionsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "class StatisticsFormatOptionsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void emptyOptions() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StatisticsFormatOptions emptyOption \u003d StatisticsFormatOptions.emptyOption();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Optional.empty(), emptyOption.getNewGrouping());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Optional.empty(), emptyOption.getNewDateInterval());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void withOptions_allNullInputs_isEmptyOption() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StatisticsFormatOptions emptyOption \u003d StatisticsFormatOptions.withOptions(null, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(StatisticsFormatOptions.emptyOption(), emptyOption);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Optional.empty(), emptyOption.getNewGrouping());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Optional.empty(), emptyOption.getNewDateInterval());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void withOptions_combinationOfNullAndNonNullInputs_expectedResults() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StatisticsFormatOptions intervalOption \u003d StatisticsFormatOptions.withOptions(DateInterval.WEEK, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Optional.of(DateInterval.WEEK), intervalOption.getNewDateInterval());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Optional.empty(), intervalOption.getNewGrouping());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        StatisticsFormatOptions groupingOption \u003d StatisticsFormatOptions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .withOptions(null, ExpenseGrouping.TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Optional.of(ExpenseGrouping.TAG), groupingOption.getNewGrouping());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(Optional.empty(), groupingOption.getNewDateInterval());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 39
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/statistics/generators/BreakdownGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.generators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.CoreMatchers.not;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.GROCERIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.MOVIE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.hamcrest.collection.IsMapContaining;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseBreakdown;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class BreakdownGeneratorTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final BreakdownGenerator breakdownGenerator \u003d new BreakdownGenerator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void generate_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e breakdownGenerator.generate(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void generate_emptyList_returnsExpenseBreakdownWithEmptyMap() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseBreakdown actualBreakdown \u003d breakdownGenerator.generate(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(actualBreakdown.getBreakdownValues().isEmpty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void generate_listOfExpensesWithNoTags_returnsExpenseBreakdownWithEmptyMap() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // GROCERIES in TypicalExpenses has no tags"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseBreakdown actualBreakdown \u003d breakdownGenerator.generate(Collections.singletonList(GROCERIES));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertTrue(actualBreakdown.getBreakdownValues().isEmpty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void generate_listOfOneExpenseWithSomeTags_returnsCorrectExpenseBreakdown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // FOOD in TypicalExpenses has 2 tags, \"monday\" and \"friends\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseBreakdown actualBreakdown \u003d breakdownGenerator.generate(Collections.singletonList(FOOD));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualBreakdown.getBreakdownValues(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                IsMapContaining.hasEntry(\"monday\", Collections.singletonList(FOOD)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualBreakdown.getBreakdownValues(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                IsMapContaining.hasEntry(\"friends\", Collections.singletonList(FOOD)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void generate_listOfExpensesWithSharedTags_returnsExpenseBreakdownWithExpensesUnderSameTag() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // FOOD in TypicalExpenses has 2 tags, \"monday\" and \"friends\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Expense testExpense \u003d new ExpenseBuilder().withTags(\"monday\", \"friends\", \"test\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e expenses \u003d List.of(FOOD, testExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseBreakdown actualBreakdown \u003d breakdownGenerator.generate(expenses);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Map\u003cString, ? extends List\u003c? extends Expense\u003e\u003e actualMap \u003d actualBreakdown.getBreakdownValues();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualMap, IsMapContaining.hasEntry(\"monday\", List.of(FOOD, testExpense)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualMap, IsMapContaining.hasEntry(\"friends\", List.of(FOOD, testExpense)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualMap,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                IsMapContaining.hasEntry(\"test\", Collections.singletonList(testExpense)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // Based of the expenses in TypicalExpenses#getTypicalExpenses"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void generate_generalCase_returnsCorrectExpenseBreakdown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseBreakdown actualBreakdown \u003d breakdownGenerator.generate(TypicalExpenses.getTypicalExpenses());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Map\u003cString, ? extends List\u003c? extends Expense\u003e\u003e actualMap \u003d actualBreakdown.getBreakdownValues();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualMap, IsMapContaining.hasEntry(\"bills\", Collections.singletonList(BILLS)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualMap, IsMapContaining.hasEntry(\"monday\", Collections.singletonList(FOOD)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualMap, IsMapContaining.hasEntry(\"friends\", Collections.singletonList(FOOD)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualMap, not(IsMapContaining.hasValue(GROCERIES)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualMap, IsMapContaining.hasEntry(\"leisure\", Collections.singletonList(MOVIE)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 85
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/statistics/generators/HeatMapGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.generators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.Matchers.aMapWithSize;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.Matchers.anEmptyMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.Matchers.empty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.Matchers.hasEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.Matchers.hasSize;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "class HeatMapGeneratorTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final HeatMapGenerator heatMapGenerator \u003d new HeatMapGenerator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void generate_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e heatMapGenerator.generate(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e heatMapGenerator.generate(new ArrayList\u003c\u003e(), null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                heatMapGenerator.generate(null, DateRange.from(LocalDate.MIN, LocalDate.MIN.plusYears(1))));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void generate_emptyListInput_returnsEmptyOutput() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatMapGenerator.generate(new ArrayList\u003c\u003e()).getHeatMapValues(), is(empty()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // Based of expenses list from {@code TypicalExpenses#getTypicalExpenses}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void generate_nonEmptyList_returnsCorrectExpenseHeatMap() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cExpense\u003e expenses \u003d TypicalExpenses.getTypicalExpenses();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cEnumMap\u003cDayOfWeek, Amount\u003e\u003e heatmapValues \u003d heatMapGenerator.generate(expenses).getHeatMapValues();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // either size 54 or 55 depending on whether additional week was added when"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues, hasSize(54));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues.get(0), is(anEmptyMap()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues.get(53), is(aMapWithSize(1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues.get(53), hasEntry(DayOfWeek.TUESDAY, new Amount(\"23.50\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues.get(48), is(aMapWithSize(1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues.get(48), hasEntry(DayOfWeek.SATURDAY, new Amount(\"4.20\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues.get(47), is(aMapWithSize(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues.get(47), hasEntry(DayOfWeek.TUESDAY, new Amount(\"10.00\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(heatmapValues.get(30), is(aMapWithSize(1)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 63
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/statistics/generators/TimelineGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.model.statistics.generators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.CoreMatchers.instanceOf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.hamcrest.Matchers.hasItems;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.GROCERIES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.MOVIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalExpenses;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateInterval;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.EmptyExpenseTimeline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.ExpenseTimeline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.statistics.formats.FilledExpenseTimeline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class TimelineGeneratorTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final TimelineGenerator timelineGenerator \u003d new TimelineGenerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void generate_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e timelineGenerator.generate(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                timelineGenerator.generate(null, null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                timelineGenerator.generate(Collections.singletonList(TypicalExpenses.BILLS), null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void generate_emptyList_returnsEmptyExpenseTimeline() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseTimeline timeline \u003d timelineGenerator.generate(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(timeline, is(instanceOf(EmptyExpenseTimeline.class)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    // Based of expenses list from {@code TypicalExpenses#getTypicalExpenses}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void generate_nonEmptyList_returnsCorrectExpenseTimeline() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        DateInterval interval \u003d DateInterval.MONTH;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ExpenseTimeline timeline \u003d timelineGenerator.generate(getTypicalExpenses(), interval);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(timeline, is(instanceOf(FilledExpenseTimeline.class))); // check type"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(DateInterval.MONTH, timeline.getDateInterval()); // check interval"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // check pairs list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        List\u003cPair\u003cDateRange, Amount\u003e\u003e actualTimeline \u003d timeline.getTimelineValues();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThat(actualTimeline, hasItems("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new Pair\u003c\u003e(getAdjustedDateRangeWithIntervalFromExpense(BILLS, interval), new Amount(\"350.25\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new Pair\u003c\u003e(getAdjustedDateRangeWithIntervalFromExpense(MOVIE, interval), new Amount(\"14.20\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new Pair\u003c\u003e(getAdjustedDateRangeWithIntervalFromExpense(GROCERIES, interval), new Amount(\"23.50\")))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DateRange getAdjustedDateRangeWithIntervalFromExpense(Expense expense, DateInterval interval) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        LocalDate start \u003d expense.getCreated().dateTime.toLocalDate().with(interval.getAdjuster());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return DateRange.overPeriod(start, interval.getPeriod());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 76
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/tag/ContainsTagPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class ContainsTagPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e firstPredicateTagNameList \u003d new HashSet\u003c\u003e(Collections.singletonList(new Tag(\"first\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e secondPredicateTagNameList \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(\"first\"), new Tag(\"second\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate firstPredicate \u003d new ContainsTagPredicate(firstPredicateTagNameList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate secondPredicate \u003d new ContainsTagPredicate(secondPredicateTagNameList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate firstPredicateCopy \u003d new ContainsTagPredicate(firstPredicateTagNameList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void test_tagContainsTagName_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // One tag name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate predicate \u003d new ContainsTagPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                new HashSet\u003c\u003e(Collections.singletonList(new Tag(\"school\"))));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withTags(\"school\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Multiple tag names"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        predicate \u003d new ContainsTagPredicate(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"school\"), new Tag(\"cs\"))));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withTags(\"school\", \"cs\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Only one matching tag name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        predicate \u003d new ContainsTagPredicate(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"school\"), new Tag(\"cs\"))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withTags(\"school\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void test_tagDoesNotContainTagNames_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        //empty tag name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        ContainsTagPredicate predicate \u003d new ContainsTagPredicate(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withTags(\"school\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Non-matching tag name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        predicate \u003d new ContainsTagPredicate(new HashSet\u003c\u003e(Collections.singletonList(new Tag(\"drinks\"))));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withTags(\"food\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Keywords match description and amount but does not match name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        predicate \u003d new ContainsTagPredicate(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"food\"))));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"food\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                .withDescription(\"bought food\").withAmount(\"9.60\").withTags(\"school\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        // Case sensitive"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        predicate \u003d new ContainsTagPredicate(new HashSet\u003c\u003e(Collections.singletonList(new Tag(\"drinks\"))));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withTags(\"DRINKS\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 77
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/tag/TagCountManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class TagCountManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final TagCountManager count \u003d new TagCountManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void contains_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e count.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void contains_tagNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Assertions.assertFalse(count.contains(new Tag(\"ALICE\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void contains_tagInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.add(new Tag(\"ALICE\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(count.contains(new Tag(\"ALICE\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void add_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e count.add(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void add_existingTag_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cTag, Integer\u003e tags \u003d new HashMap\u003cTag, Integer\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.put(new Tag(\"test\"), 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e count.add(new Tag(\"test\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void add_newTag_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.add(new Tag(\"test\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(count.contains(new Tag(\"test\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void addNewTags_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e count.addNewTags(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void addNewTags_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(new Tag(\"test2\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(new Tag(\"test3\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.addNewTags(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(count.contains(new Tag(\"test2\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(count.contains(new Tag(\"test3\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementCount_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e count.incrementCount(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void increment_newTag_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e count.incrementCount(new Tag(\"test\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementCount_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cTag, Integer\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag drinks \u003d new Tag(\"drinks\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(drinks, 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(expected);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.replace(drinks, 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.incrementCount(drinks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expected, count.getCountMap());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementAllCount_nullTags_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e count.incrementAllCount(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementAllCount_tagsInList_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cTag, Integer\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag drinks \u003d new Tag(\"drinks\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag food \u003d new Tag(\"food\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(drinks, 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(food, 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(expected);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.replace(drinks, 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.replace(food, 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(drinks);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(food);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.incrementAllCount(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expected, count.getCountMap());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void incrementAllCount_tagsNotInList_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cTag, Integer\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag drinks \u003d new Tag(\"drinks\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag food \u003d new Tag(\"food\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(drinks, 0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(expected);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.replace(drinks, 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(food, 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(drinks);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(food);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.incrementAllCount(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expected, count.getCountMap());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void decreaseCount_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e count.decreaseCount(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void decreaseCount_newTag_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e count.decreaseCount(new Tag(\"test\")));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void decreaseCount_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cTag, Integer\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag drinks \u003d new Tag(\"drinks\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(drinks, 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(expected);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.replace(drinks, 0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.decreaseCount(drinks);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expected, count.getCountMap());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void decreaseAllCount_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cTag, Integer\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag drinks \u003d new Tag(\"drinks\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag food \u003d new Tag(\"food\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(drinks, 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(food, 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(expected);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.replace(drinks, 0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.replace(food, 0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(drinks);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.add(food);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.decreaseAllCount(tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expected, count.getCountMap());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void removeZeroCount_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cTag, Integer\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag drinks \u003d new Tag(\"drinks\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Tag food \u003d new Tag(\"food\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(drinks, 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(food, 0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(expected);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.remove(food);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.removeZeroCount();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expected, count.getCountMap());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setCount_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e count.setCountMap(null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setCount_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cTag, Integer\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(new Tag(\"test\"), 10);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        count.setCountMap(expected);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expected, count.getCountMap());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void equals_test() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        TagCountManager empty \u003d new TagCountManager();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        TagCountManager oneTag \u003d new TagCountManager();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        oneTag.add(new Tag(\"test10\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        TagCountManager oneTagCopy \u003d new TagCountManager();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        oneTagCopy.add(new Tag(\"test10\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(empty, oneTag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(oneTag, oneTagCopy);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 211
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/tag/UniqueTagListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "package seedu.billboard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "public class UniqueTagListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    private final UniqueTagList uniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        uniqueTagList.setTagList(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void contains_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.contains(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void contains_tagNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(uniqueTagList.contains(\"ALICE\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void contains_tagInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        uniqueTagList.add(\"ALICE\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertTrue(uniqueTagList.contains(\"ALICE\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void add_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void add_existingTag_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cString, Tag\u003e tags \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tags.put(\"test\", new Tag(\"test\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        uniqueTagList.setTagList(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.add(\"test\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void addNewTags_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.addNewTags(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void retrieve_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.retrieveTag(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void retrieve_newTag_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e uniqueTagList.retrieveTag(\"test\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void remove_newTag_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e uniqueTagList.remove(\"test\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void retrieve_nullTags_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.retrieveTags(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void retrieve_tagsNotInList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e expectedSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedSet.add(new Tag(\"school\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedSet, uniqueTagList.retrieveTags(Collections.singletonList(\"school\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void retrieve_tagsInList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e expectedSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expectedSet.add(new Tag(\"new\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        uniqueTagList.add(\"new\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expectedSet, uniqueTagList.retrieveTags(Collections.singletonList(\"new\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void remove_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.remove(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void remove_tagInList_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        uniqueTagList.add(\"dinner\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        uniqueTagList.remove(\"dinner\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(uniqueTagList.contains(\"dinner\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void removeAll_tagsInList_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tagNames.add(\"lunch\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tagNames.add(\"drink\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        uniqueTagList.addNewTags(tagNames);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cTag\u003e tags \u003d tagNames.stream().map(Tag::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        uniqueTagList.removeAll(tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(uniqueTagList.contains(\"lunch\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertFalse(uniqueTagList.contains(\"drink\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void removeAll_nullTags_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.removeAll(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setList_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTagList(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void setList_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Map\u003cString, Tag\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        expected.put(\"test\", new Tag(\"test\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        UniqueTagList actual \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        actual.setTagList(expected);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(expected, actual.getTagList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void getTagNames_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        UniqueTagList tagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e names \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        names.add(\"hello\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        names.add(\"bye\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Collections.sort(names);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        tagList.addNewTags(names);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(names, tagList.getTagNames());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public void equals_test() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        UniqueTagList empty \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        UniqueTagList oneTag \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        oneTag.add(\"test10\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        UniqueTagList oneTagCopy \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        oneTagCopy.add(\"test10\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertNotEquals(empty, oneTag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        assertEquals(oneTag, oneTagCopy);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 163,
      "waynefong0401": 2
    }
  },
  {
    "path": "src/test/java/seedu/billboard/model/versionedbillboard/VersionedBillboardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.model.versionedbillboard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getDeleteTypicalBillboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "class VersionedBillboardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private VersionedBillboard vb \u003d new VersionedBillboard();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Stack\u003cModel\u003e modelList \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private Stack\u003cString\u003e cmdList \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.clearStateList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        modelList.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        cmdList.clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        model \u003d new ModelManager(getTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void commit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //currentState \u003d\u003d 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        VersionedBillboard.addCmd(\"start\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new CommandResult(\"\", false, false, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.commit(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        modelList.push(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertTrue(vb.compareBillboardModels(modelList));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //currentState !\u003d 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.setCurrentStatePointer(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Model delModel \u003d new ModelManager(getDeleteTypicalBillboard(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.commit(delModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        modelList.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        modelList.push(delModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertTrue(vb.compareBillboardModels(modelList));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    void setCurrentState() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //All empty -\u003e True"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertTrue(vb.compareBillboardModels(modelList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //vb not empty, other empty -\u003e False"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.commit(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertFalse(vb.compareBillboardModels(modelList));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //vb and other same and not empty -\u003e True"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        modelList.push(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertTrue(vb.compareBillboardModels(modelList));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        //vb empty, other not empty -\u003e False"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        VersionedBillboard.clearStateList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertFalse(vb.compareBillboardModels(modelList));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 60,
      "weiijiie": 3
    }
  },
  {
    "path": "src/test/java/seedu/billboard/storage/JsonAdaptedExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"2af2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String INVALID_DATE \u003d \"^ba#Fj0\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String VALID_NAME \u003d FOOD.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d FOOD.getDescription().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String VALID_AMOUNT \u003d FOOD.getAmount().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final String VALID_DATE \u003d FOOD.getCreated().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d FOOD.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static final String VALID_ARCHIVE \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(FOOD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(FOOD, expense.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new JsonAdaptedExpense(INVALID_NAME, VALID_DESCRIPTION, VALID_AMOUNT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        VALID_DATE, VALID_TAGS, VALID_ARCHIVE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                null, VALID_DESCRIPTION, VALID_AMOUNT, VALID_DATE, VALID_TAGS, VALID_ARCHIVE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, null, VALID_AMOUNT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                VALID_DATE, VALID_TAGS, VALID_ARCHIVE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, VALID_DESCRIPTION, INVALID_AMOUNT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        VALID_DATE, VALID_TAGS, VALID_ARCHIVE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, VALID_DESCRIPTION, null,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                VALID_DATE, VALID_TAGS, VALID_ARCHIVE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, VALID_DESCRIPTION, VALID_AMOUNT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        INVALID_DATE, VALID_TAGS, VALID_ARCHIVE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d CreatedDateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, VALID_DESCRIPTION, VALID_AMOUNT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        null, VALID_TAGS, VALID_ARCHIVE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CreatedDateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, VALID_DESCRIPTION, VALID_AMOUNT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        VALID_DATE, invalidTags, VALID_ARCHIVE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalValueException.class, expense::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 1,
      "waynefong0401": 18,
      "-": 46,
      "weiijiie": 52
    }
  },
  {
    "path": "src/test/java/seedu/billboard/storage/JsonBillboardStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.BILLS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.NEW_LAPTOP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class JsonBillboardStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonBillboardStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void readBillboard_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readBillboard(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Optional\u003cReadOnlyBillboard\u003e readBillboard(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new JsonBillboardStorage(Paths.get(filePath)).readBillboard(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertFalse(readBillboard(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBillboard(\"notJsonFormatBillboard.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void readBillboard_invalidExpenseBillboard_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBillboard(\"invalidExpenseBillboard.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void readBillboard_invalidAndValidExpenseBillboard_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBillboard(\"invalidAndValidExpenseBillboard.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void readAndSaveBillboard_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempBillboard.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Billboard original \u003d getTypicalBillboard();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonBillboardStorage jsonBillboardStorage \u003d new JsonBillboardStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        jsonBillboardStorage.saveBillboard(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        ReadOnlyBillboard readBack \u003d jsonBillboardStorage.readBillboard(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(original, new Billboard(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        original.addExpense(CLOTHES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        original.removeExpense(BILLS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        jsonBillboardStorage.saveBillboard(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        readBack \u003d jsonBillboardStorage.readBillboard(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(original, new Billboard(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        original.addExpense(NEW_LAPTOP);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        jsonBillboardStorage.saveBillboard(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        readBack \u003d jsonBillboardStorage.readBillboard().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(original, new Billboard(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void saveBillboard_nullBillboard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveBillboard(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Saves {@code billboard} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private void saveBillboard(ReadOnlyBillboard billboard, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            new JsonBillboardStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                    .saveBillboard(billboard, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void saveBillboard_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveBillboard(new Billboard(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 111
    }
  },
  {
    "path": "src/test/java/seedu/billboard/storage/JsonSerializableBillboardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class JsonSerializableBillboardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableBillboardTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static final Path TYPICAL_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpensesBillboard.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static final Path INVALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpenseBillboard.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static final Path DUPLICATE_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExpensesBillboard.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_typicalExpensesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonSerializableBillboard dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENSES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                JsonSerializableBillboard.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Billboard billboardFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Billboard typicalExpensesBillboard \u003d TypicalExpenses.getTypicalBillboard();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(billboardFromFile, typicalExpensesBillboard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_invalidExpenseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonSerializableBillboard dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENSE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                JsonSerializableBillboard.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void toModelType_duplicateExpenses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        JsonSerializableBillboard dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXPENSE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                JsonSerializableBillboard.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableBillboard.MESSAGE_DUPLICATE_EXPENSE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 3,
      "waynefong0401": 5,
      "-": 23,
      "weiijiie": 16
    }
  },
  {
    "path": "src/test/java/seedu/billboard/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        userPrefs.setBillboardFilePath(Paths.get(\"billboard.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 5,
      "-": 117,
      "weiijiie": 1
    }
  },
  {
    "path": "src/test/java/seedu/billboard/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.TypicalExpenses.getTypicalBillboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.ReadOnlyBillboard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        JsonBillboardStorage billboardStorage \u003d new JsonBillboardStorage(getTempFilePath(\"bb\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        storageManager \u003d new StorageManager(billboardStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void billboardReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "         * {@link JsonBillboardStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonBillboardStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Billboard original \u003d getTypicalBillboard();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        storageManager.saveBillboard(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        ReadOnlyBillboard retrieved \u003d storageManager.readBillboard().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertEquals(original, new Billboard(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public void getBillboardFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        assertNotNull(storageManager.getBillboardFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 2,
      "waynefong0401": 9,
      "-": 51,
      "weiijiie": 6
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/BillboardBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * A utility class to help with building Billboard objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " *     {@code Billboard ab \u003d new BillboardBuilder().withExpense(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class BillboardBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Billboard billboard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public BillboardBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        billboard \u003d new Billboard();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public BillboardBuilder(Billboard billboard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.billboard \u003d billboard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Adds a new {@code Expense} to the {@code Billboard} that we are building."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public BillboardBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        billboard.addExpense(expense);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagNames \u003d expense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d billboard.retrieveTags(tagNames);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        billboard.incrementCount(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Billboard build() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return billboard;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 8,
      "weiijiie": 34
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/EditExpenseDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    private EditCommand.EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditCommand.EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        descriptor \u003d new EditCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.setName(expense.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        descriptor.setDescription(expense.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        descriptor.setAmount(expense.getAmount());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.setCreated(expense.getCreated());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        descriptor.setTags(expense.getTags().stream().map(s -\u003e s.tagName).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public EditExpenseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Sets the {@code Description} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public EditExpenseDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the {@code Description} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public EditExpenseDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the {@code Description} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public EditExpenseDescriptorBuilder withCreatedDateTime(String dateTime) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.setCreated(new CreatedDateTime(dateTime));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenseDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public EditExpenseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        List\u003cString\u003e tagSet \u003d Stream.of(tags).collect(Collectors.toList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 3,
      "waynefong0401": 61,
      "weiijiie": 24
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/ExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"pay school fees\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"this is a description.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"4.20\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"1/1/2019 1234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final String DEFAULT_ARCHIVE_NAME \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private CreatedDateTime created;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        created \u003d new CreatedDateTime(DEFAULT_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveName \u003d DEFAULT_ARCHIVE_NAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        name \u003d expenseToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        description \u003d expenseToCopy.getDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        created \u003d expenseToCopy.getCreated();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(expenseToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveName \u003d expenseToCopy.getArchiveName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the {@code Name} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Removes all existing tags in {@code Expense}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public ExpenseBuilder removeAllTags() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and merge it with the existing tag set to create a new"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     * set to set it to the {@code Expense} that we are building"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    public ExpenseBuilder withExistingTags(String ... tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e toSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        Set\u003cTag\u003e toAdd \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        toSet.addAll(this.tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        toSet.addAll(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        this.tags \u003d toSet;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waifonglee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the {@code Description} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     * Sets the {@code CreatedDateTime} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public ExpenseBuilder withCreatedDateTime(String createdDateTime) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        this.created \u003d new CreatedDateTime(createdDateTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Sets the {@code Archive} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ExpenseBuilder withArchiveName(String archiveName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new Expense(name, description, amount, created, tags, archiveName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 12,
      "waifonglee": 21,
      "waynefong0401": 4,
      "weiijiie": 89
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/ExpenseUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import seedu.billboard.model.expense.CreatedDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static String getAddCommand(Expense expense) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        sb.append(PREFIX_NAME).append(expense.getName().name).append(\" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .append(PREFIX_DESCRIPTION).append(expense.getDescription().description).append(\" \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .append(PREFIX_DATE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .append(DateTimeFormatter.ofPattern(CreatedDateTime.ACCEPTABLE_PATTERNS.get(0))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                        .format(expense.getCreated().dateTime))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .append(PREFIX_AMOUNT).append(expense.getAmount().amount).append(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        expense.getTags().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.name).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.getDescription().ifPresent(desc -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                .append(desc.description).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        descriptor.getAmount().ifPresent(amt -\u003e sb.append(PREFIX_AMOUNT).append(amt.amount).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            List\u003cString\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waifonglee": 3,
      "waynefong0401": 11,
      "-": 30,
      "weiijiie": 24
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns the middle index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenses().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns the last index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenses().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns the expense in the {@code model}\u0027s expense list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static Expense getExpense(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return model.getFilteredExpenses().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 7,
      "-": 44,
      "weiijiie": 4
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/TypicalExpenses.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_AMOUNT_DINNER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_AMOUNT_TAXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DATE_DINNER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DATE_TAXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DESCRIPTION_DINNER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TAXES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_NAME_DINNER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_NAME_TAXES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.logic.commands.CommandTestUtil.VALID_TAG_TAXES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.ArchiveWrapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.Billboard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import seedu.billboard.model.archive.Archive;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "import seedu.billboard.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Expense BILLS \u003d new ExpenseBuilder().withName(\"monthly bills\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withDescription(\"pay phone company\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withAmount(\"350.25\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"09/9/2018 2152\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withTags(\"bills\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Expense FOOD \u003d new ExpenseBuilder().withName(\"monday breakfast food\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withDescription(\"toast with frens\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withAmount(\"4.20\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"12/01/2019\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withTags(\"monday\", \"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Expense GROCERIES \u003d new ExpenseBuilder().withName(\"groceries\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withDescription(\"bought from fairprice\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withAmount(\"23.50\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"12/02/2019 1200\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Expense MOVIE \u003d new ExpenseBuilder().withName(\"movie tickets\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withDescription(\"tickets to joker\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withAmount(\"10.00\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"01/01/2019 0530\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withTags(\"leisure\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Expense CLOTHES \u003d new ExpenseBuilder().withName(\"clothes\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withDescription(\"bought new yeezys\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withAmount(\"1000\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"1/1/2019 0000\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Expense NEW_LAPTOP \u003d new ExpenseBuilder().withName(\"new laptop\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withDescription(\"new macbook pro\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withAmount(\"2999.99\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"31/12/2019 2359\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    // Manually added - for archive testing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final Expense IPHONE11 \u003d new ExpenseBuilder().withName(\"iphone 11\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withDescription(\"iphone 11 pro 132312321GB memory\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withAmount(\"10000\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"1/1/2019 0001\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withArchiveName(\"luxury\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final Expense GUCCI_SLIDES \u003d new ExpenseBuilder().withName(\"Gucci slides\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withDescription(\"bought them cos I got sick of my slippers\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withAmount(\"299.99\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"1/1/2019 0002\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withArchiveName(\"luxury\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final Expense KPOP_LIGHT_STICK \u003d new ExpenseBuilder().withName(\"Kpop lightstick\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withDescription(\"bought at kpoop concert\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withAmount(\"70\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"1/1/2019 0003\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withArchiveName(\"hobbies\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static final Expense FOOTBALL \u003d new ExpenseBuilder().withName(\"Nike football\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withDescription(\"To play with\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withAmount(\"39.99\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(\"1/1/2019 0004\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .withArchiveName(\"hobbies\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Expense DINNER \u003d new ExpenseBuilder().withName(VALID_NAME_DINNER)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_DINNER)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withAmount(VALID_AMOUNT_DINNER)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(VALID_DATE_DINNER)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withTags(VALID_TAG_TAXES)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Expense TAXES \u003d new ExpenseBuilder().withName(VALID_NAME_TAXES)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_TAXES)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withAmount(VALID_AMOUNT_TAXES)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withCreatedDateTime(VALID_DATE_TAXES)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            .withTags(VALID_TAG_DINNER, VALID_TAG_TAXES)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private TypicalExpenses() {} // prevents instantiation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "     * Returns an {@code Billboard} with all the typical persons."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static Billboard getTypicalBillboard() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        Billboard bb \u003d new Billboard();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            bb.addExpense(expense);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            List\u003cString\u003e tagNames \u003d expense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            Set\u003cTag\u003e tags \u003d bb.retrieveTags(tagNames);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            bb.incrementCount(tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return bb;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static Billboard getDeleteTypicalBillboard() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        Billboard bb \u003d new Billboard();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        for (Expense expense : getDeleteTypicalExpenses()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "            bb.addExpense(expense);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            List\u003cString\u003e tagNames \u003d expense.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            Set\u003cTag\u003e tags \u003d bb.retrieveTags(tagNames);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waifonglee"
        },
        "content": "            bb.incrementCount(tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return bb;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static Billboard getTypicalBillboardWithArchiveExpenses() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Billboard bb \u003d new Billboard();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (Expense expense : getTypicalExpensesWithArchiveExpenses()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            bb.addExpense(expense);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return bb;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static ArchiveWrapper getTypicalArchiveWrapper() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ArchiveWrapper aw \u003d new ArchiveWrapper(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (Expense expense : getTypicalArchiveExpenses()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String archiveName \u003d expense.getArchiveName();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (!aw.hasArchive(archiveName)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                aw.addArchive(new Archive(archiveName, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            aw.addArchiveExpense(archiveName, expense);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return aw;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BILLS, FOOD, GROCERIES, MOVIE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    public static List\u003cExpense\u003e getDeleteTypicalExpenses() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FOOD, GROCERIES, MOVIE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpensesWithArchiveExpenses() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BILLS, FOOD, GROCERIES, MOVIE,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                IPHONE11, GUCCI_SLIDES, KPOP_LIGHT_STICK, FOOTBALL));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalArchiveExpenses() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(IPHONE11, GUCCI_SLIDES, KPOP_LIGHT_STICK, FOOTBALL));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 56,
      "waifonglee": 9,
      "waynefong0401": 21,
      "-": 24,
      "weiijiie": 63
    }
  },
  {
    "path": "src/test/java/seedu/billboard/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 2,
      "-": 7,
      "weiijiie": 3
    }
  },
  {
    "path": "src/test/java/seedu/billboard/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/billboard/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "package seedu.billboard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "import seedu.billboard.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/billboard/ui/charts/converters/DayOfWeekConverterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@SuppressWarnings(\"ResultOfMethodCallIgnored\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "class DayOfWeekConverterTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private TextStyle testStyle \u003d TextStyle.FULL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DayOfWeekConverter dayOfWeekConverter \u003d new DayOfWeekConverter(testStyle);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private String getTestFormatting(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return dayOfWeek.getDisplayName(testStyle, Locale.getDefault());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toString_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dayOfWeekConverter.toString(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toString_invalidInput_throwsDateTimeException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e dayOfWeekConverter.toString(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e dayOfWeekConverter.toString(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e dayOfWeekConverter.toString(8));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e dayOfWeekConverter.toString(8.0001));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toString_validInput_returnsCorrectDayOfWeek() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(DayOfWeek.MONDAY), dayOfWeekConverter.toString(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(DayOfWeek.SUNDAY), dayOfWeekConverter.toString(7));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(DayOfWeek.SUNDAY), dayOfWeekConverter.toString(7.001));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(DayOfWeek.FRIDAY), dayOfWeekConverter.toString(5.1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(DayOfWeek.THURSDAY), dayOfWeekConverter.toString(4.99));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void fromString_invalidInput_throwsExceptions() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dayOfWeekConverter.fromString(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e dayOfWeekConverter.fromString(\"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e dayOfWeekConverter.fromString(\"monDaY\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e dayOfWeekConverter.fromString(\"gibberish\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void fromString_validInput_returnsCorrectIntValue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(1, dayOfWeekConverter.fromString(\"Monday\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(3, dayOfWeekConverter.fromString(\"Wednesday\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(7, dayOfWeekConverter.fromString(\"Sunday\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toStringAndFromStringCalledInSuccession_returnsSameInput() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        int expected1 \u003d 4;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expected1, dayOfWeekConverter.fromString(dayOfWeekConverter.toString(4)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        int expected2 \u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expected2, dayOfWeekConverter.fromString(dayOfWeekConverter.toString(1)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 67
    }
  },
  {
    "path": "src/test/java/seedu/billboard/ui/charts/converters/FormattedDateConverterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@SuppressWarnings(\"ResultOfMethodCallIgnored\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "class FormattedDateConverterTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.BASIC_ISO_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private FormattedDateConverter dateConverter \u003d new FormattedDateConverter(formatter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private String getTestFormatting(LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toString_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dateConverter.toString(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toString_validInput_returnsCorrectDayOfWeek() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(LocalDate.EPOCH), dateConverter.toString(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(LocalDate.of(1969, 12, 31)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                dateConverter.toString(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(LocalDate.of(2019, 11, 11)),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                dateConverter.toString(18211));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void fromString_invalidInput_throwsExceptions() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dateConverter.fromString(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e dateConverter.fromString(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e dateConverter.fromString(\"12115\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e dateConverter.fromString(\"december\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void fromString_validInput_returnsCorrectIntValue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.now().toEpochDay(), dateConverter.fromString(\"20191111\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.of(1972, 12, 5).toEpochDay(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                dateConverter.fromString(\"19721205\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(LocalDate.of(2103, 5, 2).toEpochDay(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                dateConverter.fromString(\"21030502\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 51
    }
  },
  {
    "path": "src/test/java/seedu/billboard/ui/charts/converters/MonthConverterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "package seedu.billboard.ui.charts.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import static seedu.billboard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "@SuppressWarnings(\"ResultOfMethodCallIgnored\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "class MonthConverterTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private TextStyle testStyle \u003d TextStyle.FULL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private final MonthConverter standardConverter \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "            new MonthConverter(LocalDate.of(2019, 12, 1), testStyle);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    private String getTestFormatting(Month month) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        return month.getDisplayName(testStyle, Locale.getDefault());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toString_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e standardConverter.toString(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toString_invalidInput_throwsDateTimeException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e standardConverter.toString(-59));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toString_validInput_returnsExpectedOutput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.JANUARY), standardConverter.toString(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.JANUARY), standardConverter.toString(54));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.JANUARY), standardConverter.toString(4.4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.DECEMBER), standardConverter.toString(53.9));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.FEBRUARY), standardConverter.toString(58.5));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.APRIL), standardConverter.toString(14));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        MonthConverter offsetConverter \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new MonthConverter(LocalDate.of(2019, 4, 13), testStyle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.MAY), offsetConverter.toString(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.JUNE), offsetConverter.toString(4.5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.APRIL), offsetConverter.toString(53.9));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.OCTOBER), offsetConverter.toString(26));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(getTestFormatting(Month.JANUARY), offsetConverter.toString(40.49));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void fromString_invalidInput_throwsExceptions() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e standardConverter.fromString(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e standardConverter.fromString(\"\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e standardConverter.fromString(\"DecembeR\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e standardConverter.fromString(\"owijvwnoi\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void fromString_validInput_returnsCorrectIntValue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(0.0, standardConverter.fromString(\"January\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertNotEquals(0.01, standardConverter.fromString(\"January\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(4.5, standardConverter.fromString(\"February\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(49.5, standardConverter.fromString(\"December\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        MonthConverter offsetConverter \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "                new MonthConverter(LocalDate.of(2019, 7, 13), testStyle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(0.0, offsetConverter.fromString(\"August\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(49.5, offsetConverter.fromString(\"July\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(9.0, offsetConverter.fromString(\"October\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiijiie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    void toStringAndFromStringCalledInSuccession_returnsExpectedInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        double expected1 \u003d 4.5;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expected1, standardConverter.fromString(standardConverter.toString(4.5)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        double expected2 \u003d 0.0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expected2, standardConverter.fromString(standardConverter.toString(1)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        double expected3 \u003d 49.5;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "        assertEquals(expected3, standardConverter.fromString(standardConverter.toString(53.521)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiijiie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiijiie": 85
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003c?import seedu.billboard.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynefong0401"
        },
        "content": "\u003cfx:root type\u003d\"seedu.billboard.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "waynefong0401": 1,
      "-": 5
    }
  }
]
