[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Duke Academy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":site-section: ReadMe"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "All in one Java programming platform to practise on Data Structures and Algorithms"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F14-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-F14-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F14-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F14-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/967c7be5909941f486c674f65e6332e4[\"Codacy code quality\", link\u003d\"https://www.codacy.com/manual/dukecodedoc/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103T-F14-1/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::docs/images/userguide/home.png[width\u003d\"600\", text-center]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::images/userguide/home.png[width\u003d\"600\", text-center]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d What is Duke Academy?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Duke Academy* is a Java programming platform equipped with a library of programming questions related to the field of Data Structures and Algorithms, as well as an automated judging system."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* It is mainly aimed at students who want to practise solving programming questions related to the field of Data Structures and Algorithms."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* It has a GUI (Graphic User Interface) but most of the user interactions happen through a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Preview"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "View questions from our library of questions:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::docs/images/userguide/view.png[width\u003d\"600\", text-center]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::images/userguide/view.png[width\u003d\"600\", text-center]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Attempt questions and submit your solution:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::docs/images/userguide/submit.png[width\u003d\"600\", text-center]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::images/userguide/submit.png[width\u003d\"600\", text-center]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Install"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Make sure your java version is at least `11`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Download the jar file from the https://github.com/AY1920S1-CS2103T-F14-1/main/releases[latest release]."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Open terminal and type `java -jar dukeacademy.jar` to start the app."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* Type `list` in the command box. Open a question by `view \u003cquestion ID\u003e`, e.g. `view 8`. Attempt the question by `attempt \u003cquestion ID\u003e`, e.g. `attempt 8`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* Now start working on your first submission on Duke Academy!"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* If you require any help with the commands, enter `help`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d See Also"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* For students and educators, please refer to the https://github.com/AY1920S1-CS2103T-F14-1/main/blob/master/docs/UserGuide.adoc[User Guide]."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* This is an open source project. To contribute, please refer to the https://github.com/AY1920S1-CS2103T-F14-1/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide] to get familiar with the code base."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* https://github.com/AY1920S1-CS2103T-F14-1/main/blob/master/docs/AboutUs.adoc[About Us]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* https://github.com/AY1920S1-CS2103T-F14-1/main/blob/master/docs/ContactUs.adoc[Contact Us]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* The original source code comes from the https://se-education.org[AddressBook-Level 3 project] created by SE-EDU initiative."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 15,
      "zhangj1an": 20,
      "limhawjia": 20,
      "-": 20
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import com.dukeacademy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import com.dukeacademy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 7
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "mainClassName \u003d \u0027com.dukeacademy.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: \u002714-ea+2\u0027, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: \u002714-ea+2\u0027, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: \u002714-ea+2\u0027, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    compile group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveName \u003d \u0027DukeAcademy.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u0027site-name\u0027: \u0027DukeAcademy\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://ay1920s1-cs2103t-f14-1.github.io/main/\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 6,
      "-": 148
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "- AddressApp.ico"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Copyright by Freepik - https://www.flaticon.com/premium-icon/programmer_560277"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "- dukeacademy_icon.png"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 4,
      "-": 8
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Duke Academy was developed by the https://github.com/AY1920S1-CS2103T-F14-1[AY1920S1-CS2103T-F14-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Alex Koh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::alxkohh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "{empty}[http://github.com/alxkohh[github]][\u003c\u003calexkoh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Responsibilities: UI + Integration + SceneBuilder Expert"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Lim Haw Jia"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::limhawjia.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "{empty}[http://github.com/limhawjia[github]][\u003c\u003climhawjia#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Responsibilities: Software Architecture + DevOps + Travis Expert"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Ning Sheng Ying"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::ning-sy210.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "{empty}[http://github.com/ning-sy210[github]][\u003c\u003cningshengying#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Responsibilities: UI + Testing + Intellij Expert"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Zhang Jian"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::zhangj1an.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "{empty}[http://github.com/zhangj1an[github]][\u003c\u003czhangjian#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Responsibilities: Storage + Documentation + Git Expert"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 18,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F14-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Email us* : You can also reach us through one of our developers, Lim Haw Jia, at `hawjia.lim@u.nus.edu` ."
      }
    ],
    "authorContributionMap": {
      "alxkohh": 3,
      "-": 4
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/com/dukeacademy/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "A project often depends on third-party libraries. For example, Duke Academy depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "-": 46
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d DukeAcademy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":imagesDir: images/developerguide"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":repoURL: https://ay1920s1-cs2103t-f14-1.github.io/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "By: `Team AY1920S1-CS2103T-F14-1`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::DaArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/difficulty/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/difficulty/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c\u003cDesign-Observable, *`Observable`*\u003e\u003e is responsible for updates on User Interface if internal data changes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`LogsCenter`is used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The following five components plays an important role at the architecture level:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The User Interface of the App."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Includes 3 types of executors: the Command Executor, the Program Submission Executor, and the Question Builder Executor,."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* \u003c\u003cDesign-TextExecutor, *`TextExecutor`*\u003e\u003e: Compile the user program and run it against test cases. Output result."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Each of the six components:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "For example, the `QuestionLogic` component (see the class diagram given below) defines it\u0027s API in the `QuestionLogic.java` interface and exposes its functionality using the `QuestionLogicManager.java` class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::architecture[]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `submit`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Component interactions for `submit` command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::architecture[]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::ui[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::UiClassUmlDiagram.png[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/difficulty/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The UI consists of a `MainWindow` that is made up of 7 parts e.g.`CommandBox`, `ResultDisplay`, `Workspace`, `NotesPage`, `HelpPage`, `Dashboard` and `QuestionsPage`. All these parts, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Some of the 7 UI parts are also made up of other UI parts. For example, listed on the UML diagram, `QuestionsPage` is made up of `QuestionsListPanel`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The `UI` component uses the JavaFX UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/difficulty/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* Listens for changes through the Observer pattern. The UI updates as the `ObservableList` changes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::ui[]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::logic[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Logic components"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "There are 4 main logic components in the architecture of Duke Academy. They are `CommandLogic`, `QuestionsLogic`, `ProgramSubmissionLogic` and `NotesLogic`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Each logic component serves as a *facade* for basic operations with regards to *Commands*, *Questions*, *ProgramSubmission* and *Notes*."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "They orchestrate the execution of these operations internally and expose a simple interface for other components, such as the `UI` to utilize."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The logic components are interfaces so their implementation can be changed easily."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "_Class diagrams for various logic classes_"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image:CommandLogicClassDiagram.png[width\u003d\"150\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image:ProgramSubmissionLogicClassDiagram.png[width\u003d\"250\"]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image:NotesLogicClassDiagram.png[width\u003d\"250\"]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image:QuestionsLogicClassDiagram.png[width\u003d\"250\"]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*CommandLogic*:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Only has one method  which is used by the application to execute commands."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*QuestionsLogic:*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Deals with all CRUD operations pertaining to the questions found in the application."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Keeps track a _selected question_ which represents the `Question` that is currently being viewed by the user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*ProgramSubmissionLogic:*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Performs the evaluation of the user\u0027s program submissions."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Keeps track of a _currently attempting_ question which is used to test user program submissions."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Uses the `UserProgramChannel` interface to enable other components such as the `UI` to serve as a source for `UserProgram` without introducing them as dependencies."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*NotesLogic:*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Deals with all CRUD operations pertaining to the notes found in the application."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Uses the `NoteSubmissionChannel` interface to enable other components such as the `UI` to serve as a source for notes without introducing them as dependencies."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d CommandLogic implementation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The standard implementation of the CommandLogic is the `CommandLogicManager` class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Overview:*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-CommandLogicManagerAssociations]]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Associations of the CommandLogicManager"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::CommandLogicManager.png[align\u003d\"center\" width\u003d\"600\"]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- For commands to be parsed by `CommandLogic`,  they have to be registered with `registerCommand()`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- A `CommandSupplier` and a command word is required to register a `Command`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- A `Command` can also be registered with a `CommandFactory`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- When `executeCommand(commandText)` is invoke, `CommandLogicManager` searches all previously registered commands for the right one to execute."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Storage of these keys and the parsing of the `commandText` argument is performed by `CommandParser`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `CommandSupplier` is a functional interface that returns a `Command`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Each `CommandSupplier` is mapped to a command word"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* This command word is used to search for the appropriate `Command`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `CommandParser` splits the text input of the user into the command word and arguments."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Each `Command` is  responsible for parsing its own arguments."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `InvalidCommandArgumentException` is thrown if the arguments do not match the specification of the command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-CommandLogicSequenceDiagram]]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Sequence diagram for command execution"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::CommandLogicSequence.png[align\u003d\"center\" width\u003d\"800\"]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*The basic sequence of command execution is as follows:*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `Command` is registered upon startup by the application driver"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `Command` and matching command word is stored in `CommandParser` by `CommandLogicManager`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". User enters command text"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Application driver passes the command text as String to `CommandLogicManager`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `CommandLogicManager` passes command text to `CommandParser` for parsing and `Command` retrieval"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `CommandLogicManager` receives and executes `Command`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::logic[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d QuestionsLogic implementation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The standard implementation of the `QuestionsLogic` interface is the `QuestionsLogicManager`. It stores questions"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "in the form of a `QuestionBank`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "_(View \u003c\u003cDesign-Storage\u003e\u003e for more details)_."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Overview:*"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-QuestionsLogicManagerAssociations]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Associations of the QuestionLogicManager"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::QuestionsLogicManager.png[align\u003d\"center\" width\u003d\"600\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Allows other components of the application to make changes to existing questions using its inteface."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Other components of the application can observe the current state of questions by getting an `ObservableList` through `getAllQuestionsList()` and `getFilteredQuestionsList()`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- `ObservableList` from `getFilteredQuestionsList()` is a filtered list. The filter can be changed by `setFilter(predicate)`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `QuestionsLogicManager` constructor takes in a `QuestionBankStorage` instance which is used to load the initial `QuestionBank` and to save subsequent changes to it."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* The main bulk of the CRUD operations are handled by `QuestionBank`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `QuestionLogicManager` saves the `QuestionBank` after each change."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[Logic-ProgramSubmissionLogic]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d ProgramSubmissionLogic implementation"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The standard implementation of the `ProgramSubmissionLogic` is the `ProgramSubmissionLogicManager`. It"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "relies on `TestExecutor` to execute users\u0027 program submissions"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "_(View \u003c\u003cImplementation-ProgramEvaluation\u003e\u003e for more details)_."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Overview:*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-ProgramSubmissionLogicAssociations]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Associations of the ProgramSubmissionLogicManager"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::ProgramSubmissionLogicManager.png[align\u003d\"center\" width\u003d\"650\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Keeps track of a _currently attempting_ `Question`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- _Currently attempting_ `Question` can be set through `setCurrentQuestion(question)`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "-`submitUserProgram(userProgram)` or `submitUserProgramFromSubmissionChannel()` evaluates the program against test cases found in the _currently attempting_ `Question`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Other components can observe the latest `TestResult` through an observable provided by `getTestResultObservable()` without having `ProgramSubmissionLogicManager` depending on them."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `ProgramSubmissionLogicManager` instantiates the `TestExecutor` using the `StandardCompilerEnvironment`, `StandardCompiler` and `StandardProgramExecutor`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `ProgramSubmissionLogicManager` holds a reference to `StandardCompilerEnvironment` so that it can be closed by `closeSubmissionLogicManager()`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* It is *important* that the application invokes `closeSubmissionLogicManager()` method exiting to remove any temporary files that were created."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-ProgramSubmissionSequenceDiagram]]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Sequence diagram of program submissions"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::ProgramSubmissionSequence.png[align\u003d\"center\" width\u003d\"650\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*The basic sequence of submitting a program from a `UI`  component is as follows:*"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Register the `UI` component as the new  `UserProgramChannel`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Set the _currently attempting_ question using `setCurrentQuestion(question)`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Invoke the `submitUserProgramFromSubmissionChannel()`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". User program is retrieved from the `UI` component and evaluated against the _currently attempting_ question."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::logic1[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d NotesLogic implementation"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The standard implementation of the `NotesLogic` interface is the `NotesLogicManager`. It relies on `SketchManager` to handle loadiand saving of the *Sketches*."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "It also stores the notes in the application in the form of a `NoteBank`. _(View \u003c\u003cDesign-Storage\u003e\u003e for more details.)_"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Overview:*"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-NotesLogicManagerAssociations]]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Associations of the NotesLogicManager"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::NotesLogicManager.png[align\u003d\"center\" width\u003d\"600\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Allows other components of the application to make changes to the current state of notes using its interface."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Other components of the application can also observe the current state of notes by getting an `ObservableList` through `getAllNotesList()`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `NotesLogicManager` constructor takes in a `NoteBankStorage` instance which is used to load the initial `QuestionBank` and to save subsequent revisions to it."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* The main bulk of the CRUD operations are handled by the `NoteBank` class."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `NotesLogicManager` saves the `NoteBank` methods along after each change"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `NoteSubmissionChannel` is required to provide a pair of values -- a `Note` and a `WritableImage` instance to represent the user\u0027s sketch."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*SketchManager:*"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-SketchManagerClassDiagram]]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Class diagram of the SketchManager"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::SketchManagerClassDiagram.png[align\u003d\"center\" width\u003d\"250\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Handles the saving, loading and deleting of *sketches*."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Deals with *sketches* in two formats, `WritableImage` class used by the JavaFX `UI` components for rendering the image, and png form in storage."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Converts *sketches* between the two formats upon loading/before saving."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-NoteSavingSequence]]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Sequence diagram of saving a note"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::NoteSavingSequence.png[align\u003d\"center\" width\u003d\"650\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*The basic sequence of saving a user\u0027s note from a `UI`  component is as follows:*"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Register the `UI` component as the `NoteSubmissionChannel`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Invoke the `saveNoteFromSubmissionChannel()` method"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `Note` and *sketch* is retrieved from the `NoteSubmissionChannel`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `Note` is saved by the `NoteBankStorage` while the *sketch* is saved by the `SketchManager`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::logic1[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "We created models for `Question`, `Program`, `Note` and `Profile`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Note model:*"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-NoteClassDiagram]]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Class diagram of the Note class"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::NoteClassDiagram.png[align\u003d\"center\" width\u003d\"200\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- The note model class represents a user\u0027s note in the application."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- It contains a *title* which provides an easy way for the user to identify and organize his or her notes"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- It contains a *content* string to represent all the text-based notes that the user has entered."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- Each note also contains a *sketch* which the user can draw and edit within the `NoteCanvas` component. The sketch is stored as a png whose file name corresponds to the *sketchId* of the note."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//tag::storage[]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "There are 2 main storage components found in the architecture of Duke Academy. They are `QuestionBankStorage` and `NoteBankStorage`. Each storage component serves as a *facade* for the basic operations by the application with regards to *Commands* and *Notes*."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* can save the Duke Academy question bank in json format and read it back."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* can save the notes and read it back."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The storage components are interfaces so their implementation can be changed easily."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`JsonAdaptedQuestion` serves as a good starting point to understand the implementation."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*JsonAdaptedQuestion:*"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Class diagram of the JsonAdaptedQuestion class"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::JsonAdaptedQuestionClassDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* It contains all the necessary attributes for a question, including title, completion status, difficulty level, isBookmarked, topics belonged to, testCases, userProgram attempted and question description."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Compared with a standard `question` object, this `JsonAdaptedQuestion` object has processed its attributes to be compatible with json format. That is, this object  can be directly serialized to and de-serialized from json files."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* The constructor is used to serialize the `Question` object using the `@JsonProperty` notation."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* The `@JsonProperty` is also able to deserialize strings obtained from json files. The `toModel()` function is then used to construct and return a new `Question` object using attributes it obtained using the getter methods."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Structure"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "We would hereby use `QuestionBankStorage` to illustrate the implementation."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The standard implementation of the `QuestionBankStorage` is the `JsonSerializableStandardQuestionBank` class."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Overview:*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Structure of the Storage Component for Questions"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::StorageClassDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//end::storage[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Classes used by multiple components are in the `com.dukeacademy.commons` package."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "**Core**:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "**Exceptions**:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`DataConversionException`: occurs when loading files with incorrect data format."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`IllegalValueException`: occurs when user inputs a invalid command."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "**Util**:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`FileUtil`: for loading and saving of files."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`JsonUtil`: for serializing and deserializing json files."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::programevaluation[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[Implementation-ProgramEvaluation]]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Evaluation of user program submissions"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The evaluation of the user\u0027s programs is facilitated by the `testexecutor` package."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d Entry point"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `TestExecutor` contains a single method `runTestCases(testCases, program)` which evaluates a `UserProgram` against"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "a list of `TestCase`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*TestCase* - stores an input and an expected value."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*UserProgram* - stores the name of the class which contains the _main method_ along with the source code (_note that the class name must match the source code for it to be evaluated successfully_)."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "_Class Diagrams for UserProgram and TestCase_"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image:UserProgramClassDiagram.png[width\u003d150]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image:TestCaseClassDiagram.png[width\u003d150]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* The result of the program evaluation is returned as a `TestResult` object."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*TestResult* - encapsulates all possible outcomes of evaluating the user\u0027s program. It is contains `TestCaseResult` and `CompileError`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-TestResultClassDiagram]]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Class diagram for TestResult"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::TestResultDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation overview"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The evaluation of a user\u0027s program is done in 5 main steps, each handled by a specialized interface. The 5 steps include:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Create a Java file inside a temporary directory and write the source code into the file."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Compile the Java file. Catch and store any compile errors."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Execute the generated Class file and provide the inputs of the test cases."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Collect and store any output from the program."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Package the output, errors and results as a `TestResult` instance."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The 3 specialized interfaces used are `CompilerEnvironment`, `Compiler` and `ProgramExecutor`. They provided through dependency injection in the `TestExecutor` constructor."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`TestExecutor` acts as an orchestrator for the 3 interfaces."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*CompilerEnvironment* - in charge of creating a temporary folder in the user\u0027s file system to create Java files."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "This temporary folder is deleted in `closed()`. Uses `JavaFile`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-CompilerEnvironmentAssociations]]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Associations of CompilerEnvironment"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::CompilerEnvironment.png[align\u003d\"center\" width\u003d\"500\"]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Compiler* - in charge of compiling the Java files into Class files at a given file path. Uses `ClassFile`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-CompilerAssociations]]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Associations of Compiler"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::Compiler.png[align\u003d\"center\" width\u003d\"500\"]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*ProgramExecutor* - in charge of executing the compiled Class files. Uses `ProgramOutput`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-ProgramExecutorAssociations]]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Associations of ProgramExecutor"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::ProgramExecutor.png[align\u003d\"center\" width\u003d\"1000\"]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Models classes:*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *JavaFile* - contains the canonical name and class path of a Java file with various convenience methods. Note that the file must actually exist or"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "an `FileNotFoundException` is thrown during instantiation."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *ClassFile* - contains the canonical name and class path of a Java file with various convenience methods. Note that the file must actually exist or"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "an `FileNotFoundException` is thrown during instantiation."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *ProgramInput* - contains the String input to be fed into the user\u0027s program."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *ProgramOutput* - contains the String output produced by the user\u0027s program. It also contains convenience methods for producing different outputs."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*The basic flow of a program evaluation is as follows:*"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[fig-TestExecutorSequenceDiagram]]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Sequence diagram for the evaluation of a user\u0027s program"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::TestExecutorSequenceDiagram.png[align\u003d\"center\" width\u003d\"650\"]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `TestExecutor` calls `clearEnvironment()` of `CompilerEnvironment` to remove any leftover files from previous program evaluations."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `TestExecutor` calls `createJavaFile()` of `CompilerEnvironment` to create the Java file with the correct class name and source code."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `TestExecutor` calls `compileJavaFile()` of `Compiler` to compile the newly created Java file."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". For each test case, `TestExecutor` calls `executeProgram` of `StandardProgramExecutor` with the corresponding input to retrieve a `CompletableFuture` of the results."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `TestExecutor` sets a timeout on the `CompletableFuture` and maps the result into a `TestCaseResult`."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `TestExecutor` packages all the errors and results into a single `TestResult` instance."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Note that if the evaluation `CompletableFuture` async task timesout before it is completed, an errored `TestCaseResult` with a \"Time limit exceeded!\" error message is returned instead."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Compile errors and runtime errors will also be reflected in the `TestResult` and `TestCaseResult` models respectively."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d User interaction"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "In the application, the user\u0027s interactions when submitting  a program is as follows:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". User submits program after typing it into the `Editor` UI component."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `ProgramSubmissionLogic` retrieves the program from `Editor` and evaluates it against the _currently attempting_ `Question` in `QuestionLogic`."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". `ProgramEvaluationPanel` observes the latest `TestResult` and reflects new result in the UI."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `Editor` must have been set as the `UserProgramChannel` in `ProgramSubmissionLogic`."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `ProgramEvaluationPanel` must be observing the test result `Observable` provided by `ProgramSubmissionLogic`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* View \u003c\u003cLogic-ProgramSubmissionLogic\u003e\u003e for details about the sequence of events"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::programevaluation[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation details"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The implementations of `CompilerEnvironment`, `Compiler` and `ProgramExecutor` are as follows:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *StandardCompilerEnvironment* - utilizes Java11\u0027s native Files package:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - Creates a temporary folder when instantiated at the file path specified during instantiation."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - All files are created in this temporary folder."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - The temporary folder is deleted in `close()`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - When tasked to create a new file, it first creates an empty file in the temporary folder before writing the contents of the source code to the file"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *StandardCompiler* - utilizes Java11\u0027s native JavaCompiler package to programmatically compile Java files:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - Compile errors recorded by the `DiagnosticsListener` class from the compilation task is parsed and thrown as `CompileContentException`."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *StandardProgramExecutor* - utilizes Java11\u0027s native Runtime class to execute programs programmatically:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - `exec(String command)` of the `Runtime` class is used to execute programs on a separate process."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - Each process has its own input and output streams."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - Test inputs are fed into the input stream."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - Results and errors are collected from the output stream."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - The process is destroyed upon completion."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::programevaluationalternative[]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect : How the programs are run"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "|Alternative 1 : Use native Java packages and run the program locally (current choice) | Alternative 2 : Host an online server which receives user programs via HTTP requests"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Pro : No additional installation requirements is needed from the user"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Pro : Can support multiple languages"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Pro : No internet connection is required"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Pro : Scale of tests can be increased"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Pro : Easy to implement"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Pro : Reduce strain on user\u0027s machine"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Con : Creates files in the user\u0027s machine (dependent on memory/permissions)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Con : Difficult to implement"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Con : Can only support the execution of Java programs"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "| Con : Dependent on internet"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::programevaluationalternative[]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`java.util.logging` package is used for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Certain properties of the application can be controlled (e.g test output path, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::dashboard[]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Dashboard"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The home page of Duke Academy is the main page that the user sees upon app initialization. Not only does it provide an"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "introduction and greeting to the user, it also functions as a personal dashboard."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "As a personal dashboard, it presents the user with essential information about his personal progress and learning"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "journey."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Here are three main pieces of information presented to the user:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "1. Number of questions completed`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "2. Questions that user is still working on"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "3. Questions that user chose to bookmark for personal reference"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "To obtain these three pieces of information, we first obtain the `ObservableList` that represents all questions in the"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "storage. We can obtain this `ObservableList`, from `QuestionLogic`, through a method named `getFilteredQuestionsList()`."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The controller class for Home Page, `HomePage.java` has a constructor that takes in this `ObservableList`. Through"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "helper methods within the controller class, we can do some processing to the `ObservableList` and easily generate the"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "three pieces of data."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "These pieces of information will then be displayed on the Home Page through standard JavaFX controls."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::dashboard[]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "//tag::problem_description[]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Problem Statement Panel"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Since the problem description cannot be viewed fully from the question list, we introduced a new problem description panel. As shown on Figure 20, when type `view [id]`, the panel updates to"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "display all the additional information a question has to provide."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Activity Diagram on View command"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::viewactivity.png[]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d General Procedure of Command execution:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* User types `view [id]` in the command box."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The `MainApp` class receives the input, calls the `commandLogic` class to executes the command and returns an `CommandResult` object."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Details"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The implementation details are narrated following user cases as follows:"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". When the `view` command is executed, it switches the pane to \"Question\" by calling the `applicationState` object\u0027s `setCurrentActivity(Activity pane)` method."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". It then updates the `questionLogic` object of the current question being viewed by calling its `selectQuestion(int id)` method."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". The `ProblemStatementPanel` UI utilizes a JavaFx `@FXML` property called `TextArea` to display information."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Every time when the `QuestionPage` pane or the `Workspace` pane is displayed, their respective UI controller checks whether `questionLogic` refers to a"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "question that is currently of interest by the user. If positive, they will call the `ProblemStatementPanel` controller\u0027s `setProblemStatement(String problemStatement)` to display data."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "As such, the functionality required by problem display panel is well covered."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Future Improvement"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "In version 2.0, we aim to achieve rich text display of problem description. It can be in MarkDown format, containing LaTeX formulas, images, URL links,"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "coloured text, formatted code snippet, etc."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "This is my design consideration on how to update the problem statement panel when a `view` command is entered."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Alternative 1 (current choice): Use `questionLogic` to track the current `Question` being viewed by the user. `UI` components can access attributes in `Logic` components and display them."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Pros: More OOP. It is clear that `UI` does not interfere with the tasks responsible by the `Logic` component. There is less coupling, making the code easier to understand and undertake testing."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Cons: Complicates the code base by abstracting another attribute onto the `QuestionLogic` class."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Alternative 2 : Stores the `Problem Description` content as a String temporarily. Use `MainWindow` controller to check whether"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "the command generated is a `view` command. If yes, force the `ProblemStatementPanel` to update."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Pros: Easy to implement based on the existing code base."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Cons: It breaks OOP\u0027s open and close principle. It mixed up `UI` class with `Logic` class."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "//end::problem_description[]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::bookmark[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Bookmark Command"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ".Sequence Diagram for the execution of a BookmarkCommand instance"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::BookmarkCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The sequence is as follows:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "1. User calls execute() on a BookmarkCommand object."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "2. The BookmarkCommand object calls getUserSelectedQuestion(), activating an instance of QuestionsLogic."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "3. The QuestionsLogic object returns userSelectedQuestion, which is the question the user chose to bookmark."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "4. If userSelectedQuestion is already bookmarked, the BookmarkCommand object calls notifyUserNoActionTaken() as a response to the user. Else, the BookmarkCommand object calls bookmarkUserSelectedQuestion(), and then calls notifyUserBookmarkSuccess() as a response to the user."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::design[]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect : How to bookmark a question"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|Alternative 1 : Add an instance boolean attribute, isBookmarked, to the Question class | Alternative 2 : Create a global list of bookmarked questions, named bookmarkedQuestions"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "| Pro : Better Object Oriented Design"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "| Pro : Easy to implement"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "| Con : All unit tests pertaining to Question objects have to be modified"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "| Con : Repeated reference to the global list, coupling is higher"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Decision: Alternative 1 +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Alternative 1 was chosen because good software engineering practices were prioritised over ease of implementation. Firstly, Object Oriented Design from AB3 was maintained. Next, we prevented an increase in coupling, which would reduce the testability of the project."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::design[]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::bookmark[]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Editor Panel"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The editor panel is the panel right next to the *Problem Display Panel* and the *Program Evaluation Panel*. The editor panel"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "consists of two parts: The main text editor and the line counter component."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The main text editor is where the user codes and is responsible for feeding the text input to the `Program Submission"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Logic Manager` for compilation of the user-written code. It is capable of performing auto-indentations for the user and"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "this is achieved by overwriting the function of the Enter key. Through helper methods available in `Editor.java`, the"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "number of unclosed braces can easily be counted so as to perform the appropriate indentations."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "There are other modifications to key inputs to make the text editor imitate the behaviour of an actual IDE editor. These"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "include overwriting the `tab` key to input 4 spaces instead of 8, and also performing auto de-indentation when a right brace"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "(i.e. \"}\") is typed. Refer to the activity diagram below for the possible outcomes."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".Activity Diagram for Text Input"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::TextInputActivityDiagram.png[]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The line counter component of the editor keeps track of the number of lines written by the user in the editor. It takes"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "in a `SimpleIntegerProperty` and is updated automatically whenever there are changes to the text observed in the editor."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "This is achieved through adding a `InvalidationListener` to the text property of the editor, along with using the"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "necessary helper functions to count the number of newline characters in the text. The Sequence Diagram below shows how"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "the `UI` interacts with the `Editor` class to generate the line counter in the text editor."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".Sequence Diagram for Generating Line Counter Input"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::LineCounterSequenceDiagram.png[]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//tag::appendix[]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* has a need to practice a lot of algorithm / data structure problems with the following conditions satisfied:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** instant assessment of answers submitted"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** practices under timed conditions"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** automatic progress checker"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** personal tutor to recommend problems with suitable difficulties and topics"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** fun in learning with achievement badges to unlock"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** no WiFi needed,"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* or has a need to distribute problem sets:"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** can set the coding problems easily"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** share problems via link"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** view-only answers protected by passwords"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* everyone can learn data structures - anytime, anywhere"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* make coding threshold-less"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//end::appendix[]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* * *` |student from university courses|search problems by partially matching keywords|identify the problem I am required to do asap"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* * *` |developer|introduce new problems to the software easily |the repository of code challenges can be updated without much hassle"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* * *` |coding student|look back on the coding challenges I have completed|revise the concepts used in those problems"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* * *` |job seeker|view past interview problems by a company|increase my chances of getting hired"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* * *` |user|see the difficulties of each problem|choose to do problems that are more aligned to my standard"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |developer|receive detailed auto-generated error reports if any bug occurs|correct them"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |forgetful user|set reminders|be reminded of the problems that I need to solve before a deadline"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |unorganized coder|view my progress on different categories|know which area I am weak in"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |programming course student |attempt problems under timed condition|I feel more prepared in timed assessments such as labs, practical exam and final exam."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |tutor|choose to reveal the answers to the solutions through a password|"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |coder|identify the concepts required to solve a problem before attempting them |move on to another quickly"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |a coding student|attempt the same problem in different coding languages|test my proficiency at those languages"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |coding amateur|look at hints/tutorials for the problem|learn something new while attempting a coding challenge"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |coding student|share coding challenges with my friends easily|discuss possible solutions with them"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |achievement hunter|view the badges that I have earned (and those that I have not)|feel a sense of accomplishment"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |conscientious coding student|easily identify problems that I have given up on previously|tackle them again"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |professor teaching this course|assign a unique hash code for each problem I input|students can look for the problems quickly"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |picky coder|select different themes for the software|the user interface looks more appealing to me"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |programming language polyglot|specifically choose problems designed in a specific language|practice that language in focus"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |coding student|view similar/related problems to the one I have just completed |further deepen my understanding of the concepts used"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |easily distracted coder|switch off all external distractions|focus better on the problem I am working on"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |busy coder|save my progress on a problem|come back to it and continue at a later time"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` |competitive programming enthusiast|set my own questions and pose them to my fellow enthusiast friends to solve|"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`* *` | student |see statistics about my attempts/success rates to track my learning progress|"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`*` |tutor|print a pdf version of the coding problem |give them as practices to my students"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`*` |competitive coder|see my areas for improvement after completing a coding challenge|become a better competitive coder"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|`*` |international student|view translation of the problem statement|aids my understanding of the problem"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//tag::appendix2[]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "(For all use cases below, the *System* is the `Duke Academy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 Set questions"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1. User requests to input problem sets."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2. Duke Academy requires a file path."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "3. User select file path."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "4. Duke Academy imports the problem sets and prompts success message."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* 4a. The input format is incorrect."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Duke Academy reports wrong format error. Duke Academy resumes at step 3."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 View Questions"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1. User finds a question by question ID, title or category."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2. Duke Academy shows a list of problems that matches the keyword."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "3. User views the question identified by ID."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "4. Duke Academy displays the problem statement of the question."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* 1a. User inputs wrong keywords."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Duke Academy reports error and prompts link to help page."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 Attempt Questions"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1. User chooses a problem to attempt."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2. Duke Academy shows up the problem statement and an editor."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "3. User inputs the code in editor."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "4. User submit the answer."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "5. Duke Academy compiles the problem and display whether it has passed the test cases."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* 2a. User requests to reset the previous input in the editor for this question."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2a1. Duke Academy clears the cached code."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Use case resumes from step 3."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* 2b. User requests to set a timer."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2b1. Duke Academy requests for a time duration."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2b2. User inputs a time duration."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2b3. Duke Academy displays a timer."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2b4. User starts the timer."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* 2c. User requests to quit the program."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2c1. Duke Academy requests to save the draft."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2c2. User confirms or denies."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2c3. Duke Academy follows user\u0027s preference to save or discard the draft."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** 2d4. Duke Academy exists."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* *a. At any time, user chooses to attempt an question imported from external resources."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** *a1. load the questions from file."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*a2. Duke Academy stores the problem in local machine."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*a3. User search for the problem imported."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*a4. Duke Academy displays the question."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".  Should be able to hold up to 1000 problem sets without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Time taken to assess the submitted programmes should not exceed 3 minutes."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". \u003c\u003cencryption,Data not intended for disclosure\u003e\u003e should be encrypted with minimum needs so that it\u0027s protected from direct access."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Should not take more than 5 seconds to load the initial screen."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". If interrupted, the program should provide an auto-saved version and prompt for restore when the app opens next time."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[[encryption]] Data not intended for disclosure::"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* User information that is not meant to be shared with others."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Confidential program sets for technical interviews."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* To prevent plagiarism, input code files intended for graded school assessment."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//end::appendix2[]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Launch"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: Shows the GUI with the Home tab in focus. The questions tab should contain a list of sample questions"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Navigate in the app"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Navigate between panes"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Type `tab` in command box."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Or use mouse to click the tabs."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Navigate in the Question Pane"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". `showall`: list all questions"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". `browse [keyword]`: find question by topic, difficulty, title, description... etc. It can find multiple keywords at one time. It finds by matching words, not by matching characters."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". `find [keyword]`: find by question title."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". `view [id]`: views the problem statement of the question with such id. If id is out of range, prompts error."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Navigate to the workspace"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". `attempt [id]`"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Attempting question"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Attempting questions"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Attempt a question"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Exit the application and reopen it. +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: The previous attempt should have been saved automatically"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Submitting solutions"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Attempt a question"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Submit the solution +"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: The application should run the solution against sample test cases and display the results"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Submit a solution with a compile error +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: The application should display the compile error in the Workspace tab"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Submit a solution with an infinite loop +"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: The evaluation should terminate in 5 seconds and a \"Time limit exceeded\" error is shown"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Submit a solution with a runtime error +"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: The application should display the runtime error"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::manualtesting[]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Bookmarking a question / Removing bookmark for a question"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ". Bookmark a question"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ".. Bookmark any question in the question library. For example, bookmark question 3 through `bookmark 3`."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ".. Navigate to the Dashboard tab, either through clicking or typing `dashboard`. +"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   Expected: The question you chose to bookmark should be in the list of bookmarked questions."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ". Removing a bookmark"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ".. On the Dashboard, refer to the list of bookmarked questions and pick one question to remove the bookmark."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ".. Remove the bookmark for that question. For example, `deletebookmark 3` +"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   Expected: The question is no longer in the list of bookmarked questions."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::manualtesting[]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Creating notes"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Creating notes"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Create a new note +"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: +"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   The new note should be loaded into the Notes tab +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   The sketchpad should be available for drawing +"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   The note text input should also be available for editing"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Deleting notes"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Delete a note +"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: The new note should no longer be reflected in the GUI"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Saving notes"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Create a new note"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Edit the note however you like"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Save the note"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".. Restart the app +"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   Expected: The changes to the note should be saved and reflected in the app"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Loading Custom Questions"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Load question files prepared by developers"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".. type `loadquestions NewProblems.txt` in the command box. +"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Expected: The Question List is updated with newly loaded questions named `Apple` and `Banana`."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Question file in wrong format"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".. Navigate to to the `DukeAcademy/newQuestions/NewProblems.txt` file. The `DukeAcademy` folder is in the same directory as where you put the jar file."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".. Change `Difficulty: EASY` to `Difficulty: easy`. +"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Expected: Prompts an error."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".. Other ways include changing Topics to invalid values or uncapitalized words."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Question file not saved in specified location"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".. Drag the file to Desktop and re-enter `loadquestions NewProblems.txt`. +"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Expected: Prompts an error."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Entered commands with wrong file name"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".. Type in command box `loadquestions newproblem` or any unexistant file. +"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "   Expected: Prompts an error."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Load your own set of questions"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".. You can directly edit from the `NewProblems.txt` file. Description can be multi-lined, as long as the identifiers (e.g. `Difficulty:`) occupy a single line. +"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " Expected: New questions are loaded."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".. Alternatively, you can create questions from scratch. The instructions below are copied from user guide."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Create a .txt file."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* The format of a question goes like follows:"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "----"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question::"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Title::"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Description::"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Difficulty::"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Topics::"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "TestCase::"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Input::"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Output::"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "----"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Some notes:"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* All inputs must be in the order stated above."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Title, Description can be any non-empty string."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Difficulty can only be EASY, MEDIUM or HARD. (Must be capitalized)"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Topics can only be ARRAY, LINKED_LIST, HASHTABLE, TREE, GRAPH, RECURSION, DIVIDE_AND_CONQUER, DYNAMIC_PROGRAMMING, SORTING, or OTHERS. (Must be capitalized)"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* One question can only have one title, description and difficulty. It can have multiple topics separated by `,`. It can have multiple test cases, each begin with a `TestCase::` identifier."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alxkohh": 80,
      "zhangj1an": 305,
      "ning-sy210": 31,
      "limhawjia": 399,
      "-": 256
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Topic`, `Email`, and `Difficulty` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Topic: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "// p is a Question object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Consider adding a new command to the Duke Academy. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "-": 213
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Run the `seedu.difficulty.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "e.g. `seedu.difficulty.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "e.g. `seedu.difficulty.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "e.g. `seedu.difficulty.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d DukeAcademy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":imagesDir: images/userguide"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F14-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ":Java11URL: https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ":JDKInstallationWin: https://docs.oracle.com/javase/10/install/installation-jdk-and-jre-microsoft-windows-platforms.htm#JSJIG-GUID-BCE568C9-93D3-49F4-9B0C-9DD4A3419792"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ":JDKInstallationMac: https://docs.oracle.com/javase/10/install/installation-jdk-and-jre-macos.htm#JSJIG-GUID-5F4A0659-BFC5-4CB9-9920-D2DEABF29894"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":problemSetURL:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "By: `CS2103T-F14-1`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Duke Academy is a coding practice platform that operates entirely on your local machine without the need for an internet"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "connection. Whether you are revising for a test, practicing for a tech interview, or just coding for the sheer joy of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "it, DukeAcademy gives you access to a wide range of programming problems from various categories. Easily find something"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "that suits your needs and interests and start honing your skills today!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Duke Academy features a built-in list of problem sets and its very own text editor. Simply choose a problem statement"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "that catches your eye, load it up in the problem display panel and start coding away! Duke Academy also features your"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "very own profile page for you to immediately view all of your accomplishments at a glance. Your profile page also helps"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "you keep track of the problems that you have attempted and those you have bookmarked, so that you can get back to them"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "easily at a later time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "For educators, you can use Duke Academy as a platform to administer your assignments or practice questions. If you have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "questions of your own you would like to test your students, you can use the built-in question loader in DukeAcademy to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "set your own questions and then distribute the updated _questionBank.json_ file to your students through your favourite"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "communication channels."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Duke Academy is optimized for those who prefer to work with a CLI (Command Line Interface) while still enjoying the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "benefits of a GUI (Graphical User Interface). If you are unfamiliar with using a CLI (which is an important skill for all"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "programmers), you can get used to it while working on your coding skills here in DukeAcademy!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". Ensure you have link:{Java11URL}[Java 11] or above installed in your Computer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "- Refer to the following links for the complete walk-through (link:{JDKInstallationMac}[macOS] / link:{JDKInstallationWin}[windows])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Download the latest DukeAcademy.jar link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". Double-click the .jar file to start the app. The GUI should appear in a few seconds. If the app cannot be launched by double-clicking:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "For Windows:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "- Launch Notepad (or any text editor), then copy and paste the following line into the text editor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " java -jar [name_of_file].jar"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "- Replace \"[name_of_file]\" with whatever name you have saved the .jar file as."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "- Save the text file as a .bat file in the same location as the .jar file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "- Then double-click on the newly created .bat file to run the app."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". When launching the app for the first time, it will create a folder named _DukeAcademy_ in the directory where your jar is located."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "- This folder will contain all of your app\u0027s data. To fix any errors related to corrupted data, delete this folder and the app will be reinstalled."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::quickstart1.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". Once the app is launched, you will immediately be greeted with the main User Interface of the app."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::homepage_annotated.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The User Interfaces that are important for now:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "1. *Command Box*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "This will be the field where you input all your commands. After you press the kbd:[Enter] button, your command will be executed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "e.g. typing *`showall`*, followed by pressing kbd:[Enter] will display all the questions in the app."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "+"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "To find out about the commands available in Duke Academy, please visit \u003c\u003cFeatures\u003e\u003e."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2. *Result Box*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Once you have executed a command, a feedback will be displayed in this field."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. after executing *`showall`* command, \"List all questions...\" will be displayed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "3. *Tab Panes*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Consists of 5 different tabs: _Home_, _Questions_, _Workspace_, _Notes_ and _Help_"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". After executing *`showall`* in the *CommandBox*, find a question that interests you and type `attempt [Qn Index]`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "  into the *CommandBox* to start your DukeAcademy experience."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "_Note: the index of a question is the number displayed next to its title._"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::questionindex.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[Overview]]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The application is divided into 5 separate tabs, each one of them serving a specific purpose. You can toggle between the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "different tabs by entering `tab` into the *CommandBox*."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::dashboard1[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Dashboard Tab"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The *Dashboard* allows you to keep track of your learning journey and progress made in Duke Academy."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::dashboard.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "On the *Dashboard* you can:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ". See the percentage of questions you completed and your current skill tier."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "+"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Novice 0 - 29 % {nbsp} +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Apprentice 30 - 49 % {nbsp} +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Master 50 - 69 % {nbsp} +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Grandmaster 70 - 89 % {nbsp} +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Duke 90 - 100 %"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Keep track of the questions that you are currently attempting."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ". Keep track of the questions that you bookmarked."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::dashboard1[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Questions Tab"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The *Questions* tab contains a list of all the available questions and also a window to view your problem statements."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "You can use commands such as `browse` and `find` to filter through the list of questions in order to find what you"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "are looking for. `browse` can lookup any keywords in titles, difficulty, description, topics, etc. `find` only finds by titles. _(View \u003c\u003cFeatures\u003e\u003e for more details.)_"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::questionspage.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* To quickly see all questions, enter `showall` into the *CommandBox*."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* To view the problem statement for a question, enter `view \u003cQn Index\u003e`. The problem statement will then be displayed"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  on the right."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::overview[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Workspace Tab"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The workspace is where you will work on the various questions."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::workspace.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". *Problem Statement Display*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the question that you are currently attempting."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ". *Program Evaluation Panel*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "This panel displays the correctness of your program when evaluated against the pre-defined list of test cases tied to the question you are solving."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". *Editor*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "A built-in editor for you to write your code."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- To submit your attempt, enter `submit` into the *CommandBox*."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- To begin your attempt on a question, enter `attempt \u003cQn Index\u003e` into the *CommandBox*."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- To submit your attempt, enter `submit` into the *CommandBox*."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Notes Tab"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The notes page is where you can record notes or even sketch out some of your ideas to aid your learning process."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::notespage.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". *NotesListDisplay*"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Displays all of the notes that you have previously created."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". *CurrentNoteTitle*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Shows the title of the note that you are currently viewing/editing."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". *NoteTextInput*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Input space for any text-based notes that you wish to record."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". *Sketchpad*"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "+"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "A canvas for you to draw any ideas you may have pertaining to data structures!"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- To create a new note, enter `newnote \u003cTitle\u003e` into the *CommandBox*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- To open an exiting note, enter `opennote \u003cId\u003e into the *CommandBox*."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- The id of the note is the number that appears next to the title in the *NotesListDisplay*."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- To save any changes to your notes, enter `savenote` into the *CommandBox*."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::overview[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::help1[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Help Tab"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The help tab is where you can get a quick overview of commands used in Duke Academy, and the URL to the official User Guide."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::help.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::help1[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::beforestart[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[[BeforeStart]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d Before you start"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". The evaluator searches for a class with the class name `Main` as the entry point into your program. Please ensure"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "that you declare your *main method* in a class called `Main`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". The program evaluator uses *stdin* to feed your program inputs and *stdout* to receive your program\u0027s outputs. Thus,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "it is important that your program uses the `Scanner` class to read inputs and for you to print your results."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Take note that your program is being evaluated *on your local machine* and not within a container or a virtual machine."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Thus, *do not write any code that you would not want to run on your local machine*."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ". Most importantly, remember to have fun!"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::beforestart[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Commands are entered into the *CommandBox*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Words within square braces `[]` are the parameters to be supplied by you, the user."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. in `attempt[id]`,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`id` is a parameter which can be used as `attempt 1`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Parameters are *compulsory*."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Parameters with `…`​ after them can accept multiple entries."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. `browse [category]...` can be used as"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "`browse easy linkedlist hashtable recursion` (i.e. 4 entries), etc."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::help[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Access Help Tab: `help`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Navigates to the *Help* Tab. +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The *Help* tab contains a quick overview of commands used in Duke Academy, and also the URL to the official User Guide."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*Format:* `help`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::help.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::help[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::dashboard[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d\u003d Access Dashboard: `dashboard`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Navigates to the *Dashboard* Tab. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The Dashboard allows the user to keep track of his learning journey and progress made in Duke Academy."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*Format:* `dashboard`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::dashboard.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::dashboard[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d List all questions: `showall`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Navigates to the *Questions* Tab and displays all available questions."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `showall`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::listallquestions.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//end::showall[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::bookmark[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Adding bookmark: `bookmark`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Bookmarks a specific question."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `bookmark [id]`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The id of a question can be found next to its title."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* The bookmarked question will appear in the list of bookmarked questions located within your *Personal Dashboard*."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::bookmark.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::bookmark[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//tag::deletebookmark[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Removing bookmark: `deletebookmark`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Removes the bookmark from a specific question."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `deletebookmark [id]`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The id of a question can be found next to its title."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* The question with the bookmark removed will disappear from the list of bookmarked questions located within your *Personal Dashboard*."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "//end::deletebookmark[]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Find question by title : `find`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Searches for question of which the title contains *strictly* the keywords entered."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `find [keyword]...`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *NOTE*: This function does not work for character sequences!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. Searching for `su` will *NOT* yield questions with titles such as `Sudoku` or `The Supreme Seven`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The search is case insensitive."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g `recursion` will match `Recursion`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The order of the keywords does not matter."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. `Fun tree` will match `tree Fun`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Questions with title matching at least one keyword will be displayed"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. searching for `sudoku adder` will yield questions with titles such as `Valid Sudoku` and `Two Number Adder`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `find binary search tree` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all questions containing the substrings \"binary\",  \"search\" and \"tree\" in their title."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `find fizz buzz` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all the questions containing the substrings \"fizz\" and \"buzz\" in its title, but not questions with"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "titles such as \"fizzbuzz\"."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Browse by keywords: `browse`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Searches through all questions with the specified keyword(s). A question is listed as a search result as long as it"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "contains one of the keyword(s) in their _title, topics, description, status_ or _difficulty_."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `browse [keywords]...`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *NOTE*: This function does *NOT* work for character sequences!"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. Searching for `su` will not yield questions with titles that do not strictly contain the word \"su\", such as \"super\"."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The category is case insensitive."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g `easy` will match `Easy`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Typing `browse topic` would not list all topics. You can only browse by specific topics. The complete list of topics include: `ARRAY`, `LINKED_LIST`, `HASHTABLE`, `TREE`, `GRAPH`, `RECURSION`,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`DIVIDE_AND_CONQUER`, `DYNAMIC_PROGRAMMING`, `SORTING`, `OTHERS`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `browse hashtable linkedlist` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all questions that contain \"hashtable\" and \"linkedlist\"."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `browse number` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays questions that contain strictly the keyword \"number\"."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Questions that do not and instead contain words"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "with \"number\" as a substring of a word in their _title, topics, description, status_ or _difficulty_ will not be displayed."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Viewing the problem statement : `view`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the problem statement of the question."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `view [id]`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Displays the problem statement with the corresponding id."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The id of the question can be seen next to its title."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::view.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `view 1` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the question with the id \"1\" in the right side window of the GUI, as shown in the above picture."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Attempting a question : `attempt`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Navigates to the *Questions* tab where you can code your solution to solve the problem statement."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `attempt [id]`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Displays the question with the corresponding id on the upper-left of the GUI."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The *Editor* will appear on the right side for you to code your solution."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::attempt.png[width\u003d1000\"]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::submit[]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Submitting your answer: `submit`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Submits your solution.​ Your code will be compiled and run against test cases. The results will be displayed in"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "the *ProgramEvaluationDisplay* on the bottom left of the GUI."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `submit`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Make sure to check that your code compiles or you will receive an error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Remember to import the relevant packages that you have used in your code!"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::submit.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::submit[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//tag::notes[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Creating a new note: `newnote`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Navigates to the *Notes* tab and creates a new note with the given title."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `newnote [title]`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* The new note will be loaded immediately into the notes tab"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* You can start writing/drawing your ideas in the note text input or the sketchpad."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Save any changes you wish to make using the `savenote` command."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::newnotecommand.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `newnote Linked Lists` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Creates a new note titled \"Linked Lists\" and loads it into the Notes page for you to edit/view."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Saving changes to a note: `savenote`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Navigates to the *Notes* tab and saves any changes made to the note that you were previously viewing/editing."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `savenote`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* The saved changes will be reflected the next time you open the note again."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "//end::notes[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Opening an existing note: `opennote`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Navigates to the *Notes* tab and opens the note corresponding to the id for viewing/editing."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `opennote [id]`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Be careful as there is no way to retrieve your notes once they are deleted!"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::opennotecommand.png[width\u003d\"800\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `opennote 1` +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Navigates to the *Notes* page after opening the note with the id 1."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Deleting an existing note: `deletenote`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Navigates to the *Notes* tab and deleting the note corresponding to the id."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `deletenote [id]`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Displays the text content of the note into the note text input"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Displays the sketch of the note into the sketchpad"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `deletenote 1` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Navigates to the *Notes* page after deleting the note with the id 1."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//tag::load[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Loading new questions: `loadquestions`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Imports new questions into the application through a text file."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Format:* `loadquestions [filename]`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Your text file should be located in the `../DukeAcademy/newQuestions/` directory. The `DukeAcademy` folder"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "is located in the same directory as where you put the jar file."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Your text file should follow the format specified at \u003c\u003cCustom-Questions\u003e\u003e."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `loadquestions my_problem_set.txt` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Loads the questions from the file \"my_problem_set.txt\" located in the `../DukeAcademy/newQuestions/` directory."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "We have prepared a dummy problem set for you to try out as shown in diagram below."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::default_problem_set.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Type `loadquestions NewProblems.txt` (case sensitive), and"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "two new questions titled `Apple` and `Banana` will be loaded onto Duke Academy."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//end::load[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Exit the application: `exit`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Exits the application"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `exit`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//tag::summary[]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Q:* How do I transfer my own problem sets to another computer?"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*A:* Copy the problem set text file into DukeAcademy’s home folder on the other computer"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "and repeat the ​ loadquestions​ command."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Q:* How do I transfer data to another computer?"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*A:* Install the app in the other computer and overwrite the empty data file it creates"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "with the file that contains the data of your previous DukeAcademy folder."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*Q:* What is the format of problem setting?"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*A:* It should contain the following: problem statement, input and output files, difficulty"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "level, solution, as well as algorithm category. Check out \u003c\u003cCustom-Questions\u003e\u003e for detailed reference."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Q:* What if I want to delete questions?"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*A:* Currently there is no delete question feature implemented. To restore to default setting, delete the `DukeAcademy` folder located at the same directory as the `DukeAcademy.jar`, and restart the app."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Home: `home`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* List all questions: `showall`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Adding bookmark: `bookmark [id]`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Removing bookmark: `deletebookmark [id]`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Find by question title: `find​ [keyword]...`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Browse by category: ​`browse​ [keyword]...`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* View: `view​ [id]`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Attempt a question: `attempt​ [id]`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Submit:​ `submit`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Load questions: ​`loadquestions​ [filename]`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Create a new note: `newnote [title]`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Save current note: `savenote`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Open a note: `opennote [id]`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Delete a note: `deletenote [id]`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Switch tab sequentially: `tab`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Exit: `exit`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//end::summary[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Question storage file format"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* The text file is a json list of json objects representing each question."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Each question is a json object with the following key-value pairs."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- title: a string representing the title of the question"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- description: a string representing the description and preamble of the question"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- tc: a list of json objects representing the list of test cases (see below for details)"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Each test case is another json object with the following key-value pairs."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- input: the input for the test case"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "- result: the expected result for the test case"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "****"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//tag::customqn[]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[[Custom-Questions]]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Format for Custom Questions"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::custom_questions.png[width\u003d\"920\"]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Create a .txt file."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* The format of a question goes like follows:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "```"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question::"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Title::"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Description::"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Difficulty::"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Topics::"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "TestCase::"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Input::"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Output::"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "```"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* All inputs must be in the order stated above."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Title, Description can be any non-empty string."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Difficulty can only be `EASY`, `MEDIUM` or `HARD`. (Must be capitalized)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Topics can only be `ARRAY`, `LINKED_LIST`, `HASHTABLE`, `TREE`, `GRAPH`, `RECURSION`, `DIVIDE_AND_CONQUER`, `DYNAMIC_PROGRAMMING`, `SORTING`, or `OTHERS`. (Must be capitalized)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* One question can only have one title, description and difficulty. It can have multiple topics separated by `,`. It can have multiple test cases, each begin with a `TestCase::` identifier."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* For sample questions, refer to the `../DukeAcademy/newQuestions/NewProblems.txt` file."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "//end::customqn[]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alxkohh": 54,
      "zhangj1an": 71,
      "ning-sy210": 145,
      "limhawjia": 243,
      "-": 98
    }
  },
  {
    "path": "docs/UsingPlantUml.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".The UI class diagram without additional formatting"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArrowLength.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "|image::AllDown.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "|image::UpAndDown.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "|image::HiddenArrows.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "|image::ABeforeC.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "|image::CBeforeA.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "|image::PackagesAndConsistency.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "-": 210
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveQuestionBank(standardQuestionBank)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "UniquePersonList o-right-\u003e Question"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e Topic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e Status"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e Difficulty"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 6,
      "-": 15
    }
  },
  {
    "path": "docs/diagrams/CommandLogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface CommandLogic {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    executeCommand()"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "docs/diagrams/CommandLogicManager.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class CommandLogicManager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface CommandSupplier {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + Command : getCommand(commandText)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class CommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + void : registerCommand(commandWord, supplier)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + Command : parseCommandText(commandText)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface CommandFactory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getCommandWord()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + Command : getCommand(arguments)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandLogicManager-|\u003e CommandSupplier"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandLogicManager*--\"1\" CommandParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandSupplier \u003c|- CommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandLogicManager -|\u003e CommandFactory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "docs/diagrams/CommandLogicSequence.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "User -\u003e Application: Enter command text"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e CommandLogicManager: executeCommand(commandText)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate CommandLogicManager"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandLogicManager -\u003e CommandParser: parseCommandText(commandText)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandParser -\u003e Command : \u003c\u003ccreate\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandParser -\u003e CommandLogicManager: Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandLogicManager -\u003e Command : executeCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Command -\u003e CommandLogicManager : CommandResult"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CommandLogicManager -\u003e Application: CommandResult"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate CommandLogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e User: Ui feedback"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 19
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "if () then ([command commits AddressBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    :Save AddressBook to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1,
      "-": 15
    }
  },
  {
    "path": "docs/diagrams/Compiler.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface Compiler {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + ClassFile : compileJavaFile(JavaFile file)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ClassFile {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - String canonicalName"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - String classPath"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getCanonicalName()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getClassPath()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getAbsolutePath()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + File : toFile()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + boolean : equals()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class JavaFile {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Compiler -\u003e ClassFile"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Compiler -\u003e JavaFile"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 23
    }
  },
  {
    "path": "docs/diagrams/CompilerEnvironment.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface CompilerEnvironment {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + JavaFile : createJavaFile(UserProgram program)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + JavaFile : getJavaFile(String name)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + void : clearEnvironment()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + void : close()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class JavaFile {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - String canonicalName"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - String classPath"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getCanonicalName()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getClassPath()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getAbsolutePath()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + File : toFile()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + boolean : equals()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CompilerEnvironment -\u003e JavaFile"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 22
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Package Question {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Class Question"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Class Difficulty"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Class Topic"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "UniquePersonList o--\u003e \"*\" Question"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e Title"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e Topic"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e Status"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e Difficulty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Title -[hidden]right-\u003e Topic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Topic -[hidden]right-\u003e Difficulty"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Difficulty -[hidden]right-\u003e Status"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "ModelManager --\u003e\"1\" Question : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 16,
      "-": 40
    }
  },
  {
    "path": "docs/diagrams/NoteClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class Note {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - title : String"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - content : String"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - sketchId : UUID"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getTitle()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getContent()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + UUID : getSketchId()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 11
    }
  },
  {
    "path": "docs/diagrams/NoteSavingSequence.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e NotesLogicManager: setNoteSubmissionChannel(UI)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "User -\u003e Application: Create new note"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e Application: new Note()"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate Application"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate Application"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e NotesLogicManager: createNewNote(note)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "User -\u003e UI: Draw/write new note"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "User -\u003e Application: Save Note"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e NotesLogicManager: saveNoteFromSubmissionChannel()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate NotesLogicManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "NotesLogicManager -\u003e UI: getNoteAndSketchPair()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "UI -\u003e NotesLogicManager: Note and Sketch"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "NotesLogicManager -\u003e NoteBankStorage: Modify and Save  new note"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate NoteBankStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate NoteBankStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "NotesLogicManager -\u003e SketchManager: saveSketch(sketchId, sketch)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate SketchManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate SketchManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate NotesLogicManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 23
    }
  },
  {
    "path": "docs/diagrams/NotesLogic.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface NotesLogic {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    setNoteSubmissionChannel(channel)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    getAllNotesList()"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    addNoteWithSketch(note, sketch)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    addNote(note)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    saveNoteFromSubmissionChannel()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    replaceNote(oldNote, newNote)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    getSelectedNote()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    selectNote(id)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    deleteNote(id)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 15
    }
  },
  {
    "path": "docs/diagrams/NotesLogicManager.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class NotesLogicManager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class SketchManager"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface NoteBankStorage"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface NoteBank"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface NoteSubmissionChannel {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + getNoteAndSketchPair(note, sketch)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "NotesLogicManager *--\"1\" SketchManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "NotesLogicManager *--\"1\" NoteBankStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "NotesLogicManager *--\"1\" NoteBank"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "NotesLogicManager *--\"1\" NoteSubmissionChannel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "NoteBankStorage -|\u003e NoteBank"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 17
    }
  },
  {
    "path": "docs/diagrams/ProgramExecutor.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface ProgramExecutor {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + CompletableFuture\u003cProgramOutput\u003e : executeProgram(ClassFile program, ProgramInput input)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ProgramOutput {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getOutput()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + Optional\u003cRuntimeError\u003e : getRuntimeError()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + ProgramOutput : append(String string)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + ProgramOutput : appendNewLine(String string)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + {static} ProgramOutput : getEmptyProgramOutput()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + {static} ProgramOutput : getErroredProgramOutput(String errorMessage)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ProgramInput {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getInput()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramExecutor -\u003e ProgramOutput"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramExecutor -\u003e ProgramInput"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 23
    }
  },
  {
    "path": "docs/diagrams/ProgramSubmissionLogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface ProgramSubmissionLogic {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    getTestResultObservable()"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    getCurrentQuestionObservable()"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    setCurrentQuestion()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    submitUserProgram(userProgram)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    setUserProgramSubmissionChannel(channel)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    submitUserProgramFromSubmissionChannel()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    closeProgramSubmissionLogicManager()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 13
    }
  },
  {
    "path": "docs/diagrams/ProgramSubmissionLogicManager.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ProgramSubmissionLogicManager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class StandardCompiler"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class StandardCompilerEnvironment"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class StandardProgramExecutor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestExecutor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface UserProgramChannel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + UserProgram : getProgram()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor *--\"1\" StandardCompilerEnvironment"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor *--\"1\" StandardCompiler"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor *--\"1\" StandardProgramExecutor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramSubmissionLogicManager *--\"1\" TestExecutor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramSubmissionLogicManager *--\"1\" StandardCompilerEnvironment"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramSubmissionLogicManager *--\"1\" UserProgramChannel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramSubmissionLogicManager -|\u003e StandardCompiler"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramSubmissionLogicManager -|\u003e StandardProgramExecutor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 24
    }
  },
  {
    "path": "docs/diagrams/ProgramSubmissionSequence.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e ProgramSubmissionLogicManager: setUserProgramChannel(UI)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate ProgramSubmissionLogicManager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate ProgramSubmissionLogicManager"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "User -\u003e Application: Attempt new question"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e ProgramSubmissionLogicManager: setCurrentQuestion(question)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate ProgramSubmissionLogicManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate ProgramSubmissionLogicManager"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "User -\u003e UI: Enter solution"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "User -\u003e Application: Submit command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Application -\u003e ProgramSubmissionLogicManager: submitUserProgramFromSubmissionChannel()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate ProgramSubmissionLogicManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramSubmissionLogicManager -\u003e UI: getUserProgram()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "UI -\u003e ProgramSubmissionLogicManager: userProgram"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramSubmissionLogicManager -\u003e TestExecutor: runTestCases(testCases, userProgram)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate TestExecutor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor -\u003e ProgramSubmissionLogicManager: TestResult"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate TestExecutor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate ProgramSubmissionLogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "UI -\u003e UI: Update result from observable"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 25
    }
  },
  {
    "path": "docs/diagrams/QuestionsLogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface QuestionsLogic {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    getAllQuestionsList()"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    getAllFilteredQuestionsList()"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    filterQuestionsList(predicate)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    addQuestion(question)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    getQuestion(id)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    setQuestion(id, question)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    replaceQuestion(oldQuestion, newQuestion)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    deleteAllQuestions()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    getSelectedQuestion()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    selectQuestion(id)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 16
    }
  },
  {
    "path": "docs/diagrams/QuestionsLogicManager.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class QuestionsLogicManager"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface QuestionBank"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface QuestionBankStorage"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "QuestionsLogicManager *--\"1\" QuestionBankStorage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "QuestionBankStorage *--\"1\" QuestionBank"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "QuestionsLogicManager -|\u003e QuestionBank"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 12
    }
  },
  {
    "path": "docs/diagrams/SketchManager.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class SketchManager {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + WritableImage : loadSketch(sketchId)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + void : saveSketch(sketchId, WritableImage)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + void : deleteSketch(sketchId)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 9
    }
  },
  {
    "path": "docs/diagrams/TestCaseClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestCase {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - String input"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    - String expectedResult"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getInput()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getExpectedResult()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 9
    }
  },
  {
    "path": "docs/diagrams/TestExecutorSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[-\u003e TestExecutor:runTestCases"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate TestExecutor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor -\u003e CompilerEnvironment:clearEnvironment"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate CompilerEnvironment"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate CompilerEnvironment"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor -\u003e CompilerEnvironment:createJavaFile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate CompilerEnvironment"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "CompilerEnvironment -\u003e TestExecutor:JavaFile"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate CompilerEnvironment"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor -\u003e Compiler:compileJavaFile"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate Compiler"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Compiler -\u003e TestExecutor:ClassFile"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate Compiler"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "loop test cases"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor -\u003e ProgramExecutor:executeProgram with input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate ProgramExecutor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ProgramExecutor -\u003e TestExecutor:CompletableFuture\u003cProgramOutput\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate ProgramExecutor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor -\u003e TestExecutor:mapTestCaseResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate TestExecutor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate TestExecutor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "end"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestExecutor -\u003e TestExecutor:packageTestResult"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "activate TestExecutor"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[\u003c-TestExecutor:TestResult"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deactivate TestExecutor"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 35
    }
  },
  {
    "path": "docs/diagrams/TestResultDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + isSuccessful()"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + getNumPassed()"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + getResults()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + getCompileError()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + equals()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestCaseResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + isSuccessful()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + getInput()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + getExpectedOutput()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + getActualOutput()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + getRuntimeError()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + equals()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "together {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    class CompileError {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        + getMessage()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    class RuntimeError {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        + getMessage()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestResult *-- \"*\" TestCaseResult"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestResult *-- \"1\" CompileError"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "TestCaseResult *-- \"1\" RuntimeError"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 34
    }
  },
  {
    "path": "docs/diagrams/UserProgramClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class UserProgram {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -String className"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -String sourceCode"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getClassName()"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    + String : getSourceCode()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 8
    }
  },
  {
    "path": "docs/diagrams/submitSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "participant \":UI\" as UserInterface LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "participant \":CommandLogicManager\" as CommandLogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "participant \"c:Command\" as Command LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "[-\u003e UserInterface : \"submit\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "activate UserInterface"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "UserInterface -\u003e CommandLogicManager : executeCommand(submit)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "activate CommandLogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "CommandLogicManager -\u003e CommandParser : parseCommandText(submit)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "create Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "CommandParser -\u003e Command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Command --\u003e CommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "CommandParser --\u003e CommandLogicManager : c"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "CommandLogicManager -\u003e Command : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Command --\u003e CommandLogicManager : result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Command -[hidden]-\u003e CommandLogicManager : result"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "destroy Command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "CommandLogicManager --\u003e UserInterface"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "deactivate CommandLogicManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "[\u003c-- UserInterface : display result"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "deactivate UserInterface"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 43
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".imageblock .text-center \u003e .title {text-align: center !important;}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "#header .details span.status a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:center;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0;text-align: center;}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "limhawjia": 3,
      "-": 404
    }
  },
  {
    "path": "docs/team/alxkohh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d Alex Koh Nan Yu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ":imagesDir: ../images/ak_ppp"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d PROJECT: Duke Academy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Duke Academy is an all-in-one programming practice app targeted for students taking introductory and intermediate programming classes. While most of the user interaction happens through a CLI, the app also comes with a GUI built with JavaFX. Duke Academy was developed by a team of 4 software engineering students, and has a codebase of about 15k LOC, mostly written in Java. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Here is a preview of Duke Academy:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "image::gui.png[align\u003d\"center\" width\u003d\"800\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Major enhancement*: Implemented the Dashboard, as well as two relevant user commands that interacts with it, namely `bookmark` `deletebookmark`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** What it does: The Dashboard allows the user to keep track of his learning journey in Duke Academy, through three GUI components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "1) Gamified progress indicator, with both percentage of questions completed and a corresponding skill tier"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "2) The list of questions the user is still attempting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "3) The list of questions specially bookmarked by the user +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "The `bookmark` command allows the user to add a question to the list of bookmarked questions, while the `deletebookmark` command allows the user to remove any question from that list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Justification: The Personal Dashboard improves user experience significantly. When it comes to programming practice, there are many cases where a student wants to note down a particular question for future reference. For example, a student might find a few questions particularly challenging for him, and he wants to note down these questions for future revision. The `bookmark` command would allow him to conveniently do that, without the traditional need for pen and paper or an external notepad application. This is because the list of bookmarked questions on the Personal Dashboard would update immediately upon the bookmark command. The student is also able to remove any of the questions from the bookmarked list using the deletebookmark command. Also, the inclusion of a gamified progress indicator can actually provide many students with an extra source of motivation and interest towards the arduous and challenging activity of programming."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Highlights: The implementation of `bookmark` command and `deletebookmark` command required a deep understanding of the Question class, because Question objects were required to be either bookmarked or not bookmarked. Also, the Personal Dashboard was developed to be able to support other commands implemented by other developers in the team, namely `attempt` and `submit`. Hence, it required strong understanding of the code written by other developers, and more importantly, effective communication with them to deliver a fully functional dashboard that can accurately support all 4 commands, `bookmark`, `deletebookmark`, `attempt` and `submit`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Minor enhancement*: Added a Program Evaluation Panel that allows the user to view how well his program performed against the pre-defined test cases tied to each question."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dalxkohh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dalxkohh\u0026tabRepo\u003dAY1920S1-CS2103T-F14-1%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dalxkohh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dalxkohh\u0026tabRepo\u003dAY1920S1-CS2103T-F14-1%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub, in terms of creation, assignment and tracking of GitHub issues, and also deadline scheduling of the version release."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*** Modified AB3\u0027s `help` command to provide user with a quick overview of all commands used in Duke Academy, through the Help Tab (https://github.com/AY1920S1-CS2103T-F14-1/main/pull/175[#175])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*** Updated README Page to be aligned with the app\u0027s full release (https://github.com/AY1920S1-CS2103T-F14-1/main/pull/95[#95], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/125[#125])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*** Wrote About Us Page (https://github.com/AY1920S1-CS2103T-F14-1/main/pull/14[#14], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/19[#19], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/96[#96], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/116[#116])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*** Wrote Contact Us Page (https://github.com/AY1920S1-CS2103T-F14-1/main/pull/15[#15], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/20[#20], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/98[#98])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*** Contributed to the User Guide for Dashboard, Bookmark, DeleteBookmark, Help (https://github.com/AY1920S1-CS2103T-F14-1/main/pull/174[#174], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/197[#197])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*** Contributed to the Developer Guide for Ui component, Dashboard, Bookmark (https://github.com/AY1920S1-CS2103T-F14-1/main/pull/79[#79], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/193[#193], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/197[#197])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "*** Provided assistance with GUI development through expertise with Gluon Scene Builder"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddashboard1]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddashboard]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbookmark]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletebookmark]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhelp1]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhelp]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dui]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbookmark]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanualtesting]"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 74
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "AddressBook - Level 3 is a desktop question bank application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "-": 69
    }
  },
  {
    "path": "docs/team/limhawjia.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d Lim Haw Jia - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":imagesDir: ../images/hj_ppp"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":stylesDir: ../stylesheets/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d Project: Duke Academy"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Duke Academy is a Java based programming practice application equipped with a wide range of questions related to the field of Data Structures and Algorithms."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Duke Academy was built to emulate a Command Line Application where users interact with the GUI by typing commands into a command box."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "This is to allow new learners to also familiarize themselves with using a Command Line Interface, an invaluable skill for all programmers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Main GUI of Duke Academy"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::DukeAcademyGUI.png[align\u003d\"center\" width\u003d\"800\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Duke Academy is an integrated platform with a built-in text editor, an auto-grader and a note-taking feature."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "DukeAcademy can also be used as a teaching tool by educators as they can set their own questions to be loaded by their students using our simplified text format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d My Roles and Contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The following segment illustrates the different roles and tasks that I have performed for our team in detail."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "It also provides a bit of justification for the different choices that I have made pertaining to these roles and tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Change underlying architecture to suit our needs [refactor]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "_Due to the increased complexity of our product, a large part of the existing architecture of AddressBook3 had to be changed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Most of the changes can be summarized into the 3 following sections :_"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d *Separate Logic component*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  * Split the old `Logic` interface in AddressBook3 into separate interfaces, each with their own specialized functions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  * The new interfaces are `CommandLogic`, `QuestionsLogic`, `ProgramSubmissionLogic` and `NotesLogic`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  * Each interface facilitates operations pertaining to a different part of our application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Justification :"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Functionality of our application can be split into more cohesive components"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Reduce coupling to make the codebase more  testable and maintainable"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d *Implemented Observer pattern* +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  * Created a new simple and lightweight observable class that can be customized using Java generics."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Justification :"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "** Enable UI components to observe and reflect changes in the application state without introducing them as unnecessary dependencies."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "** JavaFX\u0027s native Observable class was over-engineered for our use case."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d *Refactor Command pattern*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Change the implementation of the Command pattern to be more flexible."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `execute()` no longer depends on `Model`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Parsing of command arguments is now handled by individual commands."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Open-closed principle is maintained by registering commands into `CommandLogic` with a `Supplier`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `Supplier` is in charge of injecting dependencies into the various commands."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Justification :"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* New commands no longer depend on `Model` and have their own dependencies."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* New commands require their own unique argument parsing logic."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Program evaluation feature [feature]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *What it does* : +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  Allows users\u0027 solutions to be automatically evaluated by our application. The solution is evaluated against test cases specified in the `Question` class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *Justification* : +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  It is difficult to come up with your own test cases to evaluate your solutions whenever you attempt programming questions. It is also very cumbersome to run each test case manually. Allowing users to automatically have their solutions evaluated will allow them to focus more on their learning."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* *Highlights* :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "** Compile and runtime errors are also displayed to the user in the event that they occur so that users are able to learn from their mistakes."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "** A _Time Limit Exceeded_ error is displayed if the user\u0027s program takes too long to complete. This will allow users to know if their solutions are properly optimized."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Program evaluation example"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::ProgramEvaluation.png[align\u003d\"center\" width\u003d\"800\"]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Compile error example"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::CompileError.png[align\u003d\"center\" width\u003d\"800\"]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Note-taking feature [feature]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* What it does : +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  Allows users to record notes in the form of text or a simple sketch."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Justification : +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  Being able to pen down ideas is extremely useful when coming up with solutions to programming questions. Furthermore, being able to take notes for future reference will help to reinforce our users\u0027 learning."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Highlights : +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  In addition to taking notes in the form of text, user\u0027s are also able to sketch their ideas within a a sketch pad and have them saved for future reference. This is particularly useful when dealing with data structures."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ".Notes page preview"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "image::NotePage.png[align\u003d\"center\" width\u003d\"800\"]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d\u003d Tabs [feature]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* What it does  : +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  Splits the various functions of the application -- _browsing and viewing of questions_, _attempting of questions and evaluation of results_, _note-taking_, into individual tabs."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Justification : +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  Separating the various functions of our application into their own separate tabs will reduce clutter and enable users to be more organized in their learning."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* Highlights : +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "  In line with the _Command Line_ theme, the user is able to switch tabs by typing the command _\"tab\"_ instead of using a mouse-click."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d Other Contributions"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "** Project management"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Managed and enforced branching workflow on GitHub"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Set up auto-publishing of docs (https://github.com/AY1920S1-CS2103T-F14-1/main/commit/ccde6b5fba8b4d5294678804d0e63c03804ce24c[commit])"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Managed releases `v1.3` - `v1.4` on GitHub (2 releases)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "** Product design:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Updated the GUI layout and color scheme (Pull requests https://github.com/AY1920S1-CS2103T-F14-1/main/pull/112[#112])"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Cosmetic tweaks to contents of the User Guide (Pull requests https://github.com/AY1920S1-CS2103T-F14-1/main/pull/13[#13] https://github.com/AY1920S1-CS2103T-F14-1/main/pull/34[#34])"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Actively contributed to the writing of the User Guide and Developer Guide (Pull requests https://github.com/AY1920S1-CS2103T-F14-1/main/pull/77[#77] https://github.com/AY1920S1-CS2103T-F14-1/main/pull/83[#83]  https://github.com/AY1920S1-CS2103T-F14-1/main/pull/185[#185] https://github.com/AY1920S1-CS2103T-F14-1/main/pull/190[#190])"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "** Testing:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Wrote tests to validate the code base (Pull requests https://github.com/AY1920S1-CS2103T-F14-1/main/pull/87[#87] https://github.com/AY1920S1-CS2103T-F14-1/main/pull/88[#88])"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Actively wrote tests for most major pull requests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/25[Liberry])"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003d\u003d Code Contributions"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Click the links below to view my code contributions on RepoSense."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "On RepoSense, you can select options to view my functional code and test code."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dF14\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dlimhawjia\u0026tabRepo\u003dAY1920S1-CS2103T-F14-1%2Fmain%5Bmaster%5D[Functional code]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dF14\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dlimhawjia\u0026tabRepo\u003dAY1920S1-CS2103T-F14-1%2Fmain%5Bmaster%5D[Test code]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Given below are some of the sections that I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "include::../UserGuide.adoc[tag\u003doverview]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsubmit]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Given below are some of the sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogic]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogic1]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dprogramevaluation]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dprogramevaluationalternative]"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 19,
      "limhawjia": 137
    }
  },
  {
    "path": "docs/team/ningshengying.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d Ning Sheng Ying - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ":imagesDir: ../images/nsy_ppp"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d PROJECT: Duke Academy"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "My team of 4 Computer Science students were tasked with enhancing a basic Command Line Interface (CLI) desktop addressbook"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "application for our Software Engineering project. We chose to morph it into a coding practice application called Duke Academy."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Duke Academy is written in the Java programming language and the Graphical User Interface (GUI) of the application is"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "created with JavaFX. It relies primarily on Command Line Interface (CLI) as its primary input for user commands, which"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "means users will mostly be typing to perform specific functions instead of clicking with a mouse (unlike GUI)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Duke Academy is designed for both coding students and educators alike. It is equipped with a library of programming"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "questions related to the field of Data Structures and Algorithms for students to practice their coding skills and allows"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "educators to set their own problem statements for their students to attempt. This enhanced application also allows"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "students to run their programs within the app itself, track their programming practice history and make personalized notes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "all in one application, without the need for external tools."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "This is how our project looks like:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".GUI of Duke Academy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::homepage.png[]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "This section shows a brief overview of my contributions to the project. A summary of my coding, documentation and other"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "relevant details will be listed below."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Major enhancement added*: I have integrated a built-in text editor with a line counter component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *What it does:*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". The built-in text editor allows users to code out their solutions internally within Duke Academy itself."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". It is also fully capable of performing auto-indentations for the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". The text-editor also has a line counter component which helps the user to keep track and manage his code for"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "convenient reference."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *Justification (Text Editor):* This feature improves the product significantly because users do not need to source for an external"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "text editor to code out their solutions for problems and can instead do everything within Duke Academy itself. This then"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "increases the productivity of users as they would not need to constantly switch between the external editor and Duke"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Academy while attempting questions, providing a hassle-free coding experience."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *Justification (Auto-Indentation):* This quality-of-life feature significantly increases the user coding experience"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "in Duke Academy because it helps users organize and compartmentalize their code automatically. Having auto-indentation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "means that users do not need to key in 4 spaces manually after every code block, and thus it helps the user uphold"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "code readability without the user having to do anything on their part."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *Justification (Line Counter):* This feature adds significant value to the product because it allows users to keep track"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "of the micro-details in their code. For example, should anything go wrong with their code (e.g. compilation error), they"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "can quickly trace down the source of the bug and make the necessary changes efficiently and conveniently without having"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "to trace through line-by-line."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *Highlights:* This feature is designed to imitate, as closely as possible, the functions of an Integrated Development"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Environment (IDE) editor. The implementation of this feature was exceptionally challenging as there were no exact tutorials"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "on how to design a text editor with the above mentioned features specifically, and thus it was only made possible by putting"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "together all the small parts."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Minor enhancement*: Added a UI format for QuestionCard."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *What it does:* Displays a summary of the question with a clean look that fits the theme of DukeAcademy. It is redesigned"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "to reflect the topics of the selected question, and the attributes such as whether it is attempted by the user and its"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "difficulty level."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *Justification:* This provides the user with adequate information at a glance to help him decide if it is a question"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "he/she is qualified to attempt or is it a question that has been attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *Highlights:* This was easy to implement because it only requires a slight redesign. This redesign was also necessary"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "because the old Contact Card used in AddressBook was insufficient in reflecting certain details of a question while also"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "having irrelevant fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Minor enhancement*: Redesigned Dashboard (home) page to fit the theme of DukeAcademy more."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Minor enhancement*: Ensured that all UI components scale properly and appropriately with window size."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Minor enhancement*: Configured the dimensions of the application window to prevent users from minimizing the window too"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "much such that the inner components become unusable."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dning-sy210\u0026tabRepo\u003dAY1920S1-CS2103T-F14-1%2Fmain%5Bmaster%5D[RepoSense Report]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*** Managed releases `v1.2.1` and `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*** Assigned project milestones for `v1.2`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*** Updated the GUI theme (Pull requests https://github.com/AY1920S1-CS2103T-F14-1/main/pull/99[#99])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*** Made early changes to the redesign of the UI for Duke Academy (Pull requests https://github.com/AY1920S1-CS2103T-F14-1/main/pull/99[#99], https://github.com/AY1920S1-CS2103T-F14-1/main/pull/191[#191])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (https://github.com/ning-sy210/ped/tree/master/files[PE Dry Run])"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "|We had to update the original AddressBook User Guide with instructions for the enhancements that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "we had added. The following is an excerpt from our Duke Academy User Guide, showing additions that I have"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "made."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Questions"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The *Questions* tab contains a list of all the available questions and also a window to view your problem statements."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "You can use commands such as `browse` and `find` to filter through the list of questions in order to find what you"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "are looking for. `browse` can lookup any keywords in titles, difficulty, description, topics, etc. `find` only finds by titles. _(View \u003c\u003cFeatures\u003e\u003e for more details.)_"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". To quickly see all questions, enter `showall` into the *Command Box*."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". To view the problem statement for a question, enter `view \u003cQn Index\u003e`. The problem statement will then be displayed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "on the right."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::questionspage.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Workspace"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The workspace is where you will work on the various questions."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::workspace.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". *Problem Statement Display*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the question that you are currently attempting."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". *Program Evaluation Panel*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the correctness of your program when evaluated against the pre-defined list of test cases tied to the question you are solving."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ". *Editor*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "A built-in editor for you to write your code."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "To submit your attempt, enter `submit` into the *Command Box*."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "To begin your attempt on a question, enter `attempt \u003cQn Index\u003e` into the *Command Box*."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "To submit your attempt, enter `submit` into the *Command Box*."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Commands are entered into the *CommandBox*"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Words within square braces `[]` are the parameters to be supplied by you, the user."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. in `attempt[id]`,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "`id` is a parameter which can be used as `attempt 1`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Parameters are *compulsory*."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Parameters with `…`​ after them can accept multiple entries."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. `browse [category]...` can be used as"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "`browse easy linkedlist hashtable recursion` (i.e. 4 entries), etc."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Find question by title : `find`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Searches for question of which the title contains *strictly* the keywords entered."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `find [keyword]...`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *NOTE*: This function does not work for character sequences!"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. Searching for `su` will *NOT* yield questions with titles such as `Sudoku` or `The Supreme Seven`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The search is case insensitive."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g `recursion` will match `Recursion`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The order of the keywords does not matter."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. `Fun tree` will match `tree Fun`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Questions with title matching at least one keyword will be displayed"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. searching for `sudoku adder` will yield questions with titles such as `Valid Sudoku` and `Two Number Adder`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `find binary search tree` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all questions containing the substrings \"binary\",  \"search\" and \"tree\" in their title."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `find fizz buzz` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all the questions containing the substrings \"fizz\" and \"buzz\" in its title, but not questions with"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "titles such as \"fizzbuzz\"."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Browse by keywords: `browse`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Searches through all questions with the specified keyword(s). A question is listed as a search result as long as it"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "contains one of the keyword(s) in their _title, topics, description, status_ or _difficulty_."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `browse [keywords]...`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *NOTE*: This function does *NOT* work for character sequences!"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. Searching for `su` will not yield questions with titles that do not strictly contain the word \"su\", such as \"super\"."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The category is case insensitive."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g `easy` will match `Easy`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Typing `browse topic` would not list all topics. You can only browse by specific topics. The complete list of topics include: `ARRAY`, `LINKED_LIST`, `HASHTABLE`, `TREE`, `GRAPH`, `RECURSION`,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "`DIVIDE_AND_CONQUER`, `DYNAMIC_PROGRAMMING`, `SORTING`, `OTHERS`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `browse hashtable linkedlist` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all questions that contain \"hashtable\" and \"linkedlist\"."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `browse number` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays questions that contain strictly the keyword \"number\"."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Questions that do not and instead contain words"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "with \"number\" as a substring of a word in their _title, topics, description, status_ or _difficulty_ will not be displayed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Viewing the problem statement : `view`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the problem statement of the question."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `view [id]`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Displays the problem statement with the corresponding id."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The id of the question can be seen next to its title."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::view.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `view 1` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the question with the id \"1\" in the right side window of the GUI, as shown in the above picture."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "//end::find[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Attempting a question : `attempt`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Navigates to the *Questions* tab where you can code your solution to solve the problem statement."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `attempt [id]`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Displays the question with the corresponding id on the upper-left of the GUI."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The *Editor* will appear on the right side for you to code your solution."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::attempt.png[width\u003d1000\"]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Submitting your answer: `submit`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Submits your solution.​ Your code will be compiled and run against test cases. The results will be displayed in"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "the *ProgramEvaluationDisplay* on the bottom left of the GUI."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `submit`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Make sure to check that your code compiles or you will receive an error message."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Remember to import the relevant packages that you have used in your code!"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::submit.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `find [keyword]...`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *NOTE*: This function does not work for character sequences!"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. Searching for `su` will *NOT* yield questions with titles such as `Sudoku` or `The Supreme Seven`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The search is case insensitive."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g `recursion` will match `Recursion`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The order of the keywords does not matter."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. `Fun tree` will match `tree Fun`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Questions with title matching at least one keyword will be displayed"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. searching for `sudoku adder` will yield questions with titles such as `Valid Sudoku` and `Two Number Adder`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `find binary search tree` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all questions containing the substrings \"binary\",  \"search\" and \"tree\" in their title."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `find fizz buzz` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all the questions containing the substrings \"fizz\" and \"buzz\" in its title, but not questions with"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "titles such as \"fizzbuzz\"."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Browse by keywords: `browse`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Searches through all questions with the specified keyword(s). A question is listed as a search result as long as it"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "contains one of the keyword(s) in their _title, topics, description, status_ or _difficulty_."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `browse [keywords]...`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *NOTE*: This function does *NOT* work for character sequences!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g. Searching for `su` will not yield questions with titles that do not strictly contain the word \"su\", such as \"super\"."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The category is case insensitive."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "e.g `easy` will match `Easy`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Typing `browse topic` would not list all topics. You can only browse by specific topics. The complete list of topics include: `ARRAY`, `LINKED_LIST`, `HASHTABLE`, `TREE`, `GRAPH`, `RECURSION`,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "`DIVIDE_AND_CONQUER`, `DYNAMIC_PROGRAMMING`, `SORTING`, `OTHERS`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `browse hashtable linkedlist` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays all questions that contain \"hashtable\" and \"linkedlist\"."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `browse number` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Finds and displays questions that contain strictly the keyword \"number\"."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Questions that do not and instead contain words"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "with \"number\" as a substring of a word in their _title, topics, description, status_ or _difficulty_ will not be displayed."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Viewing the problem statement : `view`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the problem statement of the question."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `view [id]`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Displays the problem statement with the corresponding id."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The id of the question can be seen next to its title."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::view.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* `view 1` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Displays the question with the id \"1\" in the right side window of the GUI, as shown in the above picture."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Attempting a question : `attempt`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Navigates to the *Questions* tab where you can code your solution to solve the problem statement."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `attempt [id]`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Displays the question with the corresponding id on the upper-left of the GUI."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* The *Editor* will appear on the right side for you to code your solution."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::attempt.png[width\u003d1000\"]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Submitting your answer: `submit`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Submits your solution.​ Your code will be compiled and run against test cases. The results will be displayed in"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "the *ProgramEvaluationDisplay* on the bottom left of the GUI."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "*Format:* `submit`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Make sure to check that your code compiles or you will receive an error message."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* Remember to import the relevant packages that you have used in your code!"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "****"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::submit.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "|Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d Editor Panel"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The editor panel is the panel right next to the *Problem Display Panel* and the *Program Evaluation Panel*. The editor panel"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "consists of two parts: The main text editor and the line counter component."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The main text editor is where the user codes and is responsible for feeding the text input to the `Program Submission"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Logic Manager` for compilation of the user-written code. It is capable of performing auto-indentations for the user and"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "this is achieved by overwriting the function of the ENTER key. Through helper methods available in `Editor.java`, the"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "number of unclosed braces can easily be counted so as to perform the appropriate indentations."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "There are other modifications to key inputs to make the text editor imitate the behaviour of an actual IDE editor. These"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "include overwriting the TAB key to input 4 spaces instead of 8, and also performing auto de-indentation when a right brace"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "(i.e. \"}\") is typed. Refer to the activity diagram below for the possible outcomes."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".Activity Diagram for Text Input"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::TextInputActivityDiagram.png[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* For this implementation, we have used a onKeyRelease event to overwrite the function of the ENTER key."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* We recognize that this implementation is not desirable as the auto-indentation is only performed only after the ENTER"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "key is released. Meaning to say, if a character is typed while the ENTER key is held down, those characters will not be"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "auto-indented."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "The line counter component of the editor keeps track of the number of lines written by the user in the editor. It takes"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "in a `SimpleIntegerProperty` and is updated automatically whenever there are changes to the text observed in the editor."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "This is achieved through adding a `InvalidationListener` to the text property of the editor, along with using the"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "necessary helper functions to count the number of newline characters in the text. The Sequence Diagram below shows how"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "the `UI` interacts with the `Editor` class to generate the line counter in the text editor."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".Sequence Diagram for Generating Line Counter Input"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "image::LineCounterSequenceDiagram.png[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "Aspect: Overwriting ENTER key function"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *Alternative 1*: Overwrite with onKeyPress event"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *Pro*: The auto-indentation will behave exactly as intended."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *Drawback*: Due to a bug in JavaFX that could not be resolved, we decided to avoid this implementation."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "+"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "If we were to choose to overwrite with onKeyPress event, the event will have to be consumed as anything specified in the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "onKeyPress event will be executed *before* the original key function is performed. However, the mentioned bug earlier causes"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "the onKeyPress events to be executed twice. Which means, 2 newline characters will be inserted on a single press of the"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "overwritten ENTER key. Because of this drawback, we decided to go for the alternative implementation."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "* *Alternative 2 (Current Choice)*: Overwrite with onKeyRelease event"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *Pros*: Avoids entering 2 newline characters with a single ENTER key press and auto-indention still works. OnKeyRelease"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "events are executed *after* the original key function is performed. Thus, there is no need to include inserting a newline character in"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "the onKeyRelease event, which avoids the issue faced by Alternative 1."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "** *Drawback*: The auto-indentation is not behaving ideally. As mentioned earlier, because the auto-indentation only happens"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "after the ENTER key is released, characters typed while the ENTER key is held down will not be auto-indented."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alxkohh": 34,
      "ning-sy210": 393
    }
  },
  {
    "path": "docs/team/zhangj1an.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d Zhang Jian - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ":imagesDir: ../images/zj_ppp"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d PROJECT: Duke Academy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "Duke Academy is a Java programming platform equipped with a library of programming questions related to the field of Data Structures and Algorithms, as well as an automated judging system. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "This is what our project looks like:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::homepage_annotated.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Figure 1. The graphical user interface for Duke Academy."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d *Major enhancement*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Model*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1. Created the `Question` object and the corresponding attributes, such as `title`, `description`, `topics`, etc."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Storage*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1. Refactored the json serializer and deserializer to target Duke Academy."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** What it does: Duke Academy is able to save data into json format and load questions from json files."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Justification: prevents loss of user data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Highlights: requires interaction between logic and storage. Requires knowledge about json serializer/deserializer\u0027s API and its command usage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2. Implemented the `loadquestions` command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** What it does: Imports new questions into the application through a text file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Justification: User is able to load external questions into this app. As such, professors can distribute practice assignments through this platform despite the fact that the materials may change yearly."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Highlights: Requires knowledge on reading files from a given directory, create objects based on the string parsed, interaction with the storage model, update the new changes onto the user interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1. implemented *the `view` command*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** What it does: Displays the problem statement of the question."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Justification: the user need to view the problem description in order to understand the requirement of the problem context, as well as the specified input/output format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Highlights: requires user interface to be updated based on the data obtained from the storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2. added *the `browse` command*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** What it does: allows the user to search through all questions with the specified keyword(s). A question is listed as a search result as long as it"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "contains one of the keyword(s) in their _title, topics, description, status_ or _difficulty_."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Justification: This feature improves the product significantly because it would be convenient for a user who want to search questions by a specific category or certain keywords."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Highlights: This enhancement involves all the questions in the question bank. It requires interaction between models and storage to actively filter questions by certain predicates. It also requires the UI to reflect the changes in the question list after the filtering conditions have been updated. It required a comprehensive understanding of the code base architecture."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Credits: _{part of it is re-used from the `find` command in the original AB3 code base.}_"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "3. added *the `find` command*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** What it does: Searches for question of which the title contains *strictly* the keywords entered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Justification: benefits the user if they only want to search by question title."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Credits: _{part of it is re-used from the `find` command in the original AB3 code base.}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "4. added *the `showall` command*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** What it does: Navigates to the *Questions* Tab and displays all available questions."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Justification: after user searches for questions with certain keywords, they may want to restore to the original question list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Credits: _{part of it is re-used from the `list` command in the original AB3 code base.}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Tests*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Implemented tests for the `showall` command, namely `ShowallCommandFactoryTest` and `ShowallCommandTest`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d *Minor enhancement*:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Added a Problem Display Panel to the Questions and Workspace Tab."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d *Code contributed*:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[[Functional code]] [[Test code]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d *Other contributions*:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*** Assigned milestones for `v1.2`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*** Created tags for the issues, such as `Type.Enhancement`, `Severity.High`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide\u0027s quickstart section."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*** Contributed to Developer Guide and User Guide as shown at the end."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*** PRs reviewed: #13, #14, #15, #20, #21, #36, #47, #50, #52, #53, #57, #63, #64, #70, #71, #87, #91, #102, #104, #133, #173"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:   Typos in UG, Feature not present: 6 Load commands stated in UG not implemented, Budget command not working with only amount and description entered)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*** Integrated 2 third party library (Travis, Codacy) to the project."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Loading new questions: `loadquestions`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Imports new questions into the application through a text file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Format:* `loadquestions [filename]`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Your text file should be located in the `../DukeAcademy/newQuestions/` directory. The `DukeAcademy` folder"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "is located in the same directory as where you put the jar file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Your text file should follow the format specified at \u003c\u003cCustom-Questions\u003e\u003e."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* `loadquestions my_problem_set.txt` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Loads the questions from the file \"my_problem_set.txt\" located in the `../DukeAcademy/newQuestions/` directory."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "We have prepared a dummy problem set for you to try out as shown in diagram below."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::default_problem_set.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Type `loadquestions NewProblems.txt` (case sensitive), and"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "two new questions titled `Apple` and `Banana` will be loaded onto Duke Academy."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Q:* How do I transfer my own problem sets to another computer?"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*A:* Copy the problem set text file into DukeAcademy’s home folder on the other computer"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "and repeat the ​ loadquestions​ command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Q:* How do I transfer data to another computer?"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*A:* Install the app in the other computer and overwrite the empty data file it creates"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "with the file that contains the data of your previous DukeAcademy folder."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[[Custom-Questions]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Format for Custom Questions"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::custom_questions.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Create a .txt file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* The format of a question goes like follows:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question::"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Title::"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Description::"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Difficulty::"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Topics::"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "TestCase::"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Input::"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Output::"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* All inputs must be in the order stated above."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Title, Description can be any non-empty string."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Difficulty can only be `EASY`, `MEDIUM` or `HARD`. (Must be capitalized)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Topics can only be `ARRAY`, `LINKED_LIST`, `HASHTABLE`, `TREE`, `GRAPH`, `RECURSION`, `DIVIDE_AND_CONQUER`, `DYNAMIC_PROGRAMMING`, `SORTING`, or `OTHERS`. (Must be capitalized)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* One question can only have one title, description and difficulty. It can have multiple topics separated by `,`. It can have multiple test cases, each begin with a `TestCase::` identifier."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* For sample questions, refer to the `../DukeAcademy/newQuestions/NewProblems.txt` file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::ArchitectureSequenceDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/difficulty/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/difficulty/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c\u003cDesign-Observable, *`Observable`*\u003e\u003e is responsible for updates on User Interface if internal data changes."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`LogsCenter`is used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The following five components plays an important role at the architecture level:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The User Interface of the App."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Includes 3 types of executors: the Command Executor, the Program Submission Executor, and the Question Builder Executor,."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* \u003c\u003cDesign-TextExecutor, *`TextExecutor`*\u003e\u003e: Compile the user program and run it against test cases. Output result."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Each of the six components:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "There are 2 main storage components found in the architecture of Duke Academy. They are `QuestionBankStorage` and `NoteBankStorage`. Each storage component serves as a *facade* for the basic operations by the application with regards to *Commands* and *Notes*."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* can save the Duke Academy question bank in json format and read it back."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* can save the notes and read it back."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The storage components are interfaces so their implementation can be changed easily."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "`JsonAdaptedQuestion` serves as a good starting point to understand the implementation."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*JsonAdaptedQuestion:*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Class diagram of the JsonAdaptedQuestion class"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::JsonAdaptedQuestionClassDiagram.png[width\u003d200]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* It contains all the necessary attributes for a question, including title, completion status, difficulty level, isBookmarked, topics belonged to, testCases, userProgram attempted and question description."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Compared with a standard `question` object, this `JsonAdaptedQuestion` object has processed its attributes to be compatible with json format. That is, this object  can be directly serialized to and de-serialized from json files."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* The constructor is used to serialize the `Question` object using the `@JsonProperty` notation."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* The `@JsonProperty` is also able to deserialize strings obtained from json files. The `toModel()` function is then used to construct and return a new `Question` object using attributes it obtained using the getter methods."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Structure"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "We would hereby use `QuestionBankStorage` to illustrate the implementation."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The standard implementation of the `QuestionBankStorage` is the `JsonSerializableStandardQuestionBank` class."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Overview:*"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Overall Structure of the Storage Component for Questions"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::StorageClassDiagram.png[width\u003d300]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The `QuestionBankStorage` manages tasks such as `saveQuestionBank()` or `readQuestionBank()`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The `Question` object is associated to the rest of the files in the same package as follows:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Class Diagram: Compositions that make up the QuestionBank being stored"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::ClassDiagramQuestionStorage.png[width\u003d170]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Problem Statement Panel"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Since the problem description cannot be viewed fully from the question list, we introduced a new problem description panel. As shown on Figure 5, when type `view [id]`, the panel updates to"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "display all the additional information a question has to provide."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".Activity Diagram on View command"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "image::viewactivity.png[width\u003d300]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d General Procedure of Command execution:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* User types `view [id]` in the command box."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The `MainApp` class receives the input, calls the `commandLogic` class to executes the command and returns an `CommandResult` object."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Details"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "The implementation details are narrated following user cases as follows:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". When the `view` command is executed, it switches the pane to \"Question\" by calling the `applicationState` object\u0027s `setCurrentActivity(Activity pane)` method."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". It then updates the `questionLogic` object of the current question being viewed by calling its `selectQuestion(int id)` method."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". The `ProblemStatementPanel` UI utilizes a JavaFx `@FXML` property called `TextArea` to display information."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Every time when the `QuestionPage` pane or the `Workspace` pane is displayed, their respective UI controller checks whether `questionLogic` refers to a"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "question that is currently of interest by the user. If positive, they will call the `ProblemStatementPanel` controller\u0027s `setProblemStatement(String problemStatement)` to display data."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "As such, the functionality required by problem display panel is well covered."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Future Improvement"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "In version 2.0, we aim to achieve rich text display of problem description. It can be in MarkDown format, containing LaTeX formulas, images, URL links,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "coloured text, formatted code snippet, etc."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "This is my design consideration on how to update the problem statement panel when a `view` command is entered."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Alternative 1 (current choice): Use `questionLogic` to track the current `Question` being viewed by the user. `UI` components can access attributes in `Logic` components and display them."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Pros: More OOP. It is clear that `UI` does not interfere with the tasks responsible by the `Logic` component. There is less coupling, making the code easier to understand and undertake testing."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Cons: Complicates the code base by abstracting another attribute onto the `QuestionLogic` class."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Alternative 2 : Stores the `Problem Description` content as a String temporarily. Use `MainWindow` controller to check whether"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "the command generated is a `view` command. If yes, force the `ProblemStatementPanel` to update."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Pros: Easy to implement based on the existing code base."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** Cons: It breaks OOP\u0027s open and close principle. It mixed up `UI` class with `Logic` class."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* has a need to practice a lot of algorithm / data structure problems with the following conditions satisfied:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** instant assessment of answers submitted"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** practices under timed conditions"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** automatic progress checker"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** personal tutor to recommend problems with suitable difficulties and topics"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** fun in learning with achievement badges to unlock"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "** no WiFi needed"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "(For all use cases below, the *System* is the `Duke Academy` and the *Actor* is the `user`)."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 Set questions"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1. User requests to input problem sets."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2. Duke Academy requires a file path."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "3. User select file path."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "4. Duke Academy imports the problem sets and prompts success message."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* 4a. The input format is incorrect."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "+"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Duke Academy reports wrong format error. Duke Academy resumes at step 3."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Time taken to assess the submitted programmes should not exceed 3 minutes."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Data not intended for disclosure should be encrypted with minimum needs so that it\u0027s protected from direct access."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". Should not take more than 5 seconds to load the initial screen."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ". If interrupted, the program should provide an auto-saved version and prompt for restore when the app opens next time."
      }
    ],
    "authorContributionMap": {
      "alxkohh": 38,
      "zhangj1an": 302
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets config path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the config path"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Sets config path."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param configPath the config path"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param parameters the parameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the app parameters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 13,
      "limhawjia": 4,
      "-": 61
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The entry point of application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param args the input arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 10,
      "limhawjia": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandLogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.attempt.AttemptCommandFactory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.bookmark.BookmarkCommandFactory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.bookmark.DeleteBookmarkCommandFactory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.browse.BrowseCommandFactory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exit.ExitCommandFactory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.find.FindCommandFactory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.help.HelpCommandFactory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.home.DashboardCommandFactory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.load.LoadCommandFactory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.notes.DeleteNoteCommandFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.notes.NewNoteCommandFactory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.notes.OpenNoteCommandFactory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.notes.SaveNoteCommandFactory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.showall.ShowallCommandFactory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.submit.SubmitCommandFactory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.tab.TabCommandFactory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.view.ViewCommandFactory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogicManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogicManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogicManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.notes.JsonNoteBankStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.notes.NoteBankStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonQuestionBankStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.QuestionBankStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.ui.Ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.ui.UiManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The constant VERSION."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static Config config;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The Ui."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private NotesLogic notesLogic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ApplicationState applicationState;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public static Config getConfig() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Retrieves config parameters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Sets logging level as described"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DukeAcademy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        initAppPaths(config);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        applicationState \u003d this.initApplicationState();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogic \u003d this.initQuestionsLogic(config);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programSubmissionLogic \u003d this.initProgramSubmissionLogic(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesLogic \u003d this.initNotesLogic(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandLogicManager commandLogic \u003d this.initCommandLogic();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.programSubmissionLogic \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Fatal: Failed to create program submission logic.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.stop();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui \u003d this.initUi(commandLogic, questionsLogic, programSubmissionLogic, applicationState);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param configFilePath the config file path"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the config"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to initialize all of the folders necessary for the app according to the path files specified"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * in the config instance."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param config a config instance."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void initAppPaths(Config config) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path testOutputPath \u003d config.getTestOutputPath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path dataOutputPath \u003d config.getDataPath();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Path loadPath \u003d config.getLoadPath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!testOutputPath.toFile().exists()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Test output folder not found at : \" + testOutputPath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Creating test output folder at : \" + testOutputPath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (!testOutputPath.toFile().mkdirs()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.warning(\"Unable to create test executor output directory : \" + testOutputPath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!loadPath.toFile().exists()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"Loading new question folder not found at : \" + loadPath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"Creating load new questions folder at : \" + loadPath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (!loadPath.toFile().mkdirs()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                logger.warning(\"Unable to create load new questions directory\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    + \" : \" + testOutputPath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            createCustomQuestionFile(loadPath.resolve(\"NewProblems.txt\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!dataOutputPath.toFile().exists()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Data folder not found at : \" + dataOutputPath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Creating data folder at : \" + testOutputPath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            createQuestionBankFile(dataOutputPath.resolve(\"QuestionBank.json\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            createNoteBankFile(dataOutputPath.resolve(\"NoteBank.json\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Helper method to create a custom question file at the specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * location. Default custom questions are copied."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param loadPath the path at which to create the file."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private void createCustomQuestionFile(Path loadPath) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"Creating custom question text file.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            // Copy default questions"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            FileUtil.createIfMissing(loadPath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            InputStream customQuestionsInputStream \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                this.getClass().getClassLoader().getResourceAsStream("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    \"NewProblems.txt\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (customQuestionsInputStream !\u003d null) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                logger.info(\"Copying custom questions into the specified \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    + \"sample \\\"DukeAcademy/newQuestions\\\" directory\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                Files.copy(customQuestionsInputStream, loadPath,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                customQuestionsInputStream.close();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                logger.warning(\"Fatal: custom questions for loadquestions \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    + \"command not found.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                this.stop();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.warning(\"Unable to create custom question data file for \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"loadquestions usage.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to create a question bank json file at the specified location. Default questions are copied."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questionBankFilePath the path at which to create the file."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void createQuestionBankFile(Path questionBankFilePath) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Creating new question bank.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Copy default questions"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            FileUtil.createIfMissing(questionBankFilePath);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            InputStream defaultQuestionsInputStream \u003d this.getClass().getClassLoader()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    .getResourceAsStream(\"questionBank.json\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (defaultQuestionsInputStream !\u003d null) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                logger.info(\"Copying default questions into the new question bank\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                Files.copy(defaultQuestionsInputStream, questionBankFilePath, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                defaultQuestionsInputStream.close();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.warning(\"Fatal: default questions not found.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.stop();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Unable to create default question bank data file.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to create a note bank json file at the specified location. Default note bank will be empty."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param noteBankFilePath the path at which to create the file."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void createNoteBankFile(Path noteBankFilePath) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Creating new note bank.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FileUtil.createIfMissing(noteBankFilePath);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            InputStream emptyNoteBankInputStream \u003d this.getClass().getClassLoader()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .getResourceAsStream(\"noteBank.json\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (emptyNoteBankInputStream !\u003d null) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.info(\"Copying note bank template into new note bank\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                Files.copy(emptyNoteBankInputStream, noteBankFilePath, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                emptyNoteBankInputStream.close();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Unable to create new note bank data file.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new CommandLogicManager based on the UserPrefs passed into the function. Any commands to be registered"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * in the CommandLogicManager is done in this method."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a CommandLogicManger instance."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private CommandLogicManager initCommandLogic() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Initializing command logic ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.questionsLogic \u003d\u003d null || this.programSubmissionLogic \u003d\u003d null) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Command logic should be initialized after Question and Program Submission logic.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.stop();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandLogicManager commandLogicManager \u003d new CommandLogicManager();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Registering exit command"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ExitCommandFactory exitCommandFactory \u003d new ExitCommandFactory(this.questionsLogic,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programSubmissionLogic, this.notesLogic);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(exitCommandFactory);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Registering attempt command"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        AttemptCommandFactory attemptCommandFactory \u003d new AttemptCommandFactory(this.questionsLogic,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programSubmissionLogic, applicationState);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(attemptCommandFactory);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Registering submit command"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        SubmitCommandFactory submitCommandFactory \u003d new SubmitCommandFactory(this.questionsLogic,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programSubmissionLogic, applicationState);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(submitCommandFactory);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Registering view command"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        ViewCommandFactory viewCommandFactory \u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            new ViewCommandFactory(this.questionsLogic, applicationState);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        commandLogicManager.registerCommand(viewCommandFactory);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Registering home command"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        DashboardCommandFactory dashboardCommandFactory \u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            new DashboardCommandFactory(this.questionsLogic,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programSubmissionLogic, applicationState);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        commandLogicManager.registerCommand(dashboardCommandFactory);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Registering list command"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        ShowallCommandFactory showallCommandFactory \u003d new ShowallCommandFactory(this.questionsLogic, applicationState);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        commandLogicManager.registerCommand(showallCommandFactory);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Registering bookmark command"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        BookmarkCommandFactory bookmarkCommandFactory \u003d new BookmarkCommandFactory(this.questionsLogic);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        commandLogicManager.registerCommand(bookmarkCommandFactory);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Registering Load command"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        LoadCommandFactory loadCommandFactory \u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            new LoadCommandFactory(this.questionsLogic);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        commandLogicManager.registerCommand(loadCommandFactory);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Registering Find command"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        FindCommandFactory findCommandFactory \u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            new FindCommandFactory(this.questionsLogic, this.applicationState);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        commandLogicManager.registerCommand(findCommandFactory);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Registering browse command"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        BrowseCommandFactory browseCommandFactory \u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            new BrowseCommandFactory(this.questionsLogic, this.applicationState);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        commandLogicManager.registerCommand(browseCommandFactory);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Registering tab command"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TabCommandFactory tabCommandFactory \u003d new TabCommandFactory(this.applicationState);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(tabCommandFactory);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Registering delete bookmark command"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        DeleteBookmarkCommandFactory deleteBookmarkCommandFactory \u003d"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                new DeleteBookmarkCommandFactory(this.questionsLogic);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        commandLogicManager.registerCommand(deleteBookmarkCommandFactory);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Registering help command"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        HelpCommandFactory helpCommandFactory \u003d new HelpCommandFactory(this.questionsLogic,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                this.programSubmissionLogic, this.applicationState);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        commandLogicManager.registerCommand(helpCommandFactory);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Registering new note command"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        NewNoteCommandFactory newNoteCommandFactory \u003d new NewNoteCommandFactory(this.notesLogic, this.applicationState"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        );"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(newNoteCommandFactory);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Registering open note command"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OpenNoteCommandFactory openNoteCommandFactory \u003d new OpenNoteCommandFactory(this.notesLogic,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.applicationState);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(openNoteCommandFactory);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Registering save note command"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        SaveNoteCommandFactory saveNoteCommandFactory \u003d new SaveNoteCommandFactory(this.applicationState,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.notesLogic);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(saveNoteCommandFactory);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Registering delete note command"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DeleteNoteCommandFactory deleteNoteCommandFactory \u003d new DeleteNoteCommandFactory(this.notesLogic,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.applicationState);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(deleteNoteCommandFactory);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return commandLogicManager;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ApplicationState initApplicationState() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Initializing application state ] \u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new ApplicationState();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new QuestionLogicManager based on the UserPrefs passed into the function."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param config a Config instance."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a QuestionsLogicManager instance."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private QuestionsLogicManager initQuestionsLogic(Config config) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Initializing question logic ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(config.getDataPath().resolve(\"QuestionBank.json\"));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new NotesLogicManager based on the given config preferences."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param config a Config instance"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a NotesLogicManager instance"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private NotesLogicManager initNotesLogic(Config config) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Initializing notes logic ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        NoteBankStorage storage \u003d new JsonNoteBankStorage(config.getDataPath().resolve(\"NoteBank.json\"));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new NotesLogicManager(storage);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new ProgramSubmissionLogicManager based on the UserPrefs passed into the function."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a ProgramSubmissionLogicManager instance."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramSubmissionLogic initProgramSubmissionLogic(Config config) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Initializing program submission logic ] \""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String outputPath \u003d config.getTestOutputPath().toString();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new ProgramSubmissionLogicManager(outputPath);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (LogicCreationException e) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Ui initUi(CommandLogic commandLogic, QuestionsLogic questionsLogic,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                      ProgramSubmissionLogic programSubmissionLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Initializing UI ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return new UiManager(commandLogic, questionsLogic,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            programSubmissionLogic, notesLogic, applicationState);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Starting application ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.info(\"Starting QuestionBank \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping DukeAcademy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Deletes the temporary folder created for test execution purposes"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.programSubmissionLogic !\u003d null) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.programSubmissionLogic.closeProgramSubmissionLogicManager();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 18,
      "zhangj1an": 89,
      "ning-sy210": 10,
      "limhawjia": 233,
      "-": 77
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The constant DEFAULT_CONFIG_FILE."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Path testOutputPath \u003d Paths.get(\"DukeAcademy/tests\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Path dataPath \u003d Paths.get(\"DukeAcademy/data\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private Path loadPath \u003d Paths.get(\"DukeAcademy/newQuestions\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Path getTestOutputPath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return testOutputPath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public Path getLoadPath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return loadPath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setTestOutputPath(Path testOutputPath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.testOutputPath \u003d testOutputPath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Path getDataPath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return dataPath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setDataPath(Path dataPath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.dataPath \u003d dataPath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u0026\u0026 Objects.equals(testOutputPath, o.testOutputPath)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u0026\u0026 Objects.equals(dataPath, o.dataPath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Objects.hash(logLevel, testOutputPath, dataPath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        sb.append(\"Current log level : \").append(logLevel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        sb.append(\"Tests output path : \").append(testOutputPath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        sb.append(\"Data path : \").append(dataPath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 21,
      "-": 52
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String LOG_FILE \u003d \"Logs/DukeAcademyLogs.log\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param config the config"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param name the name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the logger"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param \u003cT\u003e   the type parameter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param clazz the clazz"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the logger"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!Paths.get(LOG_FILE).toFile().exists()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Paths.get(LOG_FILE).getParent().toFile().mkdirs();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Paths.get(LOG_FILE).toFile().createNewFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 10,
      "limhawjia": 8,
      "-": 109
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The constant MESSAGE_UNKNOWN_COMMAND."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The constant MESSAGE_INVALID_COMMAND_FORMAT."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The constant MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public static final String MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The constant MESSAGE_QUESTIONS_LISTED_OVERVIEW."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public static final String MESSAGE_QUESTIONS_LISTED_OVERVIEW \u003d \"%1$d questions listed!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 15,
      "limhawjia": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The constant VERSION_REGEX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Version."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param major         the major"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param minor         the minor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param patch         the patch"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param isEarlyAccess the is early access"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets major."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the major"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets minor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the minor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets patch."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the patch"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Is early access boolean."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalArgumentException the illegal argument exception"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 34,
      "limhawjia": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Data conversion exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause the cause"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Illegal value exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Illegal value exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 4,
      "limhawjia": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets image."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param imagePath the image path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the image"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param condition the condition"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param condition    the condition"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param errorMessage the error message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 9,
      "limhawjia": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Require all non null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param items the items"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param items the items"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param items the items"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Read config optional."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param configFilePath the config file path"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the optional"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws DataConversionException the data conversion exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Save config."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param config         the config"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param configFilePath the config file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 14,
      "limhawjia": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Is file exists boolean."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param file the file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param file the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param file the file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param file the file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param file the file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param file    the file"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param content the content"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 27,
      "limhawjia": 1,
      "-": 79
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        .findAndRegisterModules()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        .configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Serialize object to json file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param \u003cT\u003e               the type parameter"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param jsonFile          the json file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param objectToSerialize the object to serialize"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Deserialize object from json file t."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param \u003cT\u003e                        the type parameter"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param jsonFile                   the json file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param classOfObjectToDeserialize the class of object to deserialize"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the t"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param \u003cT\u003e                        the type parameter"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the optional"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param \u003cT\u003e      the type parameter"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e           The generic type to create an instance of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param json          the json"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param instanceClass the instance class"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // return JsonSerializableQuestionBank"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws JsonProcessingException the json processing exception"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "         * Instantiates a new Level deserializer."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        LevelDeserializer() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            super(Level.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 40,
      "limhawjia": 4,
      "-": 134
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String VALID_WORD_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param t the t"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the details"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param s the s"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the first word of a string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param s the string to be processed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the first word of the string."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IllegalValueException if the string does not contain a valid word."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String getFirstWord(String s) throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String stripped \u003d s.stripLeading();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!stripped.matches(VALID_WORD_REGEX)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalValueException(\"String is not a valid word.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return stripped.split(\"[\\\\s]+\", 2)[0].trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the a new string with the first word removed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param s the string to be processed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the remainder of the string after the first word is removed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IllegalValueException if the string does not contain a valid word."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String removeFirstWord(String s) throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String stripped \u003d s.stripLeading();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!stripped.matches(VALID_WORD_REGEX)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalValueException(\"String is not a valid word.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (stripped.split(\"[\\\\s]+\", 2).length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return stripped.split(\"[\\\\s]+\", 2)[1].stripLeading();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 38,
      "-": 67
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/data/Pair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Implementation of a pair data structure. Each pair is a tuple of 2 elements. In this implementation, the first"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * element is referred to as the head and the second element is referred to as the tail."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * @param \u003cT\u003e the type parameter of the head of the pair"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * @param \u003cU\u003e the type parameter of the tail of the pair"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final T head;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final U tail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Pair(T head, U tail) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tail \u003d tail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public T getHead() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.head;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public U getTail() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.tail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 25
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    CommandResult execute() throws CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/CommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Encapsulates the creation of commands and its dependencies and exposes an interface that can be registered in"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the command logic."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface CommandFactory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Gives the command word that will be used to match to this factory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the command word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String getCommandWord();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the corresponding command class instance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandArguments the command text from the user\u0027s input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the corresponding command class instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws InvalidCommandArgumentsException the invalid command arguments exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Command getCommand(String commandArguments) throws InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 22
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/CommandLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Orchestrates the execution of commands within the application and exposes a simple interface for the main"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * application driver to use."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface CommandLogic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Executes a command based on the command text that is provided from the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandText the command text that should contain the command keyword and the necessary arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a command result instance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CommandException                 if the execution of the command fails"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws InvalidCommandArgumentsException if the arguments in the command text is invalid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws InvalidCommandKeywordException   if the command text provided does not have a valid command word"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    CommandResult executeCommand(String commandText) throws CommandException, InvalidCommandArgumentsException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 20
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/CommandLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Implementation of the CommandLogic interface. This implementation uses a helper class, CommandParser to help"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * parse its commands. Any commands to be executed by this CommandLogic implementation has to be registered through"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the registerCommand method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CommandLogicManager implements CommandLogic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final CommandParser commandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Command logic manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandLogicManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Registers a command that will now be executed by this CommandLogic instance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandWord     the keyword of the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandSupplier a supplier of command instances."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void registerCommand(String commandWord, CommandSupplier commandSupplier) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandParser.registerCommand(commandWord, commandSupplier);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Registers a command through its factory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandFactory the factory used to generate the command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void registerCommand(CommandFactory commandFactory) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandParser.registerCommand(commandFactory.getCommandWord(), commandFactory::getCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult executeCommand(String commandText) throws CommandException, InvalidCommandArgumentsException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            InvalidCommandKeywordException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Command command \u003d this.commandParser.parseCommandText(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return command.execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 6,
      "limhawjia": 41
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Helper class used by CommandLogicManager to keep track and instantiate registered Command classes. Any text passed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * into parseCommandText method will be split into its command keyword and arguments, which will be used to generate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the corresponding Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class CommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String commandNotRecognizedMessage \u003d \"Command word not recognized : \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String commandNotValidWord \u003d \"Command is not a valid word : \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Map\u003cString, CommandSupplier\u003e commandFactoryMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandParser.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Command parser."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandParser() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandFactoryMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Registers a command into the command parser for future access."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandWord     the keyword of the command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandSupplier the supplier of the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void registerCommand(String commandWord, CommandSupplier commandSupplier) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandFactoryMap.put(commandWord, commandSupplier);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Instantiates and returns a Command class instance based on the command text provided."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandText the command text used to invoke the command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a command instance corresponding to the command text."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws InvalidCommandKeywordException   the invalid command keyword exception"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws InvalidCommandArgumentsException the invalid command arguments exception"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command parseCommandText(String commandText) throws InvalidCommandKeywordException,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String commandWord;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String commandArguments;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            commandWord \u003d StringUtil.getFirstWord(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            commandArguments \u003d StringUtil.removeFirstWord(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(commandNotValidWord + commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandKeywordException(commandNotValidWord + commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandSupplier supplier \u003d this.commandFactoryMap.get(commandWord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (supplier \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(commandNotRecognizedMessage + commandWord);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandKeywordException(commandNotRecognizedMessage + commandWord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return supplier.getCommand(commandArguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (InvalidCommandArgumentsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Invalid command arguments : \" + commandArguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 68
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param feedbackToUser the feedback to user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param exit           the exit"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * {@code feedbackToUser}, and other fields set to their default value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param feedbackToUser the feedback to user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this(feedbackToUser, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets feedback to user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the feedback to user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Is exit boolean."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return Objects.hash(feedbackToUser, exit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 3,
      "zhangj1an": 17,
      "limhawjia": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/CommandSupplier.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Functional interface to represent a command supplier that accepts arguments for the command to act on."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "@FunctionalInterface interface CommandSupplier {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param arguments the arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws InvalidCommandArgumentsException the invalid command arguments exception"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    Command getCommand(String arguments) throws InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 9,
      "limhawjia": 8
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/attempt/AttemptCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.attempt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command for attempting a question. This command loads the selected question into the registered"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * ProgramSubmissionLogic instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class AttemptCommand implements Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Attempt command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id                  the index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public AttemptCommand(int id, QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                          ApplicationState applicationState) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(AttemptCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Question userSelection \u003d this.questionsLogic.getQuestion(id);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            Status userSelectionStatus \u003d userSelection.getStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (userSelectionStatus \u003d\u003d Status.PASSED) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.info(\"Reattempting question at index \" + id + \" : \" + userSelection);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // Set current attempting question"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                this.programSubmissionLogic.setCurrentQuestion(userSelection);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // Notify user that he has already passed this question"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                String feedback \u003d \"Reattempting question \" + id + \" : \" + userSelection.getTitle() + \" - \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        + \"You have already passed this question successfully.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                // Update app\u0027s current activity"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.applicationState.setCurrentActivity(Activity.WORKSPACE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // Update status of question to ATTEMPTED"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                Question questionToAttempt \u003d this.questionsLogic.getQuestion(id).withNewStatus(Status.ATTEMPTED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.questionsLogic.setQuestion(id, questionToAttempt);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.info(\"Attempting question at index \" + id + \" : \" + questionToAttempt);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                // Set current attempting question"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programSubmissionLogic.setCurrentQuestion(questionToAttempt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                String feedback \u003d \"Attempting question \" + id + \" : \" + questionToAttempt.getTitle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                // Update app\u0027s current activity"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.applicationState.setCurrentActivity(Activity.WORKSPACE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (QuestionNotFoundRuntimeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"No question with id  \" + id + \" found.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 15,
      "zhangj1an": 9,
      "limhawjia": 61
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/attempt/AttemptCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.attempt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory class to represent all the necessary components for creating an AttemptCommand instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class AttemptCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Attempt command factory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState       the applications state model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public AttemptCommandFactory(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                 ApplicationState applicationState) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"attempt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int index \u003d Integer.parseInt(commandArguments.strip());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new AttemptCommand(index, questionsLogic, programSubmissionLogic, applicationState);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Index should be a valid number.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/bookmark/BookmarkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Command to bookmark a question."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class BookmarkCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new Bookmark command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id                  the index"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public BookmarkCommand(int id, QuestionsLogic questionsLogic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(BookmarkCommand.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Returns the question that the user selected to bookmark"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return user selected question"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public Question getUserSelectedQuestion() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        Question userSelection \u003d this.questionsLogic.getQuestion(id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return userSelection;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Returns a command result that notifies the user that no action is taken"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return command result"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public CommandResult notifyUserNoActionTaken() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Simply notify user that question is already bookmarked"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String feedback \u003d \"Question \" + id + \" : \" + getUserSelectedQuestion().getTitle()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                + \" - is already bookmarked.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Bookmarks the question that the user selected"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public void bookmarkUserSelectedQuestion() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        Question bookmarkedVersion \u003d getUserSelectedQuestion().withNewIsBookmarked(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.questionsLogic.setQuestion(id, bookmarkedVersion);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Returns a command result that notifies the user that bookmark was added successfully"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public CommandResult notifyUserBookmarkSuccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String feedback \u003d \"Bookmarked question \" + id + \" : \" + getUserSelectedQuestion().getTitle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Executes the bookmark command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Execution of this command is conditional in nature. If question that user chooses to bookmark"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * is already bookmarked, we will simply notify the user of that through the CLI feedback panel."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Otherwise if the question that user selects is not already bookmarked, we will update the question"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * with a bookmarked version of the same question and notify user of a successful bookmark action."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            Question userSelectedQuestion \u003d getUserSelectedQuestion();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            boolean userSelectedQuestionIsBookmarked \u003d userSelectedQuestion.isBookmarked();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (userSelectedQuestionIsBookmarked) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // Notify user that question selected is already bookmarked, hence no action is taken"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                return notifyUserNoActionTaken();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                bookmarkUserSelectedQuestion();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // Logging as part of defensive programming / developer testing"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                logger.info(\"Bookmarked question \" + id);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                return notifyUserBookmarkSuccess();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (QuestionNotFoundRuntimeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"No question with id  \" + id + \" found.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 94,
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/bookmark/BookmarkCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Factory class to represent all the necessary components for creating an"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * BookmarkCommand instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class BookmarkCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new Bookmark command factory."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questionsLogic    the questions logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public BookmarkCommandFactory(QuestionsLogic questionsLogic) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return \"bookmark\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            int index \u003d Integer.parseInt(commandArguments.strip());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            return new BookmarkCommand(index, questionsLogic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Invalid input. Please call the bookmark command \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    + \"in this format: \u003cbookmark [id]\u003e , where id is the positive integer beside the question title.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 39
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/bookmark/DeleteBookmarkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Command to delete a bookmark made on a question."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class DeleteBookmarkCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new Delete Bookmark command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id                  the id"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DeleteBookmarkCommand(int id, QuestionsLogic questionsLogic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(DeleteBookmarkCommand.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Executes the delete bookmark command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Execution of this command is conditional in nature. If the question that user chooses to delete bookmark,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * is indeed bookmarked, we will update the question to a non-bookmarked version of the same question."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Otherwise if the question that user selects is not bookmarked in the first place, we will simply notify"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * the user of that through the CLI feedback panel."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Question userSelection \u003d this.questionsLogic.getQuestion(id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            boolean userSelectionIsBookmarked \u003d userSelection.isBookmarked();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (userSelectionIsBookmarked) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // Update isBookmarked of question to false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                Question bookmarkedQuestion \u003d userSelection.withNewIsBookmarked(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.questionsLogic.setQuestion(id, bookmarkedQuestion);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.info(\"Deleted bookmark for question \" + id + \" : \" + bookmarkedQuestion);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // Notify user of successful bookmark action"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                String feedback \u003d \"Deleted bookmark for question \" + (id) + \" : \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        + bookmarkedQuestion.getTitle();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // Simply notify user that question is not bookmarked"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                String feedback \u003d \"Question \" + (id) + \" : \" + userSelection.getTitle()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        + \" - is not bookmarked.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (QuestionNotFoundRuntimeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"No question with id  \" + id + \" found.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 57,
      "limhawjia": 12
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/bookmark/DeleteBookmarkCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Factory class to represent all the necessary components for creating an"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * DeleteBookmarkCommand instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class DeleteBookmarkCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new DeleteBookmark command factory."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questionsLogic    the questions logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public DeleteBookmarkCommandFactory(QuestionsLogic questionsLogic) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return \"deletebookmark\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            int index \u003d Integer.parseInt(commandArguments.strip());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            return new DeleteBookmarkCommand(index, questionsLogic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Invalid input. Please call the deletebookmark command \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    + \"in this format: \u003cdeletebookmark [id]\u003e , where id is the positive integer beside the\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    + \" question title.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 40
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/browse/AttributeContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.browse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Tests that a {@code Question}\u0027s {@code Attribute} matches any of the keywords"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class AttributeContainsKeywordsPredicate implements Predicate\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Attribute contains keywords predicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param keywords the keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public AttributeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public boolean test(Question question) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                       .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                           boolean matchTitle \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                               StringUtil.containsWordIgnoreCase(question.getTitle(), keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                           boolean matchDescription \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                               StringUtil.containsWordIgnoreCase(question.getDescription(), keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                           boolean matchStatus \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                               StringUtil.containsWordIgnoreCase(question.getStatus().toString(), keyword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                           boolean matchDifficulty \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                               StringUtil.containsWordIgnoreCase(question.getDifficulty().toString(), keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                           boolean matchTopic \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                               question.getTopics().stream().anyMatch(topic-\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                                   StringUtil.containsWordIgnoreCase(topic.toString(), keyword));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                           return matchTitle || matchDescription || matchStatus || matchDifficulty || matchTopic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                       });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            || (other instanceof AttributeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            \u0026\u0026 keywords.equals(((AttributeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 49
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/browse/BrowseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.browse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The type Browse command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class BrowseCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final AttributeContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final boolean validity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Browse command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic the questions logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param keywords       the keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public BrowseCommand(QuestionsLogic questionsLogic, ApplicationState applicationState, String keywords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(BrowseCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String[] attributeKeywords \u003d keywords.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.predicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            new AttributeContainsKeywordsPredicate(Arrays.asList(attributeKeywords));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validity \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validity \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!validity) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new CommandException(\"Browse should be followed by keywords\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \".\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Update status of question"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic.filterQuestionsList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.info(\"Listing questions that contains keywords specified.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String feedback \u003d \"List all questions that contains the corresponding\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \" keywords as long as they appear in title, topics, description,\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \" status or difficulty.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState.setCurrentActivity(Activity.QUESTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 52,
      "limhawjia": 6
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/browse/BrowseCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.browse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The type Browse command factory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class BrowseCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Attempt command factory."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic the questions logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public BrowseCommandFactory(QuestionsLogic questionsLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return \"browse\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override public Command getCommand(String commandArguments) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new BrowseCommand(questionsLogic, applicationState, commandArguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 28,
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Command exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/exceptions/InvalidCommandArgumentsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown when the arguments provided for a command is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class InvalidCommandArgumentsException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Invalid command arguments exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public InvalidCommandArgumentsException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 10
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/exceptions/InvalidCommandKeywordException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by Command package when the user\u0027s command is not recognized."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class InvalidCommandKeywordException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Invalid command keyword exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public InvalidCommandKeywordException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Invalid command keyword exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public InvalidCommandKeywordException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/exit/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.exit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exit command used to exit the application. Any unsaved work is automatically saved before the application is exited."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Exit command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ExitCommand(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                       NotesLogic notesLogic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(ExitCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cQuestion\u003e currentlyAttemptingQuestion \u003d this.programSubmissionLogic.getCurrentQuestion();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram latestUserProgram \u003d this.programSubmissionLogic.getUserProgramFromSubmissionChannel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Save currently attempting question with the latest user program if present"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (currentlyAttemptingQuestion.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Question oldQuestion \u003d currentlyAttemptingQuestion.get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String loggerMessage \u003d \"Latest question attempt : \" + oldQuestion.getTitle()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\nSaving latest user program : \" + latestUserProgram.getSourceCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(loggerMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Question newQuestion \u003d oldQuestion.withNewUserProgram(latestUserProgram).withNewStatus(Status.ATTEMPTED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.questionsLogic.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"No question attempt found. Skipping program save.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Save the latest user note"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Attempting to save latest note...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic.saveNoteFromNoteSubmissionChannel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(\"Exiting application...\", true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 6,
      "limhawjia": 58
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/exit/ExitCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.exit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory class encapsulating the necessary components for the creation of a Exit command instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ExitCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Exit command factory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ExitCommandFactory(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                              NotesLogic notesLogic) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"exit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!commandArguments.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Exit command does not take any arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new ExitCommand(this.questionsLogic, this.programSubmissionLogic, this.notesLogic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 36
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/find/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The type Find command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final TitleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final boolean validity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Find command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic the questions logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param keywords       the keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public FindCommand(QuestionsLogic questionsLogic, ApplicationState applicationState, String keywords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(FindCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String[] titleKeywords \u003d keywords.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.predicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            new TitleContainsKeywordsPredicate(Arrays.asList(titleKeywords));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validity \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validity \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!validity) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new CommandException(\"Find should be followed by keywords.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Update status of question"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic.filterQuestionsList(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.info(\"Listing questions that contains keywords specified.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String feedback \u003d \"List all questions that contains the corresponding\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \" keywords.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        applicationState.setCurrentActivity(Activity.QUESTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 50,
      "limhawjia": 6
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/find/FindCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The type Find command factory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class FindCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Attempt command factory."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic the questions logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public FindCommandFactory(QuestionsLogic questionsLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return \"find\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override public Command getCommand(String commandArguments) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new FindCommand(questionsLogic, applicationState, commandArguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 28,
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/find/TitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Tests that a {@code Question}\u0027s {@code Title} matches any of the keywords"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Title contains keywords predicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param keywords the keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public boolean test(Question question) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                       .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(question.getTitle(), keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 36
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/help/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Encapsulates a command used to navigate to the Help tab. Any unsaved work is automatically"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * saved before navigating to the Help tab."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new Help command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param applicationState       the application state"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public HelpCommand(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                       ApplicationState applicationState) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(HelpCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        Optional\u003cQuestion\u003e currentlyAttemptingQuestion \u003d this.programSubmissionLogic.getCurrentQuestion();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        UserProgram latestUserProgram \u003d this.programSubmissionLogic.getUserProgramFromSubmissionChannel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (currentlyAttemptingQuestion.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            Question oldQuestion \u003d currentlyAttemptingQuestion.get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            String loggerMessage \u003d \"Latest question attempt : \" + oldQuestion.getTitle()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    + \"\\nSaving latest user program : \" + latestUserProgram.getSourceCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            logger.info(loggerMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            Question newQuestion \u003d oldQuestion.withNewUserProgram(latestUserProgram);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            saveQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            logger.info(\"No question attempt found. Skipping program save.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        applicationState.setCurrentActivity(Activity.HELP);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(\"We are here to help!\", false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void saveQuestion(Question oldQuestion, Question newQuestion) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.questionsLogic.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 67
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/help/HelpCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Factory class encapsulating the necessary components for the creation of a Help command instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class HelpCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new Help command factory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param applicationState       the application state"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public HelpCommandFactory(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              ApplicationState applicationState) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return \"help\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (!\"\".equals(commandArguments)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Help command does not \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    + \"take any arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new HelpCommand(this.questionsLogic, this.programSubmissionLogic, applicationState);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 46
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/home/DashboardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.ui.Dashboard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Encapsulates a command used to navigate to the Dashboard tab. Any unsaved work is automatically"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * saved before navigating to the Dashboard tab."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class DashboardCommand implements Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new Dashboard command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState       the application state"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public DashboardCommand(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                             ApplicationState applicationState) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(Dashboard.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Optional\u003cQuestion\u003e currentlyAttemptingQuestion \u003d this.programSubmissionLogic.getCurrentQuestion();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        UserProgram latestUserProgram \u003d this.programSubmissionLogic.getUserProgramFromSubmissionChannel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (currentlyAttemptingQuestion.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Question oldQuestion \u003d currentlyAttemptingQuestion.get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            String loggerMessage \u003d \"Latest question attempt : \" + oldQuestion.getTitle()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    + \"\\nSaving latest user program : \" + latestUserProgram.getSourceCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(loggerMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Question newQuestion \u003d oldQuestion.withNewUserProgram(latestUserProgram);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            saveQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"No question attempt found. Skipping program save.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        applicationState.setCurrentActivity(Activity.DASHBOARD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(\"Returning to your dashboard...\", false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to save changes to a question."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param oldQuestion the old question to be replaced"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newQuestion the new question."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private void saveQuestion(Question oldQuestion, Question newQuestion) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 9,
      "zhangj1an": 51,
      "limhawjia": 12
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/home/DashboardCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Factory class encapsulating the necessary components for the creation of a Dashboard command instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class DashboardCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new Dashboard command factory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState       the application state"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public DashboardCommandFactory(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    ApplicationState applicationState) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return \"dashboard\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!\"\".equals(commandArguments)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Home command does not \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    + \"take any arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new DashboardCommand(this.questionsLogic, this.programSubmissionLogic, applicationState);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 6,
      "zhangj1an": 35,
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/load/LoadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.load;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The type Load command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class LoadCommand implements Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final List\u003cQuestion\u003e questionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Load command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic     the questions logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param sampleQuestionPath the path whereby questions are stored"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public LoadCommand(QuestionsLogic questionsLogic, Path sampleQuestionPath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        final Logger logger \u003d LogsCenter.getLogger(LoadCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String questions \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            questions \u003d FileUtil.readFromFile(sampleQuestionPath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"The Question resource file cannot be opened.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            questionList.addAll(QuestionLoader.buildFromString(questions));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        questionsLogic.addQuestions(questionList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Give user feedback"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String feedback \u003d \"Added \" + questionList.size() + \" questions to question \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \"bank!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (questionList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            feedback \u003d \"Sorry. Couldn\u0027t manage to load any new questions.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 61
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/load/LoadCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.load;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Class to represent the necessary components for the creation of a Load command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class LoadCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Load command factory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic the questions logic"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public LoadCommandFactory(QuestionsLogic questionsLogic) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return \"loadquestions\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public Command getCommand(String commandArguments)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Path sampleQuestionsFilePath \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            MainApp.getConfig().getLoadPath().resolve(commandArguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!sampleQuestionsFilePath.toFile().exists()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"We cannot find the \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"specified text file titled \\\"\" + commandArguments + \"\\\" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"inside the \\\"DukeAcademy/newQuestions\\\" directory.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"Did you type the file name wrongly?\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return new LoadCommand(this.questionsLogic, sampleQuestionsFilePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 45
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/load/QuestionLoader.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.load;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.QuestionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The type Question loader."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class QuestionLoader {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final Logger logger \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        LogsCenter.getLogger(LoadCommand.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Build from string list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questions the questions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalValueException the illegal value exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public static List\u003cQuestion\u003e buildFromString (String questions)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (questions.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new IllegalValueException(\"The questions cannot be loaded\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String[] questionsString \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            questions.split(\"\\\\s*Question::\\\\s*\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.info(\"the list size is: _\" + questionsString[0] + \"_\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        ArrayList\u003cQuestion\u003e sampleQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        for (String questionString : questionsString) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (questionString.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                logger.info(\"the string is empty~\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            QuestionBuilder questionBuilder \u003d new QuestionBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                addTitle(questionString, questionBuilder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                addDescription(questionString, questionBuilder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                addDifficulty(questionString, questionBuilder);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                addTopics(questionString, questionBuilder);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                addTestCases(questionString, questionBuilder);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Question q \u003d questionBuilder.withStatus(Status.NEW).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            sampleQuestions.add(q);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"\u003d\u003d\u003d\u003da new qn created!\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return sampleQuestions;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Registers Test Cases specified by text file into question."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param question"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static void addTestCases(String source,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                                     QuestionBuilder question) throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Pattern testCasesPattern \u003d Pattern.compile(\"TestCase::\" + \"(.|\\\\n)*\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Pattern.DOTALL);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Matcher matcher \u003d testCasesPattern.matcher(source);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new IllegalValueException(\"No TestCase found for \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"question: \" + question.getTitle() + \"\\n. TestCase should\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \" begin with \\\"TestCase::\\\".\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String[] testCases \u003d matcher.group().trim().split(\"TestCase::\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.info(\"the testcase is: \" + matcher.group().trim());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        for (String testCase: testCases) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (testCase.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"the testcase is: \" + testCase);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Pattern inputPattern \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                Pattern.compile(\"Input::\" + \"((.|\\\\n)*)\" + \"Output::\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Pattern outputPattern \u003d Pattern.compile(\"Output::((.|\\\\n)*)\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Matcher inputMatcher \u003d inputPattern.matcher(testCase);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Matcher outputMatcher \u003d outputPattern.matcher(testCase);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (!inputMatcher.find() || !outputMatcher.find()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                throw new IllegalValueException(\"Format wrong for a \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    + \"testCase from question: \" + question.getTitle() + \"\\n. \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    + \"TestCase format should be \\\"Input::\\\" followed by \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    + \"\\\"Output::\\\".\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"the raw input is: \" + inputMatcher.group());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            String input \u003d inputMatcher.group(1).trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"the input is: \" + input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            String output \u003d outputMatcher.group(1).trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"the raw output is: \" + outputMatcher.group());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"the output is: \" + output);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            TestCase newTestCase \u003d new TestCase(input, output);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            question.withTestCases(newTestCase);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Registers Topics specified by text file into question."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param question"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static void addTopics(String source,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                               QuestionBuilder question) throws IllegalValueException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Pattern topicsPattern \u003d Pattern.compile(\"Topics::(.*?)\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \"TestCase::\", Pattern.DOTALL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Matcher matcher \u003d topicsPattern.matcher(source);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new IllegalValueException(\"No Topics found for \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"question: \" + question.getTitle() + \"\\n. Topics should\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \" be before TestCases.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String[] topics \u003d matcher.group(1).split(\"\\\\s*,\\\\s*\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        for (String topic : topics) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            topic \u003d topic.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (!Topic.contains(topic)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    \"Illegal difficulty for \" + \"question: \" + question.getTitle() + \" with a Topic of:\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                        + \" \" + topic + \".\\n Should be \" + \"ARRAY, LINKED_LIST, HASHTABLE, TREE, GRAPH, RECURSION,\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                        + \" DIVIDE_AND_CONQUER, DYNAMIC_PROGRAMMING, SORTING, or \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                        + \"OTHERS.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            question.withTopics(Topic.valueOf(topic));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Registers a Difficulty specified by text file into question."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param question"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static void addDifficulty(String source,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                                                 QuestionBuilder question) throws IllegalValueException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Pattern difficultyPattern \u003d Pattern.compile(\"Difficulty::(.*?)\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \"Topics::\", Pattern.DOTALL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Matcher matcher \u003d difficultyPattern.matcher(source);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new IllegalValueException(\"No Difficulty found for \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"question: \" + question.getTitle() + \"\\n. Difficulty should\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \" be before Topics.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String difficulty \u003d matcher.group(1).trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (Difficulty.contains(difficulty)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            question.withDifficulty(Difficulty.valueOf(difficulty));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new IllegalValueException(\"Illegal difficulty for \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"question: \" + question.getTitle() + \".\\n Should be \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"EASY, MEDIUM or HARD.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Registers a Description specified by text file into question."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param question"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static void addDescription(String source,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                                       QuestionBuilder question) throws IllegalValueException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Pattern descriptionPattern \u003d Pattern.compile(\"Description::(.*?)\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \"Difficulty::\", Pattern.DOTALL);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Matcher matcher \u003d descriptionPattern.matcher(source);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new IllegalValueException(\"No Description found for \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"question: \" + question.getTitle() + \"\\n. Description should\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \" be before Difficulty.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String description \u003d matcher.group(1).trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        question.withDescription(description);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Registers a Title specified by text file into question."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param question"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static void addTitle(String source,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                                            QuestionBuilder question)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        throws IllegalValueException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Pattern titlePattern \u003d Pattern.compile(\"Title::(.*?)\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \"Description::\", Pattern.DOTALL);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Matcher matcher \u003d titlePattern.matcher(source);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new IllegalValueException(\"No title found. Title should be \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"before Description.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String title \u003d matcher.group(1).trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        question.withTitle(title);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 206
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/notes/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * DeleteNoteCommand that encapsulates the action of deleting a Note from the application. The note is deleted according"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to its id as specified by the invariant of the NotesLogic instance used by the command to perform the deletion. The"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command also changes the current activity of the application to NOTES. The command relies on the NotesLogic and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * ApplicationState classes to perform the necessary actions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DeleteNoteCommand implements Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, the command will delete the Note with the given id from the NotesLogic instance."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param notesLogic the NotesLogic used to perform the deletion"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id the id of the Note to be deleted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState the ApplicationState"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DeleteNoteCommand(NotesLogic notesLogic, int id, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(DeleteNoteCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.id \u003d id - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Attempting to delete note at index : \" + id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Note deletedNote \u003d notesLogic.deleteNote(id);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Successfully deleted note : \" + deletedNote);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Switches the current activity to make the ui focus on the NOTES tab"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            applicationState.setCurrentActivity(Activity.NOTE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new CommandResult(\"Successfully deleted your note : \" + deletedNote.getTitle());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NoteNotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"No note found at index : \" + (id + 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"No note at index \" + (id + 1) + \" found\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 60
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/notes/DeleteNoteCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory class used to supply DeleteNoteCommands. The DeleteNoteCommand instances will be instantiated using the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * NotesLogic and ApplicationState instance contained in the factory. The corresponding command word to invoke this"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * factory is \"deletenote\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DeleteNoteCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, DeleteNoteCommand instances will be instantiated using the give NotesLogic and ApplicationState"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param notesLogic the NotesLogic instance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState the ApplicationState instance"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DeleteNoteCommandFactory(NotesLogic notesLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"deletenote\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * The command arguments needed to create a DeleteNoteCommand is an integer id corresponding to the note that"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * is meant to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandArguments the command text from the user\u0027s input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws InvalidCommandArgumentsException if the command argument is not a valid number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int index \u003d Integer.parseInt(commandArguments.strip());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new DeleteNoteCommand(notesLogic, index, applicationState);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Index should be a valid number.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 48
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/notes/NewNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * NewNoteCommand class that encapsulates the action of creating a new Note in the application. The command also changes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the current activity of the application to NOTES. The command relies on the NotesLogic and ApplicationState classes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to perform the necessary actions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NewNoteCommand implements Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String noteTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, the command will create a new note with the given title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param notesLogic the NotesLogic instance used to perform the operation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param noteTitle the title of the Note to be created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState the ApplicationState"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NewNoteCommand(NotesLogic notesLogic, String noteTitle, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(NewNoteCommand.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.noteTitle \u003d noteTitle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Note newNote \u003d new Note(noteTitle, \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Attempting to save previously opened note...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesLogic.saveNoteFromNoteSubmissionChannel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Creating new note : \" + noteTitle);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesLogic.addNote(newNote);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesLogic.selectNote(newNote);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Opening new note : \" + newNote);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Switches the current activity to make the ui focus on the NOTES tab"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        applicationState.setCurrentActivity(Activity.NOTE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new CommandResult(\"New note successfully created : \" + noteTitle, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 59
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/notes/NewNoteCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory class used to supply NewNoteCommands. The NewNoteCommand instances will be instantiated using the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * NotesLogic and ApplicationState instance contained in the factory. The corresponding command word to invoke this"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * factory is \"newnote\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NewNoteCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, NewNoteCommand instances will be instantiated using the give NotesLogic and ApplicationState"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param notesLogic the NotesLogic instance"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState the ApplicationState instance"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NewNoteCommandFactory(NotesLogic notesLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"newnote\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * The command arguments needed to create a NewNoteCommand is String corresponding to the title of the note that"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * is to be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandArguments the command text from the user\u0027s input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws InvalidCommandArgumentsException if the command argument is not a valid alphanumerical String"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!commandArguments.matches(TITLE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Note title should not be empty!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new NewNoteCommand(notesLogic, commandArguments, applicationState);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 49
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/notes/OpenNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * OpenNoteCommand used to encapsulate the action of opening a Note for viewing and editing in the application. The note"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to be opened is the note corresponding to the id specified by the invariant of the containing NotesLogic. The"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * command also changes the current activity of the application to NOTES. The command relies on the NotesLogic and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * ApplicationState classes to perform the necessary actions. Before opening a new Note, the command will also save"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * any changes to the previously viewed/edited note."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class OpenNoteCommand implements Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, the command will open the Note with the given id from the NotesLogic instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param notesLogic the NotesLogic used to perform the deletion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id the id of the Note to be opened"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState the ApplicationState"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OpenNoteCommand(NotesLogic notesLogic, int id, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(OpenNoteCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.id \u003d id - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Attempting to save previously opened note...\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // First save the previously opened Note"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic.saveNoteFromNoteSubmissionChannel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Attempt to open the Note with the given id"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Note selectedNote;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Attempting to open note at index : \" + id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            selectedNote \u003d this.notesLogic.selectNote(id);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NoteNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"No note found at index : \" + id);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"No note found at index : \" + (id + 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Successfully opened note at index : \" + selectedNote);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Switches the current activity to make the ui focus on the NOTES tab"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        applicationState.setCurrentActivity(Activity.NOTE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new CommandResult(\"Successfully opened note : \" + selectedNote.getTitle(), false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 69
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/notes/OpenNoteCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory class used to supply OpenNoteCommands. The OpenNoteCommand instances will be instantiated using the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * NotesLogic and ApplicationState instance contained in the factory. The corresponding command word to invoke this"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * factory is \"opennote\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class OpenNoteCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, OpenNote instances will be instantiated using the give NotesLogic and ApplicationState"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param notesLogic the NotesLogic instance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState the ApplicationState instance"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OpenNoteCommandFactory(NotesLogic notesLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"opennote\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * The command arguments needed to create a NewNoteCommand is an integer id corresponding to the note that"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * is meant to be opened."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandArguments the command text from the user\u0027s input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws InvalidCommandArgumentsException if the command argument is not a valid number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int index \u003d Integer.parseInt(commandArguments.strip());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new OpenNoteCommand(notesLogic, index, applicationState);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Index should be a valid number.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 49
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/notes/SaveNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * OpenNoteCommand used to encapsulate the action of saving a note that is currently opened in the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * The opened note is dictated by the currently-selected Note in the containing NotesLogic. The command also changes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the current activity of the application to NOTES. The command relies on the NotesLogic and ApplicationState classes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to perform the necessary actions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SaveNoteCommand implements Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public SaveNoteCommand(NotesLogic notesLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(SaveNoteCommand.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Attempting to save current working note...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cNote\u003e savedNote \u003d notesLogic.saveNoteFromNoteSubmissionChannel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (savedNote.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"No note currently opened. Skipping save...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"No note is currently opened for saving\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Successfully saved note : \" + savedNote.get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Switches the current activity to make the ui focus on the NOTES tab"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState.setCurrentActivity(Activity.NOTE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new CommandResult(\"Your note has been successfully saved : \" + savedNote.get().getTitle());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 53
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/notes/SaveNoteCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory class used to supply SaveNoteCommands. The SaveNoteCommand instances will be instantiated using the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * NotesLogic and ApplicationState instance contained in the factory. The corresponding command word to invoke this"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * factory is \"savenote\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SaveNoteCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public SaveNoteCommandFactory(ApplicationState applicationState, NotesLogic notesLogic) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"savenote\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * The SaveNoteCommand does not take in any command arguments."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param commandArguments the command text from the user\u0027s input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws InvalidCommandArgumentsException if the command argument is not empty"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!commandArguments.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Save note command does not take any arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new SaveNoteCommand(notesLogic, applicationState);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 41
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/showall/ShowallCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.showall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Command for attempting a question. This command loads the selected question into the registered"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * ProgramSubmissionLogic instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class ShowallCommand implements Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Predicate\u003cQuestion\u003e allQuestions \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Attempt command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic   the questions logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState the application state"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public ShowallCommand(QuestionsLogic questionsLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(ShowallCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // Update status of question"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic.filterQuestionsList(allQuestions);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.info(\"Listing all questions...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String feedback \u003d \"List all questions...\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Update the app\u0027s current activity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        applicationState.setCurrentActivity(Activity.QUESTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 39,
      "limhawjia": 8
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/showall/ShowallCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.showall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Factory class to represent all the necessary components for creating an ShowallCommand instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class ShowallCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Attempt command factory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic the questions logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState the application state"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public ShowallCommandFactory(QuestionsLogic questionsLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return \"showall\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!commandArguments.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Showall command does \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"not take any arguments\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return new ShowallCommand(questionsLogic, applicationState);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 38,
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/submit/SubmitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.submit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.EmptyUserProgramException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Submit command that submits the user\u0027s current work from the registered UserProgram channel of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * ProgramSubmissionLogic."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SubmitCommand implements Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Submit command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public SubmitCommand(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                         ApplicationState applicationState) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(SubmitCommand.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cQuestion\u003e currentlyAttemptingQuestion \u003d this.programSubmissionLogic.getCurrentQuestion();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d programSubmissionLogic.getUserProgramFromSubmissionChannel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // The submit command cannot be executed if the user has not attempted any question"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (currentlyAttemptingQuestion.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"No question being attempted at the moment, command will not be executed\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"You have not attempted a question yet.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Set the UI to focus on the Workspace page for display of results"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        applicationState.setCurrentActivity(Activity.WORKSPACE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Save the user\u0027s new program first"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Saving user program first : \" + userProgram);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question \u003d currentlyAttemptingQuestion.get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question questionWithNewProgram \u003d question.withNewUserProgram(userProgram);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.updateQuestion(question, questionWithNewProgram);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Submit the user\u0027s program"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTestResult\u003e resultsOptional;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Starting test execution for : \" + question + \"\\nUser program : \" + userProgram);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            resultsOptional \u003d this.programSubmissionLogic.submitUserProgram(userProgram);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IncorrectCanonicalNameException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Main class not detected, command will not be executed\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"Please write your main method in a class called Main\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (EmptyUserProgramException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Program is empty, command will not be executed\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"Program must not be empty.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Unexpected error with the program evaluation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (resultsOptional.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Submit command failed unexpectedly\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"Tests failed unexpectedly. Please report this bug at \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"https://github.com/AY1920S1-CS2103T-F14-1/main\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check if the result was successful"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        boolean isSuccessful \u003d resultsOptional.get().getNumPassed() \u003d\u003d questionWithNewProgram.getTestCases().size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (isSuccessful) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Save the new success status"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Question successfulQuestion \u003d questionWithNewProgram.withNewStatus(Status.PASSED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.updateQuestion(questionWithNewProgram, successfulQuestion);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Give user feedback"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d \"Submitted your program for question : \" + question.getTitle() + \" Result : \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (isSuccessful) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            feedback \u003d feedback + \"success\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            feedback \u003d feedback + \"failed\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(feedback, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to automatically update the current attempting question in both the QuestionsLogic and the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * ProgramSubmissionLogic"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param oldQuestion the old question"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newQuestion the new question"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void updateQuestion(Question oldQuestion , Question newQuestion) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic.setCurrentQuestion(newQuestion);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 5,
      "limhawjia": 110
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/submit/SubmitCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.submit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Class to represent the necessary components for the creation of a Submit command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SubmitCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Submit command factory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param applicationState       the application state"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public SubmitCommandFactory(QuestionsLogic questionsLogic, ProgramSubmissionLogic programSubmissionLogic,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                ApplicationState applicationState) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"submit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!commandArguments.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Submit command does not take any arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new SubmitCommand(this.questionsLogic, this.programSubmissionLogic, applicationState);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/tab/TabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command used to switch tabs within the application"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TabCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static final String FEEDBACK \u003d \"Toggling tab to : \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TabCommand(ApplicationState applicationState) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Activity currentActivity \u003d applicationState.getCurrentActivity();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assert currentActivity !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Retrieve the index of the current activity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Activity[] activities \u003d Activity.values();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int numActivities \u003d activities.length;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OptionalInt currentActivityIndex \u003d IntStream.range(0, numActivities)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(i -\u003e activities[i] \u003d\u003d currentActivity).findFirst();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assert currentActivityIndex.isPresent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // The next activity is the activity found in the succeeding index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int nextActivityIndex \u003d (currentActivityIndex.getAsInt() + 1) % numActivities;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Activity nextActivity \u003d activities[nextActivityIndex];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Set the current activity to the next activity"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState.setCurrentActivity(nextActivity);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String userFeedback \u003d FEEDBACK + nextActivity.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(userFeedback, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "limhawjia": 45
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/tab/TabCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory class to generate Tab commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TabCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TabCommandFactory(ApplicationState applicationState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"tab\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!commandArguments.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Exit command does not take any arguments\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new TabCommand(applicationState);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 31
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/view/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Command for viewing a question."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class ViewCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new View command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id                 the index"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic        the questions logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ViewCommand(int id, QuestionsLogic questionsLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            // Update status of question"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            Question questionToView \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.questionsLogic.getQuestion(id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.questionsLogic.selectQuestion(id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            String feedback \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"Viewing question \" + id + \" : \" + questionToView.getTitle();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Update the app\u0027s current activity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            applicationState.setCurrentActivity(Activity.QUESTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new CommandResult(feedback, false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (QuestionNotFoundRuntimeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandException(\"No question with id  \" + id + \" found.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 33,
      "limhawjia": 20
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/commands/view/ViewCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Factory class to represent all the necessary components for creating an"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * ViewCommand instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class ViewCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new View command factory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic        the questions logic"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ViewCommandFactory(QuestionsLogic questionsLogic, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return \"view\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            int index \u003d Integer.parseInt(commandArguments.strip());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new ViewCommand(index, questionsLogic, applicationState);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Invalid index entered.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 36,
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/notes/NoteSubmissionChannel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.data.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a channel which NotesLogic implementations can use to retrieve Notes from other components of the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * application. This is used to reduce coupling."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface NoteSubmissionChannel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Pair\u003cNote, WritableImage\u003e getNoteAndSketchPair();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/notes/NotesLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.data.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Interface to encapsulate all CRUD operations related to Notes needed by the application. It also stores a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * currently-selected Note to represent an opened Note in the application along with its corresponding sketch. An"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * invariant to be maintained by the NotesLogic instance is for all Notes to be identified by an integer id which"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * corresponds to its index in the ObservableList returned by getAllNotesList()."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface NotesLogic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets a channel which allows the NotesLogic instance to retrieve Notes for saving."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param noteSubmissionChannel the NoteSubmissionChannel to be set"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setNoteSubmissionChannel(NoteSubmissionChannel noteSubmissionChannel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a JavaFX ObservableList instance containing all of the user\u0027s Notes in the application at any point."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the representative ObservableList instance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    ObservableList\u003cNote\u003e getAllNotesList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a new Note along with its corresponding sketch image to the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param note the note to be added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sketch the note\u0027s corresponding sketch image"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addNoteWithSketch(Note note, WritableImage sketch);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a new Note to the application. This new note is stored with an empty sketch image by default."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param note the note to be added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Retrieves a Note from the NoteSubmissionChannel and saves it to the application. SubmissionChannelNotSetException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * is thrown if a NoteSubmissionChannel was not previously set."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return an Optional instance of the newly saved Note"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Optional\u003cNote\u003e saveNoteFromNoteSubmissionChannel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Replaces an existing Note instance in the application with a new Note. The new note takes the id of the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * note that it replaces based on the invariant. The sketch of the old Note is also replaced by the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * image. The new image cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param oldNote the old Note instance to be replaced"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newNote the new Note instance"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newSketch the new sketch (cannot be null)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void replaceNote(Note oldNote, Note newNote, WritableImage newSketch);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns an Observable instance storing the currently-selected Note of the NotesLogic instance."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the Observable instance containing the currently-selected Note"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Observable\u003cPair\u003cNote, WritableImage\u003e\u003e getSelectedNote();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets the currently-selected Note in the NotesLogic instance to the Note identified by the given id based on the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * invariant. A NoteNotFoundException is thrown if there is no Note corresponding to the given id."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id the id of the new Note to be selected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the newly selected Note"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Note selectNote(int id);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets the currently-selected Note in the NotesLogic instance to the given Note. The given Note must have"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * previously been saved in the application. A NoteNotFoundException is thrown if there is no corresponding Note."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param note the Note instance to be selected"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void selectNote(Note note);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes the Note instance identified by the given id based on the invariant. A NoteNotFoundException is thrown"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * if there is no Note corresponding to the given id."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id the id of the Note instance to be deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the deleted Note"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Note deleteNote(int id);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 89
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/notes/NotesLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.data.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.SubmissionChannelNotSetException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.NoteBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.StandardNoteBank;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.StandardObservable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.notes.NoteBankStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * The standard implementation of the NotesLogic interface used by the application. This implementation immediately"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * saves any changes to the state of the Notes in the application to storage. It delegates the storage-related"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * operations to the NoteBankStorage class. It delegates specialized CRUD operations related to to the storing of user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * sketch images to the SketchManager class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NotesLogicManager implements NotesLogic {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    // A default empty sketch image used in the creation and saving of new Notes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final WritableImage DEFAULT_EMPTY_SKETCH \u003d new WritableImage(2000, 2000);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NoteBankStorage storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NoteBank noteBank;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final SketchManager sketchManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final StandardObservable\u003cPair\u003cNote, WritableImage\u003e\u003e selectedNoteAndSketch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private NoteSubmissionChannel noteSubmissionChannel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NotesLogicManager(NoteBankStorage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(NotesLogicManager.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.noteBank \u003d this.loadNotesFromStorage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.selectedNoteAndSketch \u003d new StandardObservable\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Create SketchManager instance"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path sketchStoragePath \u003d storage.getNoteBankFilePath().getParent().resolve(\"sketches\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchManager \u003d new SketchManager(sketchStoragePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setNoteSubmissionChannel(NoteSubmissionChannel noteSubmissionChannel) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.noteSubmissionChannel \u003d noteSubmissionChannel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Successfully added note submission channel : \" + noteSubmissionChannel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ObservableList\u003cNote\u003e getAllNotesList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return noteBank.getReadOnlyNotesObservableList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.addNoteWithSketch(note, DEFAULT_EMPTY_SKETCH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addNoteWithSketch(Note note, WritableImage sketch) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Adding new note : \" + note);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Attempts to save the given image as the sketch for the given note"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.sketchManager.saveSketch(note.getSketchId(), sketch);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Unable to save sketch : \" + note.getSketchId());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Adds and saves the new note to the NoteBank"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.noteBank.addNote(note);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.saveNotesToStorage(this.noteBank);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cNote\u003e saveNoteFromNoteSubmissionChannel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.noteSubmissionChannel \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new SubmissionChannelNotSetException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Pair\u003cNote, WritableImage\u003e noteAndSketchPair \u003d this.noteSubmissionChannel.getNoteAndSketchPair();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Return an empty optional if there is no Note to be saved"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (noteAndSketchPair \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"No current note set, skipping save...\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Note note \u003d noteAndSketchPair.getHead();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        WritableImage sketch \u003d noteAndSketchPair.getTail();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Note to be saved might already exist in the application"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cNote\u003e oldNote \u003d this.getAllNotesList().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(note::equals)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // If it already exist, replace the old instance with the new one"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (oldNote.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.replaceNote(oldNote.get(), note, sketch);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(note);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Else, save the Note as a new Note"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.addNoteWithSketch(note, sketch);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"New note detected, creating new note : \" + note);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(note);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void replaceNote(Note oldNote, Note newNote, WritableImage newSketch) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireNonNull(newSketch);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Replacing old note : \" + oldNote + \" with new note : \" + newNote);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // First attempt to save the given image as the new sketch for the Note"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UUID sketchId \u003d newNote.getSketchId();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.sketchManager.saveSketch(sketchId, newSketch);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Unable to save sketch : \" + sketchId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Replace the old Note and save the updates"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.noteBank.replaceNote(oldNote, newNote);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.saveNotesToStorage(this.noteBank);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Replace the currently-selected Note-Sketch pair if it was changed"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Pair\u003cNote, WritableImage\u003e newlySelectedNoteSketchPair \u003d new Pair\u003c\u003e(newNote, newSketch);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.replaceSelectedNoteIfMatch(newNote, newlySelectedNoteSketchPair);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Observable\u003cPair\u003cNote, WritableImage\u003e\u003e getSelectedNote() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.selectedNoteAndSketch;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Note selectNote(int id) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Note selectedNote \u003d this.getAllNotesList().get(id);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.selectNote(selectedNote);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return selectedNote;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void selectNote(Note note) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // First check if given Note exists in the application"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Note selectedNote \u003d this.getAllNotesList().stream()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(note::equals)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(NoteNotFoundException::new);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Attempts to load the sketch corresponding to the note"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        WritableImage sketch;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            sketch \u003d this.sketchManager.loadSketch(selectedNote.getSketchId());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Unable to load sketch : \" + selectedNote.getSketchId());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            sketch \u003d null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Sets the new currently-selected Note-Sketch pair"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.selectedNoteAndSketch.setValue(new Pair\u003c\u003e(selectedNote, sketch));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Note deleteNote(int id) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check if the given id is valid based on the invariant"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (id \u003c 0 || id \u003e\u003d this.getAllNotesList().size()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Delete and save changes to storage"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Note selectedNote \u003d this.getAllNotesList().get(id);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.noteBank.deleteNote(selectedNote);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.saveNotesToStorage(this.noteBank);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Remove the currently-selected Note-Sketch pair if it was deleted"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.replaceSelectedNoteIfMatch(selectedNote, null);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Delete the sketch image file corresponding to the deleted note"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchManager.deleteSketch(selectedNote.getSketchId());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return selectedNote;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method used to replace the currently-selected Note-Sketch pair if the note is equal to the Note given by"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the first argument."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param match       the Note to be checked for a match"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param replacement the new Note-Sketch pair"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void replaceSelectedNoteIfMatch(Note match, Pair\u003cNote, WritableImage\u003e replacement) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.selectedNoteAndSketch.getValue()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(Pair::getHead)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(note -\u003e note.equals(match))"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .ifPresent(note -\u003e this.selectedNoteAndSketch.setValue(replacement));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to load the application\u0027s previously stored NoteBank from storage."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the previously stored NoteBank instance"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private NoteBank loadNotesFromStorage() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Storage instance built, trying to load notes...\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return this.storage.readNoteBank().get();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException | DataConversionException | NullPointerException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Unable to load note bank from : \" + storage.getNoteBankFilePath()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \".\\n Creating new note bank...\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new StandardNoteBank();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to save a NoteBank instance to storage."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param noteBank the NoteBank instance to be saved"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void saveNotesToStorage(NoteBank noteBank) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage.saveNoteBank(noteBank);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Unable to save note bank to :\" + storage.getNoteBankFilePath());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 247
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/notes/SketchManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.awt.image.RenderedImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Encapsulates all CRUD operations required by the application with regards to the sketch image files of Notes. It"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * is used to convert, store and load the user\u0027s sketches as PNG image files. All sketches will be loaded/saved from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the given storage folder path given in the constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SketchManager {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Path sketchStorageFolderPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final boolean isStorageFolderAvailable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, the SketchManager instance is initialized with a root path to store all the sketch image files to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sketchStorageFolderPath the path of the folder to save sketch image files to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public SketchManager(Path sketchStorageFolderPath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(SketchManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchStorageFolderPath \u003d sketchStorageFolderPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        isStorageFolderAvailable \u003d this.createStorageFolder(sketchStorageFolderPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Searches for a sketch image in the storage folder and returns it as a JavaFX WritableImage class to be used"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * by the application\u0027s Ui components. Returns null if storage folder was  not initialized properly."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sketchId the id of the sketch to be loaded"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the JavaFX WritableImage representation of the sketch"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException if the sketch cannot be loaded."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public WritableImage loadSketch(UUID sketchId) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // If the storage folder was not initialized properly, simply return null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!isStorageFolderAvailable) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Sketch storage file was not initialized, returning null...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File sketchImageFile \u003d this.getFileFromSketchId(sketchId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Loading sketch from : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!sketchImageFile.exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Sketch not found at : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // First load the original image as a BufferedImage instance before converting it to a JavaFX WritableImage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        BufferedImage originalImage \u003d ImageIO.read(sketchImageFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        WritableImage writableImage \u003d SwingFXUtils.toFXImage(originalImage, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Successfully loaded sketch from : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return writableImage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Saves a sketch given in the form of a JavaFX WritableImage instance as a PNG image file whose name is the unique"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * sketch id that\u0027s given. If the storage folder was not initialized properly, the method will fail silently."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sketchId the unique sketch id of the sketch to be saved"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sketch the sketch to be saved"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException if the sketch fails to be saved"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void saveSketch(UUID sketchId, WritableImage sketch) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // If the storage folder was not initialized properly, abort the operation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!isStorageFolderAvailable) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Sketch storage file was not initialized, sketch will not be saved...\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File sketchImageFile \u003d this.getFileFromSketchId(sketchId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Saving sketch at : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Attempts to create a new file in the file system if it did not exist previously"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!sketchImageFile.exists() \u0026\u0026 !sketchImageFile.createNewFile()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Unable to create sketch image file at : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IOException(\"Unable to create image file : \" + sketchImageFile.toPath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Convert and write the sketch contents to the newly created file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        RenderedImage drawing \u003d SwingFXUtils.fromFXImage(sketch, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ImageIO.write(drawing, \"png\", sketchImageFile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Sketch  saved successfully at : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes the sketch file corresponding to the give unique sketch id. If the storage folder was not initialized"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * properly or the sketch image file is not found, the method will fail silently."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sketchId the unique sketch id of the sketch to be deleted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteSketch(UUID sketchId) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // If the storage folder was not initialized properly, abort the operation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!isStorageFolderAvailable) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Sketch storage file was not initialized, sketch will not be deleted...\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File sketchImageFile \u003d this.getFileFromSketchId(sketchId);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Deleting sketch at : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // If the sketch image file does not exist, abort the operation"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!sketchImageFile.exists()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Sketch not found at : \" + sketchImageFile.getPath() + \", skipping delete\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Attempt to delete the image file"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!sketchImageFile.delete()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Failed to delete sketch at : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Successfully deleted sketch at : \" + sketchImageFile.getPath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method used to create the sketch storage folder if it does not already exist."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sketchStorageFolderPath the path of the storage folder"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the folder exists by the end of the method call"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean createStorageFolder(Path sketchStorageFolderPath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!sketchStorageFolderPath.toFile().isDirectory()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"No sketch storage folder found at : \" + sketchStorageFolderPath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Creating new folder...\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (!sketchStorageFolderPath.toFile().mkdirs()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.warning(\"Unable to make sketch storage directory, sketches will not be saved\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Sketch storage folder successfully created at \" + sketchStorageFolderPath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method used to create Java File instance corresponding to a sketch from a given sketch id."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sketchId the sketch id of the sketch file to be created"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the File instance corresponding to the sketch"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private File getFileFromSketchId(UUID sketchId) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sketchFileName \u003d sketchId.getMostSignificantBits() + sketchId.getLeastSignificantBits() + \".png\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return sketchStorageFolderPath.resolve(sketchFileName).toFile();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 161
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/notes/exceptions/NoteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.notes.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Runtime exception thrown by Note logic and storage classes when a given Note is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NoteNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/program/ProgramSubmissionLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.EmptyUserProgramException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Logic interface to handle the submission and evaluation of user program submissions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface ProgramSubmissionLogic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns an observable that gets updated whenever a new submission is received by the logic instance. The"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * listeners of the observable can then choose to process the new result accordingly."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return An observable of the latest results"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    Observable\u003cTestResult\u003e getTestResultObservable();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns an observable of the current question that the logic instance is handling. The observer is updated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * whenever the logic instance handles another question. The listeners of the observable can then choose to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * process the new result accordingly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return An observable of the current question"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    Observable\u003cQuestion\u003e getCurrentQuestionObservable();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the current question instance that the logic is handling."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the current question being attempted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    Optional\u003cQuestion\u003e getCurrentQuestion();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets the logic instance to handle another question. Subsequent user program submissions will be tested against"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * this questions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param question The question to be handled"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void setCurrentQuestion(Question question);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Submits a user program to be tested against the current question being handled by the logic instance."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param userProgram The user program to be submitted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a test result if the program was successfully tested"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IncorrectCanonicalNameException the incorrect canonical name exception"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws EmptyUserProgramException       the empty user program exception"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    Optional\u003cTestResult\u003e submitUserProgram(UserProgram userProgram) throws IncorrectCanonicalNameException,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            EmptyUserProgramException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets a channel which allows the logic instance to retrieve user programs for submission."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param channel The channel to be set"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void setUserProgramSubmissionChannel(UserProgramChannel channel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Retrieves the user program from the submission channel and tests it against the current question being handled"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * by the logic instance."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a test result if the program was successfully tested"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IncorrectCanonicalNameException the incorrect canonical name exception"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws EmptyUserProgramException       the empty user program exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    Optional\u003cTestResult\u003e submitUserProgramFromSubmissionChannel() throws IncorrectCanonicalNameException,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            EmptyUserProgramException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the user program retrieved from the submission channel."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the user program from the submission channel"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    UserProgram getUserProgramFromSubmissionChannel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Close program submission logic manager."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void closeProgramSubmissionLogicManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 25,
      "limhawjia": 63
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/program/ProgramSubmissionLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.NoQuestionSetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.SubmissionChannelNotSetException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.SubmissionLogicManagerClosedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.StandardObservable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.TestExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.StandardCompiler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.CompilerEnvironment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.StandardCompilerEnvironment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.CreateEnvironmentException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.EmptyUserProgramException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.TestExecutorException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.StandardProgramExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Standard implementation of the submission logic interface that runs tests locally."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ProgramSubmissionLogicManager implements ProgramSubmissionLogic {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageCreationError \u003d \"Failed to create ProgramSubmissionLogic instance.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageInvalidDirectoryError \u003d \"Could not locate give directory\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProgramSubmissionLogicManager.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StandardObservable\u003cTestResult\u003e resultObservable;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StandardObservable\u003cQuestion\u003e currentQuestionObservable;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private CompilerEnvironment compilerEnvironment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TestExecutor testExecutor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isClosed;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UserProgramChannel submissionChannel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param outputDirectoryPath The path to the directory in which all generated Java and Class files are to be saved"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws LogicCreationException if the directory is invalid or the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *                                components of the Logic instance fails to be created"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramSubmissionLogicManager(String outputDirectoryPath) throws LogicCreationException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!new File(outputDirectoryPath).isDirectory()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new LogicCreationException(messageInvalidDirectoryError);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Path compilerEnvironmentPath \u003d Paths.get(outputDirectoryPath).resolve(\"temp\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.compilerEnvironment \u003d new StandardCompilerEnvironment(compilerEnvironmentPath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.testExecutor \u003d new TestExecutor(this.compilerEnvironment, new StandardCompiler(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new StandardProgramExecutor(), 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.resultObservable \u003d new StandardObservable\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.currentQuestionObservable \u003d new StandardObservable\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.isClosed \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CreateEnvironmentException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new LogicCreationException(messageCreationError, e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Clears any files created by the Logic instance in the output directory"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void closeProgramSubmissionLogicManager() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.verifyNotClosed();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.compilerEnvironment.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.resultObservable.clearListeners();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isClosed \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Observable\u003cTestResult\u003e getTestResultObservable() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.verifyNotClosed();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.resultObservable;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Observable\u003cQuestion\u003e getCurrentQuestionObservable() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.verifyNotClosed();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.currentQuestionObservable;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cQuestion\u003e getCurrentQuestion() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.currentQuestionObservable.getValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setCurrentQuestion(Question question) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.verifyNotClosed();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.currentQuestionObservable.setValue(question);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.resultObservable.setValue(null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cTestResult\u003e submitUserProgram(UserProgram userProgram) throws IncorrectCanonicalNameException,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            EmptyUserProgramException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.verifyNotClosed();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Submitting user program : \" + userProgram);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (userProgram.getSourceCode().matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new EmptyUserProgramException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Retrieves the list of test cases from the currently-attempting question, if not an exception is thrown"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d this.currentQuestionObservable.getValue()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(Question::getTestCases)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(NoQuestionSetException::new);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Evaluate the test cases and package it into a TestResult"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestResult results \u003d this.testExecutor.runTestCases(testCases, userProgram);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.resultObservable.setValue(results);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Test execution succeeded : \" + results);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(results);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TestExecutorException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Test execution failed unexpectedly\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setUserProgramSubmissionChannel(UserProgramChannel channel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"UserProgramChannel set : \" + channel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionChannel \u003d channel;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cTestResult\u003e submitUserProgramFromSubmissionChannel() throws IncorrectCanonicalNameException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            EmptyUserProgramException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Submitting user program from registered channel : \" + this.submissionChannel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.submissionChannel \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Submission channel not set up, unable to submit user programs\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new SubmissionChannelNotSetException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program \u003d this.submissionChannel.getProgram();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.submitUserProgram(program);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UserProgram getUserProgramFromSubmissionChannel() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.submissionChannel \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Submission channel not set up, unable to get user program\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new SubmissionChannelNotSetException();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Returning user program from registered channel : \" + this.submissionChannel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.submissionChannel.getProgram();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to verify that the logic instance is not closed before each method is done."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void verifyNotClosed() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.isClosed) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"ProgramSubmissionLogicManager closed, any method calls will throw exception\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new SubmissionLogicManagerClosedException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "limhawjia": 174
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/program/UserProgramChannel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Functional interface used by ProgramSubmissionLogicManagers to allow external components to submit user programs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface UserProgramChannel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the program"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    UserProgram getProgram();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 6,
      "limhawjia": 9
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/program/exceptions/LogicCreationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown when a logic instance fails to be created."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class LogicCreationException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Logic creation exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public LogicCreationException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Logic creation exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public LogicCreationException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/program/exceptions/NoQuestionSetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by ProgramSubmissionLogic when a user program is submitted before a question is set."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NoQuestionSetException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new No question set exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NoQuestionSetException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"There is no question set for the ProgramSubmissionLogicManager instance.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 10
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/program/exceptions/SubmissionChannelNotSetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown when the ProgramSubmissionLogic instance does not have a submission channel set and attempts"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to submit a program through the submission channel."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SubmissionChannelNotSetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 8
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/program/exceptions/SubmissionLogicManagerClosedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown when the ProgramSubmissionLogicManager instance has been closed but an operation was requested."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SubmissionLogicManagerClosedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Submission logic manager closed exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public SubmissionLogicManagerClosedException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"The ProgramSubmissionLogicManager instance has already been closed.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 10
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/question/QuestionsLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Interface to handle all CRUD operations related to questions. It also stores a current selected question for viewing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * purposes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface QuestionsLogic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns an observable list that represents all the questions in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return an observable list of questions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    ObservableList\u003cQuestion\u003e getAllQuestionsList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a filtered observable list that represents all the questions in the application. The default list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * contains all the questions unless a filter was previously set. Note that this index of this list is 0-based."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return an observable list of questions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionsList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Filters the visible questions in the application according to the predicate given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param predicate the predicate to be applied as a filter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void filterQuestionsList(Predicate\u003cQuestion\u003e predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a question to the model."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param question the new question to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestion(Question question);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a collection of questions to the model."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questions the collection of questions to be added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestions(Collection\u003cQuestion\u003e questions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Loads questions from a specified file type, depending on the implementation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questionsFilePath the path of the file to be loaded"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestionsFromPath(Path questionsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the question corresponding to the index in the list returned by getFilteredQuestionsList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id the id of the question to be returned"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the corresponding question"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Question getQuestion(int id);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets the question corresponding to the id to a new question."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id       the id of the question to be replaced"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newQuestion the new question"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setQuestion(int id, Question newQuestion);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Replaces the old question with a new question."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param oldQuestion the old question to be replaced"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newQuestion the new question"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void replaceQuestion(Question oldQuestion, Question newQuestion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes all the stored questions in the application."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deleteAllQuestions();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns an observable of the currently selected question"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return observable of the selected question."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Observable\u003cQuestion\u003e getSelectedQuestion();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets the current selected question corresponding to the id."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id the id of the question to be selected."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void selectQuestion(int id);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 14,
      "limhawjia": 84,
      "-": 2
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/logic/question/QuestionsLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.QuestionBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.StandardQuestionBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.StandardObservable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.QuestionBankStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Logic class to handle all CRUD operations regarding questions in the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class QuestionsLogicManager implements QuestionsLogic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String NO_QUESTION_FOUND_MESSAGE \u003d \"No question found with id  : \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final QuestionBankStorage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final QuestionBank questionBank;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final FilteredList\u003cQuestion\u003e filteredList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final StandardObservable\u003cQuestion\u003e selectedQuestion;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Questions logic manager."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionsLogicManager(QuestionBankStorage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(QuestionsLogicManager.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionBank \u003d this.loadQuestionsFromStorage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.filteredList \u003d new FilteredList\u003c\u003e(questionBank.getReadOnlyQuestionListObservable());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.selectedQuestion \u003d new StandardObservable\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets question bank."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the question bank"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionBank getQuestionBank() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new StandardQuestionBank(this.questionBank);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getAllQuestionsList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return questionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionsList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.filteredList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void filterQuestionsList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionBank.addQuestion(question);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.saveQuestionBankToStorage(this.questionBank);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addQuestions(Collection\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (Question question: questions) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.questionBank.addQuestion(question);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.saveQuestionBankToStorage(this.questionBank);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addQuestionsFromPath(Path questionsFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            QuestionBank newQuestionBank \u003d this.storage.readQuestionBank(questionsFilePath).orElseGet(() -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.info(\"Unable to find json file at: \" + questionsFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return new StandardQuestionBank();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.addQuestions(newQuestionBank.getReadOnlyQuestionListObservable());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Error encountered while reading data file. Questions will not be added.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Error encountered while parsing data file, please check the format.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Question getQuestion(int id) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return questionBank.getReadOnlyQuestionListObservable()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(question -\u003e question.getId() \u003d\u003d id)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(() -\u003e new QuestionNotFoundRuntimeException(NO_QUESTION_FOUND_MESSAGE + id));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setQuestion(int id, Question newQuestion) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question oldQuestion \u003d questionBank.getReadOnlyQuestionListObservable()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(question -\u003e question.getId() \u003d\u003d id)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(() -\u003e new QuestionNotFoundRuntimeException(NO_QUESTION_FOUND_MESSAGE + id));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void replaceQuestion(Question oldQuestion, Question newQuestion) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.questionBank.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (QuestionNotFoundRuntimeException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new QuestionNotFoundRuntimeException(NO_QUESTION_FOUND_MESSAGE + oldQuestion.getId());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.saveQuestionBankToStorage(this.questionBank);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteAllQuestions() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionBank.resetQuestions();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.saveQuestionBankToStorage(this.questionBank);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Loads a new question bank from the given storage instance."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the loaded question bank."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private QuestionBank loadQuestionsFromStorage() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.info(\"storage instance built. trying to load questions / \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \"samples\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return this.storage.readQuestionBank().get();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Unable to load question bank from: \" + storage.getQuestionBankFilePath()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \".\\n Loading sample data instead...\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return SampleDataUtil.getSampleQuestionBank();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            logger.info(\"Unable to find json file: \" + storage.getQuestionBankFilePath()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \".\\n Loading sample data instead...\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return SampleDataUtil.getSampleQuestionBank();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Saves a new question bank to the given storage instance."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questionBank the question bank to be saved."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void saveQuestionBankToStorage(QuestionBank questionBank) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage.saveQuestionBank(questionBank);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Unable to save question data to: \" + storage.getQuestionBankFilePath());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Observable\u003cQuestion\u003e getSelectedQuestion() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.selectedQuestion;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void selectQuestion(int id) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question selectedQuestion \u003d questionBank.getReadOnlyQuestionListObservable()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(question -\u003e question.getId() \u003d\u003d id)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(() -\u003e new QuestionNotFoundRuntimeException(NO_QUESTION_FOUND_MESSAGE + id));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.selectedQuestion.setValue(selectedQuestion);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 21,
      "limhawjia": 163
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/notes/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a Note in the note bank. Notes can be created by users to store information in the form text or a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * simple sketch. The Note class serves as a model for a user\u0027s notes. It contains a title, the text contents and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * also a unique sketch id used to name the image file storing the sketch. Notes are identified from each other by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * their unique sketch ids."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final UUID sketchId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Note(String title, String content) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchId \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Note(String title, String content, UUID sketchId) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchId \u003d sketchId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UUID getSketchId() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return sketchId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new Note instance with the same title and unique sketch id, but with its contents updated to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * String provided. This new Note instance represents the same note, but with its contents changed. This method"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * is used to maintain immutability of the Note class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param noteContents the new contents for the note to be updated with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the updated note"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Note withNewNoteContents(String noteContents) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Note(this.title, noteContents, this.sketchId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Two note instances are equal if their unique sketch ids are the same."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param object the object to be compared to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the object is the same note"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof Note) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return this.sketchId.equals(((Note) object).sketchId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(\" Title: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(title)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(\" Content: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(content)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(\" SketchId: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(sketchId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 81
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/notes/NoteBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Interface to encapsulate the storage of all the notes created by the user. It provides basic CRUD operations for"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * notes, allowing notes to be read and monitored using a JavaFx ObservableList, added, deleted and replaced."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface NoteBank {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a JavaFX ObservableList instance that contains all of the notes in the note bank instance at any time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the representative JavaFX ObservableList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    ObservableList\u003cNote\u003e getReadOnlyNotesObservableList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a new Note instance to the NoteBank."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param note the Note instance to be added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Replaces an existing Note instance in the NoteBank with a new Note."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param oldNote the old Note to be replaced"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newNote the new Note to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void replaceNote(Note oldNote, Note newNote);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes an existing Note instance in the NoteBank."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param oldNote the old Note instance to be deleted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deleteNote(Note oldNote);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 34
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/notes/StandardNoteBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * The standard implementation of NoteBank interface used by the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StandardNoteBank implements NoteBank {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ObservableList\u003cNote\u003e notesList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ObservableList\u003cNote\u003e unmodifiableNotesList \u003d FXCollections.unmodifiableObservableList(notesList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardNoteBank() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardNoteBank(Collection\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesList.addAll(notes);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ObservableList\u003cNote\u003e getReadOnlyNotesObservableList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.unmodifiableNotesList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesList.add(note);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void replaceNote(Note oldNote, Note newNote) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int oldNoteIndex \u003d findNoteIndex(oldNote);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesList.remove(oldNoteIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesList.add(oldNoteIndex, newNote);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteNote(Note oldNote) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int oldNoteIndex \u003d findNoteIndex(oldNote);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesList.remove(oldNoteIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to scan the list of Notes in the NoteBank for a given Note instance. Returns the index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * corresponding to that particular Note instance in the list. NoteNotFoundRuntimeException is thrown if"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the Note is found in the NoteBank."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param note the note instance to be find"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the index of the given note instance"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int findNoteIndex(Note note) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return IntStream.range(0, notesList.size())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(i -\u003e notesList.get(i).equals(note))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(NoteNotFoundException::new);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 62
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/profile/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The type Profile."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The Profile."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param s the s"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public Profile(String s) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        profile \u003d s;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets text."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the text"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!(obj instanceof Profile)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Profile other \u003d (Profile) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return profile.equals(other.profile);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 46
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/profile/profile.txt",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Welcome back Ah Tan!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Progress:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Total questions: 56"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Attempted: 11"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "* Passed: 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Attempting:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1. Two Sum"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "5. Triangle"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "10. Merge K Sorted Lists"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "11. The Skyline Problem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "23. Palindromic String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "26. The Zigzag Conversion"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "27. Reverse Integer"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "31. Split BST"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "48. Redundant Connection"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "49. Parallel Courses"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "52. Nth Tribonnoci Number"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 18
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/program/TestCaseResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.RuntimeError;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents the results of running the user\u0027s solution against an individual test case. It contains a boolean"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * flag to indicate the success of running the test case, along with the expected and actual results."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TestCaseResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final boolean isSuccessful;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String expectedOutput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String actualOutput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final RuntimeError runtimeError;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TestCaseResult(boolean isSuccessful, String input, String expectedOutput,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                           String actualOutput, RuntimeError runtimeError) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isSuccessful \u003d isSuccessful;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.expectedOutput \u003d expectedOutput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.actualOutput \u003d actualOutput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.runtimeError \u003d runtimeError;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets successful test case result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param input        the input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param actualOutput the actual output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the successful test case result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static TestCaseResult getSuccessfulTestCaseResult(String input, String actualOutput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new TestCaseResult(true, input, actualOutput, actualOutput, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets failed test case result."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param input          the input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param expectedOutput the expected output"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param actualOutput   the actual output"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the failed test case result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static TestCaseResult getFailedTestCaseResult(String input, String expectedOutput, String actualOutput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new TestCaseResult(false, input, expectedOutput, actualOutput, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets errored test case result."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param input          the input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param expectedOutput the expected output"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param errorMessage   the error message"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the errored test case result"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static TestCaseResult getErroredTestCaseResult(String input, String expectedOutput, String errorMessage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        RuntimeError error \u003d new RuntimeError(errorMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new TestCaseResult(false, input, expectedOutput, null, error);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Is successful boolean."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isSuccessful() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return isSuccessful;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets input."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets expected output."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the expected output"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getExpectedOutput() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return expectedOutput;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets actual output."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the actual output"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cString\u003e getActualOutput() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.ofNullable(actualOutput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets runtime error."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the runtime error"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cRuntimeError\u003e getRuntimeError() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.ofNullable(this.runtimeError);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"Success: \" + this.isSuccessful + \"\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"Expected: \" + this.expectedOutput"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"Actual: \" + this.actualOutput"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"Error: \" + this.getRuntimeError().isPresent() + \"\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof TestCaseResult) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult other \u003d (TestCaseResult) object;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.isSuccessful \u003d\u003d this.isSuccessful"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.input.equals(this.input)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.expectedOutput.equals(this.expectedOutput)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.getActualOutput().equals(this.getActualOutput())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.getRuntimeError().equals(this.getRuntimeError());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 49,
      "limhawjia": 81
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/program/TestResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.CompileError;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents the results of running a user\u0027s solution against the specified test cases"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TestResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cTestCaseResult\u003e results;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final long numPassed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Optional\u003cCompileError\u003e compileError;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Test executor result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param results the results"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestResult(List\u003cTestCaseResult\u003e results) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireNonNull(results);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.results \u003d new ArrayList\u003c\u003e(results);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.numPassed \u003d results.parallelStream().filter(TestCaseResult::isSuccessful).count();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.compileError \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Test executor result."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param compileError the compile error"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestResult(CompileError compileError) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.numPassed \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.compileError \u003d Optional.of(compileError);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns if the test result was successful."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the test was successful"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isSuccessful() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.compileError.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.numPassed \u003d\u003d results.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets results."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the results"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTestCaseResult\u003e getResults() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets num passed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the num passed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public long getNumPassed() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return numPassed;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets compile error."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the compile error"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCompileError\u003e getCompileError() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return compileError;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof TestResult) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestResult other \u003d (TestResult) object;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.numPassed \u003d\u003d this.numPassed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.results.equals(this.results)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.getCompileError().equals(this.getCompileError());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"Test result:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"Successful : \" + this.isSuccessful() + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"Compile error : \" + this.getCompileError().isPresent() + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"Test cases run : \" + this.getResults().size();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 27,
      "limhawjia": 76
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/EnumStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The enum Enum status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public enum EnumStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The New."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    NEW {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return \"New\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The Attempted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    ATTEMPTED {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return \"Attempted\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The Passed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    PASSED {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return \"Passed\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 31
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a Question in the question bank. Each newly created question is tagged with a UUID. This UUID is not"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * saved to storage and is not exposed to external classes. However, it is used to determine the equality of questions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static int questionCount \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Set\u003cTopic\u003e topics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cTestCase\u003e testCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final UserProgram userProgram;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final boolean isBookmarked;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id         the id"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param title        the title"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param status       the status"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param difficulty   the difficulty"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param topics       the topics"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param testCases    the test cases"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param userProgram  the user program"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param isBookmarked the bookmark flag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param description  the description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Question(int id, String title, Status status, Difficulty difficulty, Set\u003cTopic\u003e topics,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    List\u003cTestCase\u003e testCases, UserProgram userProgram,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    boolean isBookmarked, String description) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireAllNonNull(title, status, difficulty, topics, testCases, userProgram);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!Question.checkValidTitle(title)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.topics.addAll(topics);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.testCases.addAll(testCases);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.userProgram \u003d new UserProgram(userProgram.getCanonicalName(), userProgram.getSourceCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.isBookmarked \u003d isBookmarked;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param title        the title"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param status       the status"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param difficulty   the difficulty"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param topics       the topics"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param testCases    the test cases"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param userProgram  the user program"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param isBookmarked the is bookmarked"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param description  the description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public Question(String title, Status status, Difficulty difficulty, Set\u003cTopic\u003e topics,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    List\u003cTestCase\u003e testCases, UserProgram userProgram,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    boolean isBookmarked, String description) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        requireAllNonNull(title, status, difficulty, topics, testCases,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            userProgram, description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!Question.checkValidTitle(title)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.id \u003d questionCount++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.topics.addAll(topics);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.testCases.addAll(testCases);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.userProgram \u003d new UserProgram(userProgram.getCanonicalName(), userProgram.getSourceCode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.isBookmarked \u003d isBookmarked;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets title."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the title"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets status."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the status"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets difficulty."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the difficulty"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.difficulty;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets topic."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the topic"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Set\u003cTopic\u003e getTopics() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Collections.unmodifiableSet(this.topics);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets question description."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the description"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Returns the file path which stores the user program currently attempted"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * by the user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * If not attempted, the file path is an empty string."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the userProgram"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UserProgram getUserProgram() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new UserProgram(this.userProgram.getCanonicalName(), this.userProgram.getSourceCode());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Returns the test cases of the question."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the testcases"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTestCase\u003e getTestCases() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new ArrayList\u003c\u003e(this.testCases);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Is bookmarked boolean."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public boolean isBookmarked() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return isBookmarked;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Creates a new instance of the same question with a new isBookmarked attribute."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * This new instance has the same uuid as the previous instance."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param isBookmarked the isBookmarked to be updated to."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return a new instance of the question."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public Question withNewIsBookmarked(boolean isBookmarked) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Question(this.id, this.title, this.status, this.difficulty, this.topics,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                this.testCases, this.userProgram, isBookmarked, this.description);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates a new instance of the same question with a new status. This new instance has the same uuid as the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * previous instance."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param status the status to be updated to."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a new instance of the question."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Question withNewStatus(Status status) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Question(this.id, this.title, status, this.difficulty, this.topics,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                this.testCases, this.userProgram, this.isBookmarked, this.description);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates a new instance of the same question with a new user program. This new instance has the same uuid as the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * previous instance."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param userProgram the user program to be updated to."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a new instance of the question."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Question withNewUserProgram(UserProgram userProgram) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Question(this.id, this.title, this.status, this.difficulty, this.topics,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                this.testCases, userProgram, this.isBookmarked, this.description);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .append(\" Difficulty: \")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .append(getDifficulty())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                .append(\" Topics: \")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                .append(isBookmarked());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.getTopics().forEach(builder::append);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Checks if the given string is a valid title for a question. Titles must be alphanumeric."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param title the string to be checked."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the string is a valid title."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static boolean checkValidTitle(String title) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return title.matches(TITLE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Checks if the contents of the questions are equal. The UUID of each question is disregarded."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param other the other question to be checked against."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the contents are equal."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean checkContentsEqual(Question other) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return other.getTitle().equals(this.title)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u0026\u0026 other.getStatus().equals(this.status)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u0026\u0026 other.getDifficulty().equals(this.difficulty)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u0026\u0026 other.getTopics().equals(this.topics)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u0026\u0026 other.getTestCases().equals(this.testCases)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u0026\u0026 other.getUserProgram().equals(this.userProgram)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u0026\u0026 other.isBookmarked() \u003d\u003d this.isBookmarked();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (o instanceof Question) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return this.id \u003d\u003d ((Question) o).id;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return Objects.hash(title, topics, status, difficulty, description);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 26,
      "zhangj1an": 102,
      "limhawjia": 108,
      "-": 35
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/QuestionBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Question bank to encapsulate the storage of all the questions registered in the program. A requirement for the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * question bank is that each question is tagged with unique integer id from 0 to n - 1, where n is the number of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * questions in the question bank. All crud operations are performed using this unique integer id."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface QuestionBank {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns an unmodifiable view of the questions in question bank.. The order of the questions in the list must"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * always follow the ordering of their unique ids at any point."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the read only question list observable"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    ObservableList\u003cQuestion\u003e getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a new question to the question bank."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param question the question to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestion(Question question);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds the questions from a different question bank to this instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questionBank the question bank from which the questions are to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestionBank(QuestionBank questionBank);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Replaces all the questions in the question bank with the new collection."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questions new collection of questions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setQuestions(Collection\u003cQuestion\u003e questions);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Replaces the question corresponding to the id provided with a new question."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id       the id of the question to be replaced"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param question the new question."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void replaceQuestion(int id, Question question);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Replaces an old question with new question."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param oldQuestion the old question to be replaced."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newQuestion the new question."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void replaceQuestion(Question oldQuestion, Question newQuestion);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Removes the question corresponding to the id provided."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param id the id of the question to be deleted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void removeQuestion(int id);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Removes the question given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param oldQuestion the question to be removed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void removeQuestion(Question oldQuestion);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes all the questions in the question bank."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void resetQuestions();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 34,
      "limhawjia": 43
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/QuestionBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Utility class for building questions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class QuestionBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Set\u003cTopic\u003e topics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final List\u003cTestCase\u003e testCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private boolean isBookmarked;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UserProgram userProgram \u003d new UserProgram(\"Main\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a builder with the title added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param title the title to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a new builder."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a builder with the status added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param status the status to be added."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a new builder."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionBuilder withStatus(Status status) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new builder with the difficulty added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param difficulty the difficulty to be added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a new builder."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionBuilder withDifficulty(Difficulty difficulty) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Returns a new builder with the isBookmarked boolean added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param isBookmarked the isBookmarked boolean to be added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return a new builder."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public QuestionBuilder withIsBookmarked(boolean isBookmarked) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.isBookmarked \u003d isBookmarked;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new builder with the topics added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param topics the topics to be added."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a new builder."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionBuilder withTopics(Topic... topics) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.topics.addAll(Arrays.asList(topics));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new builder with the test cases added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param testCases the test cases to be added."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a new builder."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionBuilder withTestCases(TestCase... testCases) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.testCases.addAll(Arrays.asList(testCases));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a new builder with the user program added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param userProgram the user program to be added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a new builder."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionBuilder withUserProgram(UserProgram userProgram) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.userProgram \u003d userProgram;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Builds the specified attributes into a new question."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the newly built question."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Question build() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.title \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalArgumentException(\"Title cannot be null.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.status \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalArgumentException(\"Status cannot be null.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalArgumentException(\"Difficulty cannot be null.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return new Question(title, status, difficulty, topics, testCases,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            userProgram, isBookmarked, description);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * With description question builder."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param description the description"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the question builder"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public QuestionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets title."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the title"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 11,
      "zhangj1an": 33,
      "limhawjia": 101
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/StandardQuestionBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Wraps all data at the question-bank level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Duplicates are not allowed (by .isSameQuestion comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StandardQuestionBank implements QuestionBank {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e questionList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e unmodifiableQuestionList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FXCollections.unmodifiableObservableList(questionList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Standard question bank."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardQuestionBank() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Standard question bank."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questions the questions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardQuestionBank(Collection\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.setQuestions(questions);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Standard question bank."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param bank the bank"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardQuestionBank(QuestionBank bank) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.setQuestions(bank.getReadOnlyQuestionListObservable());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getReadOnlyQuestionListObservable() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.unmodifiableQuestionList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionList.add(question);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addQuestionBank(QuestionBank questionBank) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (Question question : questionBank.getReadOnlyQuestionListObservable()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.addQuestion(question);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setQuestions(Collection\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionList.setAll(questions);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void replaceQuestion(int id, Question question) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionList.set(id, question);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void replaceQuestion(Question oldQuestion, Question newQuestion) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int oldQuestionIndex \u003d IntStream.range(0, questionList.size())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(i -\u003e questionList.get(i).equals(oldQuestion))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(QuestionNotFoundRuntimeException::new);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionList.remove(oldQuestionIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionList.add(oldQuestionIndex, newQuestion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void removeQuestion(int id) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionList.remove(id);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void removeQuestion(Question oldQuestion) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionList.remove(oldQuestion);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void resetQuestions() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionList.clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 13,
      "limhawjia": 86
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/UserProgram.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a user\u0027s submission for a question."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UserProgram {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String canonicalName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String sourceCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new User program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param canonicalName the canonical name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param sourceCode    the source code"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UserProgram(String canonicalName, String sourceCode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireAllNonNull(canonicalName, sourceCode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.canonicalName \u003d canonicalName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sourceCode \u003d sourceCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets canonical name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the canonical name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCanonicalName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.canonicalName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets source code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the source code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getSourceCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.sourceCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof UserProgram) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            UserProgram other \u003d (UserProgram) object;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.canonicalName.equals(this.canonicalName)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.sourceCode.equals(this.sourceCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"Canonical name : \" + canonicalName + \"\\nSource code : \" + sourceCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 16,
      "limhawjia": 42
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/entities/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Represents a Question\u0027s difficulty in the question bank."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum Difficulty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Easy difficulty."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    EASY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Medium difficulty."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Hard difficulty."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    HARD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Contains boolean."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param s the s"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public static boolean contains(String s) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        for (Difficulty difficulty:values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (difficulty.name().equals(s)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 26,
      "limhawjia": 5,
      "-": 3
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/entities/Status.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Represents a Question\u0027s status in the question bank."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * New status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    NEW,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Attempted status."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    ATTEMPTED,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Passed status."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    PASSED"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 10,
      "limhawjia": 6,
      "-": 3
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/entities/TestCase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a test case for a question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TestCase {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String expectedResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Test case."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param input          the input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param expectedResult the expected result"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestCase(String input, String expectedResult) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireAllNonNull(input, expectedResult);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.expectedResult \u003d expectedResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets expected result."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the expected result"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getExpectedResult() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return expectedResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"Input: \" + input + \" Expected: \" + expectedResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (o instanceof TestCase) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return ((TestCase) o).expectedResult.equals(this.expectedResult)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 ((TestCase) o).input.equals(this.input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return Objects.hash(input, expectedResult);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 30,
      "limhawjia": 40
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/entities/Topic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Represents a Question\u0027s topic number in the question bank."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum Topic {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Array topic."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    ARRAY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Linked list topic."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    LINKED_LIST,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Hashtable topic."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    HASHTABLE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Tree topic."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TREE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Graph topic."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    GRAPH,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Recursion topic."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    RECURSION,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Divide and conquer topic."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DIVIDE_AND_CONQUER,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Dynamic programming topic."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DYNAMIC_PROGRAMMING,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Sorting topic."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    SORTING,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Others topic."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    OTHERS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Contains boolean."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param s the s"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public static boolean contains(String s) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        for (Topic topic:values()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (topic.name().equals(s)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 47,
      "limhawjia": 12,
      "-": 3
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/question/exceptions/QuestionNotFoundRuntimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Unchecked exception thrown when a question is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class QuestionNotFoundRuntimeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionNotFoundRuntimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionNotFoundRuntimeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 13
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/state/Activity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Enum to represent the user\u0027s current activity in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum Activity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    DASHBOARD,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    QUESTION,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    WORKSPACE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    NOTE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    HELP"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 3,
      "limhawjia": 9
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/state/ApplicationState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.StandardObservable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents the current state of the application. The current implementation contains information about the user\u0027s"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * current activity."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ApplicationState {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final StandardObservable\u003cActivity\u003e currentActivity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final StandardObservable\u003cBoolean\u003e isEvaluating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ApplicationState() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.currentActivity \u003d new StandardObservable\u003c\u003e(Activity.DASHBOARD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isEvaluating \u003d new StandardObservable\u003c\u003e(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setCurrentActivity(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.currentActivity.setValue(activity);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Observable\u003cActivity\u003e getCurrentActivityObservable() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.currentActivity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setIsEvaluating(boolean isEvaluating) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isEvaluating.setValue(isEvaluating);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Observable\u003cBoolean\u003e getIsEvaluating() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.isEvaluating;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Activity getCurrentActivity() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.currentActivity.getValue().orElse(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "limhawjia": 37
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.QuestionBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.QuestionBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.StandardQuestionBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Contains utility methods for populating {@code QuestionBank} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question TWO_NUMBER_ADDER \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Two Number Adder\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.PASSED)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.EASY)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            .withIsBookmarked(false)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.OTHERS)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"1 2\", \"3\"), new TestCase(\"100 2\", \"102\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"Adder\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"public class Adder { public static void main(String[] args) { } }\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(String.format(\"Given an array of integers, return \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"indices of the two numbers such that they add up to a specific\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \" target.\\n\\nYou may assume that each input would have exactly\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \" one solution, and you may not use the same element twice.\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"Example:\\n\\nGiven nums \u003d [2, 7, 11, 15], target \u003d 9,\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"Because nums[0] + nums[1] \u003d 2 + 7 \u003d 9,\\nreturn [0, 1].\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question VALID_SUDOKU \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Valid Sudoku\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.PASSED)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.MEDIUM)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            .withIsBookmarked(true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.OTHERS, Topic.ARRAY, Topic.DYNAMIC_PROGRAMMING)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"1 2 3 4 5 6 7 8 9\", \"True\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"-1 -1 -1 -1\", \"False\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"Sudoku\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"public class Sudoku { public static void main(String[] args) { } }\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(String.format(\"Given a sorted array and a target \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"value, return the index if the target is found. If not, return \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"the index where it would be if it were inserted in order.\\n\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"You may assume no duplicates in the array.\\n\\nExample 1:\\n\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"Input: [1,3,5,6], 5\\nOutput: 2\\nExample 2:\\n\\nInput: [1,3,5,6], \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"2\\nOutput: 1\\nExample 3:\\n\\nInput: [1,3,5,6], 7\\nOutput: 4\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"Example 4:\\n\\nInput: [1,3,5,6], 0\\nOutput: 0\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question PALINDROME_NUMBER \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Palindrome Number\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.PASSED)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.EASY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            .withIsBookmarked(true)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.OTHERS, Topic.RECURSION)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"12321\", \"True\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"10111\", \"False\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"Palindrome\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"public class Palindrome { public static void main(String[] args) { } }\"))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(String.format(\"Given a linked list, determine if it \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"has a cycle in it.\\n\\nTo represent a cycle in the given linked \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"list, we use an integer pos which represents the position (0-indexed) \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"in the linked list where tail connects to. If pos is -1, then \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"there is no cycle in the linked list.\\n\\n \\n\\nExample 1:\\n\\nInput: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"head \u003d [3,2,0,-4], pos \u003d 1\\nOutput: true\\nExplanation: There \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"is a cycle in the linked list, where tail connects to the second \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"node.\\n\\n\\nExample 2:\\n\\nInput: head \u003d [1,2], pos \u003d 0\\nOutput: \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"true\\nExplanation: There is a cycle in the linked list, where \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"tail connects to the first node.\\n\\n\\nExample 3:\\n\\nInput: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"head \u003d [1], pos \u003d -1\\nOutput: false\\nExplanation: There is no \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"cycle in the linked list.\"))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question SWAP_NODES_IN_PAIRS \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Swap nodes in pairs\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.NEW)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.MEDIUM)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            .withIsBookmarked(false)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.GRAPH, Topic.DYNAMIC_PROGRAMMING)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"5 12 33 23\", \"4132\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"2 31 01\", \"1232\"))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"NodePairs\", \"\"))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(String.format(\"Write an algorithm to determine if a \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"number is \\\"happy\\\".\\n\\nA happy number is a number defined by \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"the following process: Starting with any positive integer, \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"replace the number by the sum of the squares of its digits, \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"and repeat the process until the number equals 1 (where it will \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"stay), or it loops endlessly in a cycle which does not include \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"1. Those numbers for which this process ends in 1 are happy \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"numbers.\\n\\nExample: \\n\\nInput: 19\\nOutput: true\\nExplanation: \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"\\n12 + 92 \u003d 82\\n82 + 22 \u003d 68\\n62 + 82 \u003d 100\\n12 + 02 + 02 \u003d 1\"))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question MERGE_K_SORTED_LISTS \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Merge k Sorted Lists\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.ATTEMPTED)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.HARD)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            .withIsBookmarked(false)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.SORTING, Topic.LINKED_LIST)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"3 5 3 4 1 99 0 21 34 123 3 21 3 1\", \"0 1 3 4 21 34 99 123\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"1 4 1 2 3 4\", \"1 2 3 4\"))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"Merge\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"public class Merge { public static void main(String[] args) { } }\"))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(String.format(\"Given an array A of positive lengths, \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"return the largest perimeter of a triangle with non-zero area, \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"formed from 3 of these lengths.\\n\\nIf it is impossible to form \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"any triangle of non-zero area, return 0.\\n\\n \\n\\nExample 1:\\n\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"Input: [2,1,2]\\nOutput: 5\\nExample 2:\\n\\nInput: [1,2,1]\\nOutput: \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"0\\nExample 3:\\n\\nInput: [3,2,3,4]\\nOutput: 10\\nExample 4:\\n\\nInput: \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"[3,6,2,3]\\nOutput: 8\\n \\n\\nNote:\\n\\n3 \u003c\u003d A.length \u003c\u003d 10000\\n1 \u003c\u003d \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                + \"A[i] \u003c\u003d 10^6\"))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Get sample questions question [ ]."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the question [ ]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static Question[] getSampleQuestions() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Question[]{ TWO_NUMBER_ADDER, VALID_SUDOKU, PALINDROME_NUMBER,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            SWAP_NODES_IN_PAIRS, MERGE_K_SORTED_LISTS };"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets sample question bank."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the sample question bank"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static QuestionBank getSampleQuestionBank() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardQuestionBank sampleQb \u003d new StandardQuestionBank();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        for (Question sampleQuestion : getSampleQuestions()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            sampleQb.addQuestion(sampleQuestion);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return sampleQb;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 5,
      "zhangj1an": 55,
      "limhawjia": 69,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/observable/Listener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.observable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Interface to represent a listener in this native implementation of the observer pattern."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * @param \u003cT\u003e the type parameter of the object to be observed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Listener\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * The method called by this listener\u0027s observables when there is a new value updated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param value the new value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void onUpdate(T value);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 11
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/observable/Observable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.observable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Interface to represent an observable in this native implementation of the observer pattern."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * @param \u003cT\u003e the type parameter of the object to be observed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Observable\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a listener that will be updated when the value of the observable changes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param listener the listener to be added"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addListener(Listener\u003cT\u003e listener);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Removes a listener that was previously added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param listener the listener to be removed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void removeListener(Listener\u003cT\u003e listener);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 19
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/observable/StandardObservable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.observable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Standard implementation of the Observable interface."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * @param \u003cT\u003e the type parameter of the object to be observed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StandardObservable\u003cT\u003e implements Observable\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private T value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final HashSet\u003cListener\u003cT\u003e\u003e listeners;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Instantiates a new Standard observable with no default value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardObservable() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        value \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        listeners \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Instantiates a new Standard observable with a starting default value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param value the default value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardObservable(T value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        listeners \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the current value stored in the Observable instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the current value stored in this Observable instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cT\u003e getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.ofNullable(this.value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets the current value of the Observable instance to a new value. Each of the Observable\u0027s listeners"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * will be notified of this change."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param value the new value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setValue(T value) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.listeners.forEach(listener -\u003e listener.onUpdate(value));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes all previously registered Listeners in the Observable instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void clearListeners() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.listeners.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addListener(Listener\u003cT\u003e listener) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.listeners.add(listener);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        listener.onUpdate(value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void removeListener(Listener\u003cT\u003e listener) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.listeners.remove(listener);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 10,
      "limhawjia": 58
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/notes/JsonAdaptedNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * A JSON serializable version of a Note."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JsonAdaptedNote {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String sketchIdMostSignificantBits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String sketchIdLeastSignificantBits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"title\") String title, @JsonProperty(\"content\") String content,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                           @JsonProperty(\"sketchIdMostSignificantBits\") String sketchIdMostSignificantBits,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                           @JsonProperty(\"sketchIdLeastSignificantBits\") String sketchIdLeastSignificantBits) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchIdMostSignificantBits \u003d sketchIdMostSignificantBits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchIdLeastSignificantBits \u003d sketchIdLeastSignificantBits;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, converts a given Note instance to the Json serializable version."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param source the Note to convert"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonAdaptedNote(Note source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.title \u003d source.getTitle();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.content \u003d source.getContent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchIdMostSignificantBits \u003d String.valueOf(source.getSketchId().getMostSignificantBits());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sketchIdLeastSignificantBits \u003d String.valueOf(source.getSketchId().getLeastSignificantBits());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Converts the JsonSerializableNote to a Note instance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the converted Note instance"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IllegalValueException if there are invalid values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Note toModel() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalValueException(\"Title cannot be null.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Long mostSignificantBits \u003d Long.valueOf(sketchIdMostSignificantBits);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Long leastSignificantBits \u003d Long.valueOf(sketchIdLeastSignificantBits);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final UUID sketchId \u003d new UUID(mostSignificantBits, leastSignificantBits);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Note(title, content, sketchId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 56
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/notes/JsonNoteBankStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.NoteBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Implementation of the NoteBankStorage interface that stores NoteBank data in the Json format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JsonNoteBankStorage implements NoteBankStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonNoteBankStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, sets the default storage file path to the given file path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param filePath the default storage file path"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonNoteBankStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"JsonNoteStorage file path set : \" + filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Path getNoteBankFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cNoteBank\u003e readNoteBank() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.readNoteBank(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cNoteBank\u003e readNoteBank(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cJsonSerializableNoteBank\u003e jsonNoteBank \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                filePath, JsonSerializableNoteBank.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (jsonNoteBank.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(jsonNoteBank.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void saveNoteBank(NoteBank noteBank) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        NoteBankStorage.saveNoteBank(noteBank, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 64
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/notes/JsonSerializableNoteBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.NoteBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.StandardNoteBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * A JSON serializable version of the NoteBank class used for storage purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@JsonRootName(value \u003d \"noteBank\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JsonSerializableNoteBank {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonSerializableNoteBank(@JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, converts a given NoteBank instance to the Json serializable version."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param source the NoteBank to convert"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonSerializableNoteBank(NoteBank source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notes.addAll(source.getReadOnlyNotesObservableList().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(JsonAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Converts the JsonSerializableNoteBank to a NoteBank instance."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the converted NoteBank instance"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IllegalValueException if there are invalid values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NoteBank toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardNoteBank noteBank \u003d new StandardNoteBank();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (JsonAdaptedNote note : notes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            noteBank.addNote(note.toModel());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return noteBank;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 49
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/notes/NoteBankStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.NoteBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a storage for NoteBanks. The NoteBankStorage holds a default file path to save and load the NoteBank to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface NoteBankStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the file path that the NoteBankStorage instance is saving to."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the storage file path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Path getNoteBankFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Loads a NoteBank instance from the default file path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the loaded NoteBank"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws DataConversionException if the file contains corrupt data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException if the file cannot be read"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Optional\u003cNoteBank\u003e readNoteBank() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Loads a NoteBank instance from the given file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the loaded NoteBank"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws DataConversionException if the file contains corrupt data"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException if the file cannot be read"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Optional\u003cNoteBank\u003e readNoteBank(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Saves the given NoteBank instance to the default file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param noteBank the NoteBank instance to be saved"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException if the file cannot be saved"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void saveNoteBank(NoteBank noteBank) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Static method to save a given NoteBank instance to a given file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param noteBank the NoteBank instance to be saved"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param filePath the file path to save the NoteBank to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException if the file cannot be saved"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static void saveNoteBank(NoteBank noteBank, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireNonNull(noteBank);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNoteBank(noteBank), filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 60
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/question/JsonAdaptedQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * Jackson-friendly version of {@link Question}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JsonAdaptedQuestion {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final boolean isBookmarked;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cString\u003e topics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cJsonAdaptedTestCase\u003e testCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final JsonAdaptedUserProgram userProgram;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuestion} with the given question details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param title        the title"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param status       the status"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param difficulty   the difficulty"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param isBookmarked the bookMark indicator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param topics       the topics"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param testCases    the test cases"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param userProgram  the user program"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param description  the description"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonAdaptedQuestion(@JsonProperty(\"title\") String title, @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                               @JsonProperty(\"difficulty\") String difficulty,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                               @JsonProperty(\"isBookmarked\") boolean isBookmarked,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                               @JsonProperty(\"topics\") List\u003cString\u003e topics,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                               @JsonProperty(\"testCases\") List\u003cJsonAdaptedTestCase\u003e testCases,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                               @JsonProperty(\"userProgram\") JsonAdaptedUserProgram userProgram,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                               @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.isBookmarked \u003d isBookmarked;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (topics !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.topics.addAll(topics);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (testCases !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.testCases.addAll(testCases);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.userProgram \u003d userProgram;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Converts a given {@code Question} into this class for Jackson use."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param source the source"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public JsonAdaptedQuestion(Question source) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.title \u003d source.getTitle();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.status \u003d source.getStatus().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.difficulty \u003d source.getDifficulty().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.isBookmarked \u003d source.isBookmarked();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.topics.addAll(source.getTopics().stream().map(Objects::toString).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.testCases.addAll(source.getTestCases().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(JsonAdaptedTestCase::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.userProgram \u003d new JsonAdaptedUserProgram(source.getUserProgram());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.description \u003d source.getDescription();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Question} object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the question"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted question."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Question toModel() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalValueException(\"Title cannot be null.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!Question.checkValidTitle(title)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalValueException(\"Invalid title.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalValueException(\"Status cannot be null.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IllegalValueException(\"Difficulty cannot be null.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new IllegalValueException(\"Description cannot be null.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final Status status \u003d Status.valueOf(this.status);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final Difficulty difficulty \u003d Difficulty.valueOf(this.difficulty);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        final boolean isBookmarked \u003d this.isBookmarked;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final Set\u003cTopic\u003e newTopicsSet \u003d this.topics.stream().map(Topic::valueOf).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTestCase\u003e newTestCaseList \u003d this.testCases.stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(JsonAdaptedTestCase::toModel)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final UserProgram newUserProgram \u003d this.userProgram.toModel();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return new Question(title, status, difficulty, newTopicsSet,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            newTestCaseList, newUserProgram, isBookmarked, description);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets title."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the title"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets status."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the status"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets difficulty."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the difficulty"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getDifficulty() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this.difficulty;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets description."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the description"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets topics."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the topics"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public List\u003cString\u003e getTopics() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this.topics;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets test cases."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the test cases"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public List\u003cJsonAdaptedTestCase\u003e getTestCases() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this.testCases;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets user program."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the user program"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public JsonAdaptedUserProgram getUserProgram() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return this.userProgram;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 7,
      "zhangj1an": 102,
      "limhawjia": 45,
      "-": 35
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/question/JsonAdaptedTestCase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Json friendly representation of the test case model for read and write by the Jackson library."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JsonAdaptedTestCase {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String expectedResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Json adapted test case."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param input          the input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param expectedResult the expected result"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonAdaptedTestCase(@JsonProperty(\"input\") String input,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                               @JsonProperty(\"expectedResult\") String expectedResult) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.expectedResult \u003d expectedResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Json adapted test case."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param source the source"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonAdaptedTestCase(TestCase source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.input \u003d source.getInput();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.expectedResult \u003d source.getExpectedResult();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * To model test case."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the test case"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestCase toModel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new TestCase(input, expectedResult);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 16,
      "limhawjia": 29
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/question/JsonAdaptedUserProgram.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Json friendly representation of the user program model for read and write by the Jackson library."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JsonAdaptedUserProgram {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String canonicalName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String sourceCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Json adapted user program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param canonicalName the canonical name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param sourceCode    the source code"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonAdaptedUserProgram(@JsonProperty(\"canonicalName\") String canonicalName,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                  @JsonProperty(\"sourceCode\") String sourceCode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.canonicalName \u003d canonicalName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sourceCode \u003d sourceCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Json adapted user program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param userProgram the user program"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonAdaptedUserProgram(UserProgram userProgram) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.canonicalName \u003d userProgram.getCanonicalName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sourceCode \u003d userProgram.getSourceCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * To model user program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the user program"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UserProgram toModel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new UserProgram(canonicalName, sourceCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 16,
      "limhawjia": 30
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/question/JsonQuestionBankStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.QuestionBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * A class to access QuestionBank data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class JsonQuestionBankStorage implements QuestionBankStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Json question bank storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param filePath the file path"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public JsonQuestionBankStorage(Path filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.info(\"file path becomes:\" + filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Path getQuestionBankFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cQuestionBank\u003e readQuestionBank() throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return readQuestionBank(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Similar to {@link #readQuestionBank()}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cQuestionBank\u003e readQuestionBank(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cJsonSerializableStandardQuestionBank\u003e jsonQuestionBank \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                filePath, JsonSerializableStandardQuestionBank.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (jsonQuestionBank.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(jsonQuestionBank.get().toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void saveQuestionBank(QuestionBank questionBank) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        QuestionBankStorage.saveQuestionBank(questionBank, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 18,
      "limhawjia": 17,
      "-": 37
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/question/JsonSerializableStandardQuestionBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.QuestionBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.StandardQuestionBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * An Immutable QuestionBank that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@JsonRootName(value \u003d \"questionBank\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JsonSerializableStandardQuestionBank {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final List\u003cJsonAdaptedQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Constructs a {@code JsonSerializableQuestionBank} with the given questions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questions the questions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonSerializableStandardQuestionBank(@JsonProperty(\"questions\") List\u003cJsonAdaptedQuestion\u003e questions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questions.addAll(questions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates a JsonSerializableQuestionBank from the given question bank as source."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param source the question bank to be used as the source."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JsonSerializableStandardQuestionBank(QuestionBank source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.addAll(source.getReadOnlyQuestionListObservable().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(JsonAdaptedQuestion::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Converts this question bank into the model\u0027s {@code QuestionBank} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the standard question bank"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardQuestionBank toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardQuestionBank standardQuestionBank \u003d new StandardQuestionBank();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        for (JsonAdaptedQuestion jsonAdaptedQuestion : questions) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Question question \u003d jsonAdaptedQuestion.toModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            standardQuestionBank.addQuestion(question);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return standardQuestionBank;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 36,
      "limhawjia": 23
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/storage/question/QuestionBankStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.QuestionBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.StandardQuestionBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a storage for {@link StandardQuestionBank}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public interface QuestionBankStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the question bank file path"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Path getQuestionBankFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns QuestionBank data as a {@link QuestionBank}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the optional"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Optional\u003cQuestionBank\u003e readQuestionBank() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Read question bank optional."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param filePath the file path"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the optional"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws DataConversionException the data conversion exception"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException             the io exception"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @see #getQuestionBankFilePath() #getQuestionBankFilePath()#getQuestionBankFilePath()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Optional\u003cQuestionBank\u003e readQuestionBank(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Saves the given {@link QuestionBank} to the storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionBank cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void saveQuestionBank(QuestionBank questionBank) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Save question bank."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionBank the question bank"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param filePath     the file path"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    static void saveQuestionBank(QuestionBank questionBank, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        requireNonNull(questionBank);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStandardQuestionBank(questionBank), filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 31,
      "limhawjia": 11,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/TestExecutor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.CopyOnWriteArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.ExecutionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestCaseResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.Compiler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.CompilerException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.CompilerFileContentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.CompilerEnvironment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.ClearEnvironmentException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.JavaFileCreationException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.EmptyUserProgramException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.TestExecutorException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.TestExecutorExceptionWrapper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.ProgramExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.exceptions.ProgramExecutorException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ClassFile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.CompileError;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.JavaFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ProgramInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ProgramOutput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Executes tests on user\u0027s written programs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TestExecutor {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageTestExecutorFailed \u003d \"Test executor failed unexpectedly.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final CompilerEnvironment environment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Compiler compiler;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final ProgramExecutor executor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int timeLimit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Test executor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param environment the environment"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param compiler    the compiler"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param executor    the executor"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestExecutor(CompilerEnvironment environment, Compiler compiler, ProgramExecutor executor, int timeLimit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.environment \u003d environment;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.compiler \u003d compiler;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.executor \u003d executor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.timeLimit \u003d timeLimit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(TestExecutor.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Runs the user\u0027s program against a list of test cases. The UserProgram\u0027s sourceCode is required to match its"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * canonical name for the tests to be executed successfully. The results are packaged and returned as a TestResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * instance. The user\u0027s program specified canonical name and its source code must match or an exception will be"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * thrown. E.g. if the canonical name is dukeacademy.testexecutor.TestExecutor, it must"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * have the package statement \"package dukeacademy.testexecutor\" and it must contain an outer class"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * TestExecutor."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param testCases the test cases to be run."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program   the user\u0027s program."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a result instance."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TestExecutorException           if the test executor fails unexpectedly."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IncorrectCanonicalNameException if the canonical name of the UserProgram does not match its source code."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws EmptyUserProgramException       the empty user program exception"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestResult runTestCases(List\u003cTestCase\u003e testCases, UserProgram program) throws TestExecutorException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException, EmptyUserProgramException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"TestCases received : \" + testCases.toString().replaceAll(\"\\n\", \"\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"User program received : \" + program);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // First check that the user\u0027s program is not empty"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (program.getSourceCode().matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Empty user program received, tests will not be run\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new EmptyUserProgramException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Compile the user\u0027s program"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ClassFile classFile \u003d this.compileProgram(program);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Compilation succeeded, proceeding to run test cases...\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Initialize thread-safe List to collect results of test case execution"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            CopyOnWriteArrayList\u003cTestCaseResult\u003e results \u003d new CopyOnWriteArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // List used to combine all CompletableFuture instances later on"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cCompletableFuture\u003cTestCaseResult\u003e\u003e completableFutureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            for (TestCase testCase : testCases) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                // Map each test case to the result of running them against the user\u0027s program"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                CompletableFuture\u003cTestCaseResult\u003e evaluationTask \u003d this.getEvaluationTask(classFile, testCase)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        .whenCompleteAsync((testCaseResult, throwable) -\u003e results.add(testCaseResult));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                completableFutureList.add(evaluationTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                // Attempt to get the results of running each test case"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                CompletableFuture.allOf(completableFutureList.toArray(CompletableFuture[]::new)).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.info(\"Test execution completed. Test cases ran : \" + results.size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return new TestResult(results);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            } catch (TestExecutorExceptionWrapper | InterruptedException | ExecutionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.warning(\"Test execution failed unexpectedly. Aborting operation...\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new TestExecutorException(e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CompilerFileContentException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return this.getTestExecutorResultWithCompileError(e.getCompileError());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to map the results of a program evaluation task to a TestCaseResult."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param classFile the ClassFile to be executed"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param testCase  the test case to be ran against"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a CompletableFuture that returns a TestCaseResult"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TestExecutorException"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private CompletableFuture\u003cTestCaseResult\u003e getEvaluationTask(ClassFile classFile, TestCase testCase)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throws TestExecutorException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Retrieve the necessary inputs/outputs"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramInput input \u003d new ProgramInput(testCase.getInput());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String testCaseInput \u003d testCase.getInput();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String testCaseExpected \u003d testCase.getExpectedResult();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CompletableFuture\u003cProgramOutput\u003e executionTask;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // First attempt to retrieve the program execution task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            executionTask \u003d executor.executeProgram(classFile, input);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (ProgramExecutorException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Test execution failed unexpectedly. Aborting operation...\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TestExecutorException(e.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult erroredTestCaseResult \u003d TestCaseResult.getErroredTestCaseResult(testCaseInput, testCaseExpected,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"Time limit exceeded!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Map the result of the execution task to a TestCaseResult upon completion and set it to timeout accordingly"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return executionTask"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .handleAsync((programOutput, throwable) -\u003e getTestCaseResultFromProgramOutput(testCase, programOutput))"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .completeOnTimeout(erroredTestCaseResult, timeLimit, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Compiles the user program into a Java class file that can be executed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program the user\u0027s program"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a Java class file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TestExecutorException           if the test executor fails unexpectedly."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CompilerFileContentException    if the contents of the program is not compilable."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IncorrectCanonicalNameException if the canonical name of the user program does not match its contents"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ClassFile compileProgram(UserProgram program) throws TestExecutorException, CompilerFileContentException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Compiling program...\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.environment.clearEnvironment();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            JavaFile javaFile \u003d this.environment.createJavaFile(program);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return this.compiler.compileJavaFile(javaFile);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CompilerException | JavaFileCreationException | ClearEnvironmentException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Compilation failed...\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TestExecutorException(messageTestExecutorFailed, e);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TestResult getTestExecutorResultWithCompileError(CompileError error) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new TestResult(error);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TestCaseResult getTestCaseResultFromProgramOutput(TestCase testcase, ProgramOutput output) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (output.getRuntimeError().isPresent()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String expected \u003d testcase.getExpectedResult();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String errorMessage \u003d output.getRuntimeError().get().getErrorMessage();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return TestCaseResult.getErroredTestCaseResult(testcase.getInput(), expected, errorMessage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String input \u003d testcase.getInput();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected \u003d testcase.getExpectedResult().replaceAll(\"(\\n|\\r\\n)\", System.lineSeparator());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String actual \u003d output.getOutput().replaceAll(\"\\n\", \"\\n\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (expected.equals(actual)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return TestCaseResult.getSuccessfulTestCaseResult(input, actual);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return TestCaseResult.getFailedTestCaseResult(input, expected, actual);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 188
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/TestExecutorUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * A utility class to handle complicated logic required in the TestExecutor package."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TestExecutorUtils {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Checks if a given program matches the canonical name. I.e. it has the correct package and class declarations"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * to match the canonical name. E.g. dukeacademy.testexecutor.TestExecutorUtils should have the package statement"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \"package dukeacademy.testexecutor\" and the class \"TestExecutorUtils\" declared as an outer class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param canonicalName the canonical name to be checked"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program       the program to be checked"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true of they match"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static boolean checkCanonicalNameMatchesProgram(String canonicalName, String program) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        boolean packageStatementMatch \u003d checkPackageMatch(canonicalName, program);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        boolean containsMatchingClass \u003d checkContainsMatchingClass(canonicalName, program);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return packageStatementMatch \u0026\u0026 containsMatchingClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Checks if a program\u0027s package statement matches the given canonical name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param canonicalName the canonical name to be checked"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program the program to be checked"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if they match"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static boolean checkPackageMatch(String canonicalName, String program) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] canonicalNameSplit \u003d canonicalName.split(\"\\\\.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String packageStatement \u003d program.split(\";\")[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (packageStatement.startsWith(\"package\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String[] packageStatementSplit \u003d packageStatement.replaceFirst(\"package\", \"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .trim().split(\"\\\\.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (canonicalNameSplit.length !\u003d packageStatementSplit.length + 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            for (int i \u003d 0; i \u003c packageStatementSplit.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                if (!canonicalNameSplit[i].equals(packageStatementSplit[i])) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Checks if the program contains an outer class that matches the one in the canonical name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param canonicalName the canonical name to be checked"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program the program to be checked"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if a matching class is found"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static boolean checkContainsMatchingClass(String canonicalName, String program) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] canonicalNameSplit \u003d canonicalName.split(\"\\\\.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String className \u003d canonicalNameSplit[canonicalNameSplit.length - 1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Remove any class declarations that could be in comments"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String programRemoveComments \u003d program"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .replaceAll(\"(?:/\\\\*(?:[^*]|(?:\\\\*+[^*/]))*\\\\*+/)|(?://.*)\", \"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Split the program by class declaration with the required class name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] programSplit \u003d programRemoveComments.split(\"class \" + className);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (programSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Class declaration not found"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // For each occurrence of the class declaration, check to see if it is an outermost class declaration by"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // matching the number of opening/closing braces"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (int i \u003d 1; i \u003c programSplit.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Stack\u003cCharacter\u003e braceStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            boolean valid \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            for (char c : programSplit[i].toCharArray()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                if (c \u003d\u003d \u0027{\u0027) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    braceStack.push(\u0027{\u0027);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                if (c \u003d\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    if (braceStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        valid \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    braceStack.pop();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (valid) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "limhawjia": 101
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/compiler/Compiler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.compiler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.CompilerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.CompilerFileContentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ClassFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.JavaFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a compiler used by the application to compile java files into class files. The compiled files should be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * found in the same location of the original Java files."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Compiler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Compiles the given java file into a Java Class file. Note that the Java file cannot be empty."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param file the java file to be compiled"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the compiled class file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CompilerException            if the file fails to compile due to compiler error"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CompilerFileContentException if the file fails to compile due to its contents"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    ClassFile compileJavaFile(JavaFile file) throws CompilerException, CompilerFileContentException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "limhawjia": 20
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/compiler/StandardCompiler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.compiler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.tools.Diagnostic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.tools.DiagnosticCollector;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.tools.JavaCompiler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.tools.JavaFileObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.tools.StandardJavaFileManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.tools.ToolProvider;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.CompilerException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.CompilerFileContentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.EmptyJavaFileException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ClassFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.JavaFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * The standard implementation of the Compiler interface. This class utilizes Java Standard Library\u0027s JavaCompiler class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * in order to compile Java files programmatically."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StandardCompiler implements Compiler {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageRetrieveJavaFileFailed \u003d \"Compiler could not retrieve Java file : \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageCompilerFailedUnexpected \u003d \"Compiler failed unexpectedly\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final JavaCompiler javaCompiler;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StandardCompiler.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Standard compiler."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardCompiler() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.javaCompiler \u003d ToolProvider.getSystemJavaCompiler();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ClassFile compileJavaFile(JavaFile javaFile) throws CompilerException, CompilerFileContentException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String content \u003d Files.readString(javaFile.getFile().toPath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (\"\".equals(content)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new EmptyJavaFileException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(messageCompilerFailedUnexpected);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CompilerException(e.getMessage(), e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Compiling java file : \" + javaFile);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Iterable\u003c? extends JavaFileObject\u003e sources \u003d this.getJavaFileObjects(javaFile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.compileJavaFiles(sources);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Compilation complete : \" + javaFile);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // If compilation is successful, the class file produced will be in the same folder with the same"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // canonical name and class path"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ClassFile result \u003d new ClassFile(javaFile.getCanonicalName(), javaFile.getClassPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Successfully retrieved generated Class file : \" + result);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(messageCompilerFailedUnexpected);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CompilerException(e.getMessage(), e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Retrieves JavaFiles as an iterable of JavaFileObjects object used by the JavaCompiler class for compilation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param javaFile an instance of the JavaFile model class"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return an iterable of JavaFileObjects"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CompilerException if the file cannot be retrieved"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Iterable\u003c? extends JavaFileObject\u003e getJavaFileObjects(JavaFile javaFile) throws CompilerException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // DiagnosticsCollector is used to listen for non-fatal diagnostics"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DiagnosticCollector\u003cJavaFileObject\u003e fileManagerDiagnostics \u003d new DiagnosticCollector\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Standard file manager used to get JavaFileObjects"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardJavaFileManager fileManager \u003d javaCompiler"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getStandardFileManager(fileManagerDiagnostics, null, null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Retrieve our Java file as a JavaFileObject"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Iterable\u003c? extends JavaFileObject\u003e sources \u003d fileManager.getJavaFileObjects(javaFile.getFile());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Ensure that the DiagnosticsCollector did not collect any errors"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cDiagnostic\u003c? extends JavaFileObject\u003e\u003e errors \u003d fileManagerDiagnostics.getDiagnostics();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (errors.size() \u003e 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(messageRetrieveJavaFileFailed + javaFile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CompilerException(messageRetrieveJavaFileFailed + javaFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return sources;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Compiles JavaFileObject sources into actual Class files using the JavaCompiler class."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sources an iterable of JavaFileObjects that can be compiled by the compiler"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CompilerFileContentException if a compilation error occurs"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void compileJavaFiles(Iterable\u003c? extends JavaFileObject\u003e sources) throws CompilerFileContentException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // DiagnosticCollector used to listen for non-fatal diagnostics from the compiler"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DiagnosticCollector\u003cJavaFileObject\u003e compilerDiagnostics \u003d new DiagnosticCollector\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Standard file manager used to write newly compiled artifacts"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardJavaFileManager fileManager \u003d javaCompiler"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getStandardFileManager(compilerDiagnostics, null, null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Get an asynchronous task representing the compilation of the source Java files"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaCompiler.CompilationTask compilationTask \u003d javaCompiler"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getTask(null, fileManager, compilerDiagnostics, null, null, sources);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Start the compilation task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        compilationTask.call();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Ensure that the DiagnosticCollector did not collect any errors"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cDiagnostic\u003c? extends JavaFileObject\u003e\u003e errors \u003d compilerDiagnostics.getDiagnostics();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cString\u003e errorMessages \u003d errors.stream()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .map(Object::toString)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .reduce((m1, m2) -\u003e m1 + \"\\n\" + m2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (errorMessages.isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CompilerFileContentException(errorMessages.get());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 4,
      "limhawjia": 127
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/compiler/exceptions/CompilerException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.compiler.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by compiler."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CompilerException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Compiler exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CompilerException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Compiler exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CompilerException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/compiler/exceptions/CompilerFileContentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.compiler.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.CompileError;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by the compiler if a compilation error occurs due to the contents of the file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CompilerFileContentException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Compiler file content exception."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CompilerFileContentException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets compile error."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the compile error"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CompileError getCompileError() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new CompileError(this.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 10,
      "limhawjia": 16
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/compiler/exceptions/EmptyJavaFileException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.compiler.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown when the JavaFile to be compiled by the compiler is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class EmptyJavaFileException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/environment/CompilerEnvironment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.environment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.ClearEnvironmentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.JavaFileCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.JavaFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents an environment needed for the compiler create and compile Java files from the user\u0027s input. It contains"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * methods to create and retrieve Java files from within the environment. The environment should maintain an open state"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * upon creation and a closed state upon closing. Operations should not be supported after the environment is closed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface CompilerEnvironment {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates a Java file within the compiler environment. The canonical name described in the UserProgram instance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * must match its source code. E.g. if the canonical name is dukeacademy.testexecutor.CompilerEnvironment, it must"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * have the package statement \"package dukeacademy.testexecutor\" and it must contain"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * an outer class CompilerEnvironment."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program the program to be converted to a Java file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the file created"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws JavaFileCreationException       if the file creation fails"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IncorrectCanonicalNameException if the canonical name derived"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * from the program does not match its source code."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    JavaFile createJavaFile(UserProgram program) throws JavaFileCreationException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the file corresponding to the canonical name provided"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param canonicalName the name of the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the file corresponding to the name provided"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws FileNotFoundException if the file does not exists"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    JavaFile getJavaFile(String canonicalName) throws FileNotFoundException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Clears the environment of any existing files and folders"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws ClearEnvironmentException if the environment cannot be cleared"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void clearEnvironment() throws ClearEnvironmentException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Closes the environment by deleting the directory at which it was created."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 9,
      "limhawjia": 43
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/environment/StandardCompilerEnvironment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.environment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.ClearEnvironmentException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.ClosedEnvironmentException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.CreateEnvironmentException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.JavaFileCreationException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.JavaFile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * The standard implementation of the CompilerEnvironment interface that used by the application to create and manage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * files required for testing the user\u0027s answers. The standard implementation uses Java\u0027s standard libraries for IO,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * files and paths to generate and maintain these files."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StandardCompilerEnvironment implements CompilerEnvironment {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    // Standard error messages"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageUnableToCreateFolder \u003d \" Unable to create folder at : \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageCreateJavaFileFailed \u003d \"Failed to create java file : \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageWriteUserProgramFailed \u003d \"Write user program failed : \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageJavaFileNotFound \u003d \"Matching Java file not found : \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String messageClearEnvironmentFailed \u003d \"Unable to delete files and folders at : \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    // Logger used to report behavior of the environment"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StandardCompilerEnvironment.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    // Location path at which new files are created and written"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Path locationPath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    // List of previous created Java files"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cJavaFile\u003e createdFiles;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isClosed;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Standard compiler environment."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param locationPath the location path"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws CreateEnvironmentException the create environment exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardCompilerEnvironment(Path locationPath) throws CreateEnvironmentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.locationPath \u003d locationPath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.createdFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.createDirectory(this.locationPath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isClosed \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JavaFile createJavaFile(UserProgram program) throws JavaFileCreationException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.isClosed) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ClosedEnvironmentException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Create empty Java file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName \u003d program.getCanonicalName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File file \u003d this.createEmptyJavaFile(canonicalName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Write program contents to the Java file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode \u003d program.getSourceCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.writeProgramToJavaFile(file, sourceCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Returns the newly created file as application\u0027s JavaFile model after adding it to the list of created files"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            JavaFile javaFile \u003d new JavaFile(canonicalName, locationPath.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.createdFiles.add(javaFile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return javaFile;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new JavaFileCreationException(messageCreateJavaFileFailed + file.toPath(), e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JavaFile getJavaFile(String canonicalName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.isClosed) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ClosedEnvironmentException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Search and return JavaFile in list of created files"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cJavaFile\u003e file \u003d this.createdFiles.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(javaFile -\u003e javaFile.getCanonicalName().equals(canonicalName))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return file.orElseThrow(() -\u003e new FileNotFoundException(messageJavaFileNotFound + canonicalName));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void clearEnvironment() throws ClearEnvironmentException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.isClosed) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ClosedEnvironmentException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Clearing files and folder at : \" + locationPath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Traverse and delete created files and directories excluding the root folder"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Files.walk(locationPath)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .filter(path -\u003e !path.equals(locationPath))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .map(Path::toFile)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .forEach(File::delete);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Discard any references to previously created files"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.createdFiles.clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assert(Objects.requireNonNull(locationPath.toFile().listFiles()).length \u003d\u003d 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Environment successfully cleared : \" + locationPath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(messageClearEnvironmentFailed + locationPath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ClearEnvironmentException(messageClearEnvironmentFailed + locationPath, e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.isClosed) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ClosedEnvironmentException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Clearing files and folder at : \" + locationPath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Traverse and delete created files and directories including the root folder"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Files.walk(locationPath)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .map(Path::toFile)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .forEach(File::delete);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Discard any references to previously created files"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.createdFiles.clear();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assert(!this.locationPath.toFile().exists());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Environment successfully closed : \" + locationPath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(messageClearEnvironmentFailed + locationPath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Environment not closed properly, remnant files may persist at : \" + locationPath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.isClosed \u003d true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates a new directory at the specified path on the user\u0027s file system."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param directoryPath the path at which to create the directory"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CreateEnvironmentException if the directory fails to be created"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void createDirectory(Path directoryPath) throws CreateEnvironmentException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            File directory \u003d directoryPath.toFile();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (!directory.exists() \u0026\u0026 !directory.mkdirs()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.warning(messageUnableToCreateFolder + directoryPath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new CreateEnvironmentException(messageUnableToCreateFolder + directoryPath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assert(directory.exists());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Created new folder at : \" + directoryPath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (SecurityException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"SecurityException encountered. \" + messageUnableToCreateFolder + directoryPath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CreateEnvironmentException(messageUnableToCreateFolder + directoryPath, e);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates an empty Java file in the environment according to its canonical name together with the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * corresponding directories. For example, foo.bar.Test would be created as in .../foo/bar/Test.java."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param canonicalName the canonical name of the Java class"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the Java file created"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws JavaFileCreationException if the file creation fails."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private File createEmptyJavaFile(String canonicalName) throws JavaFileCreationException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Split the canonical name into individual subpackages and create a corresponding path."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path filePath \u003d Arrays.stream(canonicalName.split(\"\\\\.\"))"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .reduce(this.locationPath, Path::resolve, Path::resolve);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Add .java extension to the file path"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        filePath \u003d filePath.resolveSibling(filePath.getFileName() + \".java\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Creating empty Java file at : \" + filePath);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Create the directories and file"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(messageCreateJavaFileFailed + filePath.toString());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new JavaFileCreationException(messageCreateJavaFileFailed + filePath, e);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Verify that the file exists before returning"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(messageCreateJavaFileFailed + filePath.toString());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new JavaFileCreationException(messageCreateJavaFileFailed + filePath);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Java file created: \" + file.getPath());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Writes a user program\u0027s source code into a java file. If the write fails, the file is deleted."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param javaFile the Java file to write the code to"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program  the source code of the program"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws JavaFileCreationException if the program write fails"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void writeProgramToJavaFile(File javaFile, String program) throws JavaFileCreationException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"Writing user program to file: \" + javaFile.getPath());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Get an output writer to the file"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FileOutputStream fileOutputStream \u003d new FileOutputStream(javaFile);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Writer fileWriter \u003d new OutputStreamWriter(fileOutputStream);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Write the source code into the file"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            fileWriter.write(program);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // If file write fails, the file is deleted before an exception is thrown"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(messageWriteUserProgramFailed + javaFile.toPath());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (!javaFile.delete()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.warning(\"Unable to delete unwritten file : \" + javaFile.toPath());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new JavaFileCreationException(messageWriteUserProgramFailed + javaFile.toPath(), e);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logger.info(\"User program successfully written to file: \" + javaFile.getPath());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 6,
      "limhawjia": 246
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/environment/exceptions/ClearEnvironmentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.environment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown when the CompilerEnvironment fails to delete its containing files and folders."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ClearEnvironmentException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Clear environment exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ClearEnvironmentException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Clear environment exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ClearEnvironmentException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/environment/exceptions/ClosedEnvironmentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.environment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by the StandardCompilerEnvironment when its methods are called after it is closed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ClosedEnvironmentException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 8
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/environment/exceptions/CreateEnvironmentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.environment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by a CompilerEnvironment when it fails to be instantiated."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CreateEnvironmentException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Create environment exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CreateEnvironmentException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Create environment exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CreateEnvironmentException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/environment/exceptions/JavaFileCreationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.environment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by the compiler environment when an error occurs in creating a file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JavaFileCreationException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Java file creation exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JavaFileCreationException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Java file creation exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JavaFileCreationException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/exceptions/EmptyUserProgramException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception that is thrown when the specified source code in the UserProgram instance is empty before it is evaluated."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class EmptyUserProgramException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "limhawjia": 6
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/exceptions/IncorrectCanonicalNameException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception that is thrown when the contents of a JavaFile instance does not match the specified"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * canonical name."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class IncorrectCanonicalNameException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Incorrect canonical name exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public IncorrectCanonicalNameException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 11
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/exceptions/ProgramOutputException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by the ProgramOutput class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ProgramOutputException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Program output exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramOutputException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 10
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/exceptions/TestExecutorException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Execution thrown when the TestExecutor fails."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TestExecutorException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Test executor exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestExecutorException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Test executor exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestExecutorException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/exceptions/TestExecutorExceptionWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Unchecked wrapper for the checked TestExecutorException to allow for calling of methods in lambdas. This"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * is to allow for use of the Java streams library to parallelize the execution of test cases."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TestExecutorExceptionWrapper extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Test executor exception wrapper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TestExecutorExceptionWrapper(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 11
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/executor/ProgramExecutor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.executor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.exceptions.ProgramExecutorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ClassFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ProgramInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ProgramOutput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a Java program executor.."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface ProgramExecutor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a completable future that will execute the given Java class file with the given program input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program the program to be executed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input   the input to be fed into the program"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the program output"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws ProgramExecutorException if the execution fails"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    CompletableFuture\u003cProgramOutput\u003e executeProgram(ClassFile program, ProgramInput input)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throws ProgramExecutorException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "limhawjia": 23
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/executor/StandardProgramExecutor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.executor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.exceptions.ProgramExecutorException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.exceptions.ProgramExecutorExceptionWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ClassFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ProgramInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ProgramOutput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Standard executor for Java class files used by the application. This implementation utilizes Java Standard Library\u0027s"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Runtime class to execute Java programs on another thread. The program is executed using command line arguments."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StandardProgramExecutor implements ProgramExecutor {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String MESSAGE_PROGRAM_EXECUTION_FAILED \u003d \"The program failed to execute : \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Runtime runtime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StandardProgramExecutor.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StandardProgramExecutor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.runtime \u003d Runtime.getRuntime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CompletableFuture\u003cProgramOutput\u003e executeProgram(ClassFile program, ProgramInput input)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throws ProgramExecutorException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Process process \u003d this.getExecutionProcess(program);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Starting program execution: \" + program);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.info(\"Feeding program input: \" + program);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Starts the program by feeding the necessary inputs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.feedProgramInput(process, input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Converts the rest of the evaluation process into a CompletableFuture asynchronous task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return CompletableFuture.supplyAsync(() -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                logger.info(\"Processing program output: \" + program);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    ProgramOutput output \u003d this.getProgramOutput(process);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    logger.info(\"Output received : \" + program);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    logger.info(\"Program successfully executed: \" + program);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    throw new ProgramExecutorExceptionWrapper();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }).whenCompleteAsync((programOutput, throwable) -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                // Closes the input and output streams and kills the evaluation process to prevent memory leaks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.closeStreams(process);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                process.destroy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException | ProgramExecutorExceptionWrapper e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ProgramExecutorException(MESSAGE_PROGRAM_EXECUTION_FAILED + program);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Gets the execution process using Java\u0027s RunTime standard library."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param program the program to be executed as a ClassFile."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the execution process."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws ProgramExecutorException if the program fails to be executed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Process getExecutionProcess(ClassFile program) throws ProgramExecutorException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Generate the correct command for the process"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String className \u003d program.getCanonicalName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String classPath \u003d program.getClassPath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return this.runtime.exec(new String[]{\"java\", \"-cp\", classPath, className});"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ProgramExecutorException(MESSAGE_PROGRAM_EXECUTION_FAILED + program);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Gets the application\u0027s model of a program output from an execution process."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param process the executing process."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the program output of the process."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramOutput getProgramOutput(Process process) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Retrieve the error stream of the process"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        InputStream err \u003d process.getErrorStream();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Read any errors"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        BufferedReader errorReader \u003d new BufferedReader(new InputStreamReader(err));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String error \u003d errorReader.lines().collect(Collectors.joining());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Return errored program output if present"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!\"\".equals(error)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return ProgramOutput.getErroredProgramOutput(error);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Retrieve the output stream of the process"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        InputStream stdout \u003d process.getInputStream();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Read the output of the process"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stdout));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        char[] output \u003d new char[500];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int bytesRead \u003d reader.read(output);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Important because bytesRead is -1 when there is no output"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (bytesRead \u003d\u003d -1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            bytesRead \u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String programOutput \u003d String.copyValueOf(output, 0, bytesRead);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return ProgramOutput.getEmptyProgramOutput().append(programOutput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Feeds input into a currently executing execution process."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param process      the process to be fed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param programInput the inputs to be fed to the program."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws ProgramExecutorException if the input fails to be fed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void feedProgramInput(Process process, ProgramInput programInput) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Retrieve the input stream of the process"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputStream stdin \u003d process.getOutputStream();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try to write the input into the process"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new OutputStreamWriter(stdin));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        writer.write(programInput.getInput());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper methods to close streams of a process."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param process the process to be closed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void closeStreams(Process process) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            process.getOutputStream().close();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            process.getInputStream().close();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            process.getErrorStream().close();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"Unable to close process streams. Watch out for memory leaks.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "limhawjia": 160
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/executor/exceptions/ProgramExecutorException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.executor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Exception thrown by the program executor."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ProgramExecutorException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Program executor exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramExecutorException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Program executor exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param cause   the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramExecutorException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/executor/exceptions/ProgramExecutorExceptionWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.executor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An unchecked wrapper for the ProgramExecutorException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ProgramExecutorExceptionWrapper extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/models/ClassFile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a Class file in the user\u0027s file system. It contains the file\u0027s canonical name and classpath. Canonical"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * name refers to the name that is used in an import statement or when running a Java program from the command line."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * E.g. com.dukeacademy.testexecutor.TestExecutor. A FileNotFoundException is thrown during instantiation if the Class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * file does not actually exist."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ClassFile {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String canonicalName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String classPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Note that the class file corresponding to the canonical name and class path as specified in the arguments"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * must actually exist or a FileNotFoundException will be thrown. Both arguments cannot be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param canonicalName the canonical name of the Class file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param classPath     the classpath of the Class file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws FileNotFoundException if the corresponding Class file does not exists"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ClassFile(String canonicalName, String classPath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireAllNonNull(canonicalName, classPath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.canonicalName \u003d canonicalName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.classPath \u003d classPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.getFile().exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new FileNotFoundException(\"No Class file found : \" + this.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets canonical name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the canonical name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCanonicalName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.canonicalName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets class path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the class path"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getClassPath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.classPath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Combines and formats the class path and canonical name of the Class file to return its absolute path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the absolute path at which the file is Class file is located"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getAbsolutePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Paths.get(classPath).resolve(canonicalName.replace(\".\", File.separator) + \".class\").toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a Java standard File class instance that corresponds to the ClassFile instance."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a File instance corresponding to this ClassFile instance."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public File getFile() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String absolutePath \u003d this.getAbsolutePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new File(absolutePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true the object is another ClassFile instance with the same canonical name and classpath."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof ClassFile) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ClassFile other \u003d (ClassFile) object;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.canonicalName.equals(this.canonicalName)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.classPath.equals(this.classPath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.getAbsolutePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 15,
      "limhawjia": 78
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/models/CompileError.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a compile error encountered when compiling Java programs. The current implementation only contains the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * error message shown by the compiler."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CompileError {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Compile error."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param errorMessage the error message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CompileError(String errorMessage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true if the object is another CompileError instance with the same error message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof CompileError) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            CompileError other \u003d (CompileError) object;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.errorMessage.equals(this.errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 10,
      "limhawjia": 32
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/models/JavaFile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.TestExecutorUtils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.JavaFileCreationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a Java file in the application. The canonical name refers to the name of the class you would"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * use in an import statement e.g. DukeAcademy.model.program.JavaFile. This is needed to execute packaged classes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * from the root classpath. Guarantees that the contents of the JavaFile matches the canonical name at creation."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JavaFile {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JavaFile.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String canonicalName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String classPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Java file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param canonicalName the canonical name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param classPath     the class path"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws FileNotFoundException           the file not found exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws IncorrectCanonicalNameException the incorrect canonical name exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @throws JavaFileCreationException       the java file creation exception"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public JavaFile(String canonicalName, String classPath) throws FileNotFoundException,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException, JavaFileCreationException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.canonicalName \u003d canonicalName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.classPath \u003d classPath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.getFile().exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"No Java file found : \" + this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new FileNotFoundException(\"JavaFile creation failed due to FileNotFoundException : \" + this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.checkContentsValid()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            logger.warning(\"JavaFile creation failed due to incorrect canonical name : \" + this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new IncorrectCanonicalNameException(\"Incorrect canonical name : \" + this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets canonical name."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the canonical name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCanonicalName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.canonicalName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets class path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the class path"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getClassPath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.classPath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets absolute path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the absolute path"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getAbsolutePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Paths.get(classPath).resolve(canonicalName.replace(\".\", File.separator) + \".java\").toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public File getFile() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new File(this.getAbsolutePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Checks if the canonical name of the JavaFile matches its contents. This is done by reading the contents"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * of the actual existing Java file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the contents matches the canonical name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws JavaFileCreationException if the file cannot be read"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean checkContentsValid() throws JavaFileCreationException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String contents \u003d Files.readString(Paths.get(this.getAbsolutePath()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName, contents);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new JavaFileCreationException(e.getMessage(), e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true if the object is another instance of JavaFile with the same canonical name and classpath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof JavaFile) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            JavaFile other \u003d (JavaFile) object;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.canonicalName.equals(this.canonicalName)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.classPath.equals(this.classPath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.getAbsolutePath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 32,
      "limhawjia": 88
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/models/ProgramInput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents input to be fed into a program executed by the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ProgramInput {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Program input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param input the input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramInput(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true the object is another instance of ProgramInput with the same input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param object the object to be compared"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if they are equal."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof ProgramInput) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ProgramInput other \u003d (ProgramInput) object;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.input.equals(this.input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 33
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/models/ProgramOutput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.ProgramOutputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents output generated by programs ran by the application. Guarantees that errored ProgramOutputs will have"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * an empty output."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ProgramOutput {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final RuntimeError error;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramOutput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.output \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.error \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramOutput(String output) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.output \u003d output;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.error \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramOutput(RuntimeError error) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.output \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets empty program output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the empty program output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static ProgramOutput getEmptyProgramOutput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new ProgramOutput();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets errored program output."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param errorMessage the error message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the errored program output"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static ProgramOutput getErroredProgramOutput(String errorMessage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        requireNonNull(errorMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput output \u003d new ProgramOutput(new RuntimeError(errorMessage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets output."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the output"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.output;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets runtime error."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the runtime error"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cRuntimeError\u003e getRuntimeError() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.ofNullable(this.error);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a string to the end of the program output."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param output The string to be appended."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return newly amended output."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramOutput append(String output) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.error !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ProgramOutputException(\"Program output is already errored\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String newOutput \u003d this.output + output;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new ProgramOutput(newOutput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Joins another program output to the end of the current output."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param output The output to be appended."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return newly amended output."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramOutput append(ProgramOutput output) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.error !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ProgramOutputException(\"Program output is already errored\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.append(output.getOutput());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a string to the end of the program output as a new line."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param output The string to be appended."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return newly amended output."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramOutput appendNewLine(String output) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.error !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ProgramOutputException(\"Program output is already errored\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (\"\".equals(this.output)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new ProgramOutput(output);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String newOutput \u003d this.output + \"\\n\" + output;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new ProgramOutput(newOutput);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Joins another program output to the end of the current output after a new line."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param output The output to be appended."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return newly amended output."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ProgramOutput appendNewLine(ProgramOutput output) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.error !\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new ProgramOutputException(\"Program output is already errored\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.appendNewLine(output.getOutput());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true if the object is another instance of ProgramOutput with the same output and error."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param object the object to be compared"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if they are equal"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof ProgramOutput) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ProgramOutput other \u003d (ProgramOutput) object;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.getRuntimeError().equals(this.getRuntimeError())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 other.output.equals(this.output);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 25,
      "limhawjia": 125
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/testexecutor/models/RuntimeError.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Represents a runtime error encountered when executing a Java program. The current implementation only contains the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * error message."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class RuntimeError {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Runtime error."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param errorMessage the error message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public RuntimeError(String errorMessage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (object instanceof RuntimeError) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            RuntimeError other \u003d (RuntimeError) object;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return other.errorMessage.equals(this.errorMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 10,
      "limhawjia": 27
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Command box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param commandExecutor the command executor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CommandException | InvalidCommandArgumentsException | InvalidCommandKeywordException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "         * @param commandText the command text"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "         * @throws CommandException                 the command exception"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "         * @throws InvalidCommandArgumentsException the invalid command arguments exception"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "         * @throws InvalidCommandKeywordException   the invalid command keyword exception"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        void execute(String commandText) throws CommandException, InvalidCommandArgumentsException,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 12,
      "limhawjia": 7,
      "-": 68
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/Dashboard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Controller class for Dashboard. This dashboard allows the user to conveniently keep track"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * of the his personal progress and learning journey in Duke Academy."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class Dashboard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private static final String FXML \u003d \"Dashboard.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private static final String[] skillTiers \u003d {\"Novice\", \"Apprentice\", \"Master\", \"Grandmaster\", \"Duke\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private static final int[] skillTierCeilings \u003d {29, 49, 69, 89, 100};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private ProgressIndicator indicator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Text numDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Text numTotal;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Text currentTier;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Text numToNextTier;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Text nextTier;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Text progressDescription;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private VBox attempting;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private VBox bookmarked;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Button userGuideButton;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Button devGuideButton;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Button aboutUsButton;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Button contactUsButton;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private AnchorPane userGuidePane;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Constructor for Home Page controller class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questions observable list of questions"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public Dashboard(ObservableList\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.populateDashboard(questions);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        questions.addListener((ListChangeListener\u003cQuestion\u003e) c -\u003e populateDashboard(new ArrayList\u003c\u003e(c.getList())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to populate the homepage with a new list of questions"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questions questions to populate the homepage with"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void populateDashboard(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int done \u003d computeNumDone(questions);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int total \u003d computeNumTotal(questions);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateNumDone(done);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateNumTotal(total);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        double progress \u003d computeProgress(done, total);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateIndicator(progress);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String current \u003d computeCurrentTier(progress);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateCurrentTier(current);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (\"Duke\".equals(current)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            removeProgressDescription();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            String next \u003d computeNextTier(progress);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            updateNextTier(next);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            int toNextTier \u003d computeNumToNextTier(progress, current, total);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            updateNumToNextTier(toNextTier);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateAttempting(questions);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateBookmarked(questions);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Computes the number of questions successfully completed by the user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questions observable list of questions"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return number of questions successfully completed by the user"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int computeNumDone(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int numDone \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        for (Question q : questions) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (q.getStatus() \u003d\u003d Status.PASSED) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                numDone++;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return numDone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Computes the total number of questions in the question bank."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questions observable list of questions"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return total number of questions in the question bank"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int computeNumTotal(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return questions.size();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Computes the progress made by the user, in decimal form, by dividing number of questions successfully"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * completed by the user over total number of questions in the question bank."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param numDone number of questions successfully completed by the user"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param numTotal total number of questions in the question bank"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return the progress made by the user, in decimal form"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private double computeProgress(int numDone, int numTotal) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return (double) numDone / numTotal;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Computes the current skill tier of the user."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param progress the progress made by the user, in decimal form"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return current skill tier of the user"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private String computeCurrentTier(double progress) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        double progressInPercent \u003d progress * 100;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int roundedProgress \u003d (int) Math.round(progressInPercent);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int currentTierIndex \u003d -1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Trivial case - Progress within the first skill tier value range, so current tier is the lowest tier"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (roundedProgress \u003c\u003d skillTierCeilings[0]) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            currentTierIndex \u003d 0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Trivial case - Progress is 100%, so current tier is the highest tier"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (roundedProgress \u003d\u003d 100) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            currentTierIndex \u003d skillTierCeilings.length - 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Else, when it comes to non-trivial cases"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        for (int i \u003d 0; i \u003c skillTierCeilings.length; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (roundedProgress \u003c\u003d skillTierCeilings[i]) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                currentTierIndex \u003d i;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String currentTier \u003d skillTiers[currentTierIndex];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return currentTier;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Computes the next skill tier of the user. This method will only be called if current tier is not already"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * the highest tier."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param progress the progress made by the user, in decimal form"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return next skill tier of the user"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private String computeNextTier(double progress) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        double progressInPercent \u003d progress * 100;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int roundedProgress \u003d (int) Math.round(progressInPercent);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int nextTierIndex \u003d -1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Trivial case - Progress within the first skill tier value range, so current tier is the lowest tier"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Its next tier will be the second lowest tier"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (roundedProgress \u003c\u003d skillTierCeilings[0]) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            nextTierIndex \u003d 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        // Else when it comes to non-trivial cases,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        for (int i \u003d 0; i \u003c skillTierCeilings.length; i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (roundedProgress \u003c\u003d skillTierCeilings[i]) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                nextTierIndex \u003d i + 1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String nextTier \u003d skillTiers[nextTierIndex];"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return nextTier;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Computes the number of completed questions required in order to reach the next tier."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param progress the progress made by the user, in decimal form"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param currentTier current skill tier of the user"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param numTotal total number of questions in the question bank"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @return the number of completed questions required in order to reach the next tier"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private int computeNumToNextTier(double progress, String currentTier, int numTotal) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        List\u003cString\u003e skillTiersList \u003d Arrays.asList(skillTiers);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int currentTierIndex \u003d skillTiersList.indexOf(currentTier);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int ceilingOfCurrentTier \u003d skillTierCeilings[currentTierIndex];"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int floorOfNextTier \u003d ceilingOfCurrentTier + 1;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        double progressInPercent \u003d progress * 100;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int roundedProgress \u003d (int) Math.round(progressInPercent);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int gapInPercent \u003d floorOfNextTier - roundedProgress;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        double gapInDouble \u003d (double) gapInPercent / 100 * numTotal;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        int numToNextTier \u003d (int) Math.round(gapInDouble);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return numToNextTier;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the progress indicator on Home Page UI"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param progress the progress made by the user, in decimal form"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateIndicator(double progress) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        indicator.setProgress(progress);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the number of questions successfully completed by the user, on the Home Page UI"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param inputNumDone number of questions successfully completed by the user"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateNumDone(int inputNumDone) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String numDoneString \u003d inputNumDone + \"\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        numDone.setText(numDoneString);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates total number of questions in the question bank, on the Home Page UI"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param inputNumTotal total number of questions in the question bank"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateNumTotal(int inputNumTotal) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String numTotalString \u003d inputNumTotal + \"\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        numTotal.setText(numTotalString);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the current skill tier of the user on the Home Page UI"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param tier current skill tier of the user"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateCurrentTier(String tier) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        currentTier.setText(tier);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the next skill tier of the user on the Home Page UI"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param tier next skill tier of the user"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateNextTier(String tier) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        nextTier.setText(tier);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the number of completed questions required in order to reach the next tier"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param num number of completed questions required in order to reach the next tier"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateNumToNextTier(int num) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String numToNextTierString \u003d num + \"\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        numToNextTier.setText(numToNextTierString);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the list of questions the user is still attempting, on the Home Page UI"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questions observable list of questions"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void updateAttempting(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        ListView\u003cLabel\u003e attemptingListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size(); i++) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (questions.get(i).getStatus() \u003d\u003d Status.ATTEMPTED) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                int displayedIndex \u003d questions.get(i).getId();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                String displayedIndexString \u003d displayedIndex + \". \";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                Label questionDisplay \u003d new Label(displayedIndexString + questions.get(i).getTitle());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                attemptingListView.getItems().add(questionDisplay);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        attemptingListView.setPrefWidth(300);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        VBox.setVgrow(attemptingListView, Priority.ALWAYS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        attempting.getChildren().clear();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        attempting.getChildren().add(attemptingListView);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the list of questions the user bookmarked for personal reference, on the Home Page UI"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param questions observable list of questions"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void updateBookmarked(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        ListView\u003cLabel\u003e bookmarkedListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size(); i++) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (questions.get(i).isBookmarked()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                int displayedIndex \u003d questions.get(i).getId();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                String displayedIndexString \u003d displayedIndex + \". \";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                Label questionDisplay \u003d new Label(displayedIndexString + questions.get(i).getTitle());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                bookmarkedListView.getItems().add(questionDisplay);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        bookmarkedListView.setPrefWidth(300);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        VBox.setVgrow(bookmarkedListView, Priority.ALWAYS);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        bookmarked.getChildren().clear();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        bookmarked.getChildren().add(bookmarkedListView);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Removes the progress description on the Home Page UI"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void removeProgressDescription() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        numToNextTier.setText(\"\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        progressDescription.setText(\"\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        nextTier.setText(\"\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 310,
      "zhangj1an": 1,
      "limhawjia": 22
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/Editor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.control.ScrollBar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Creates a Text Editor window for the user to input code."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Editor extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final String FXML \u003d \"Editor.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private SimpleIntegerProperty numberOfLines \u003d new SimpleIntegerProperty(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private TextArea lineCounter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private TextArea textOutput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Editor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionObservable the question observable"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Editor(Observable\u003cQuestion\u003e questionObservable) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        textOutput.setPadding(new Insets(15, 20, 15, 20));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionObservable.addListener(question -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (question !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                UserProgram savedProgram \u003d question.getUserProgram();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.textOutput.setText(savedProgram.getSourceCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Initializes the initial configurations for the Editor Window upon startup."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        textOutput.addEventHandler(KeyEvent.KEY_PRESSED, e1 -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            int currentCaretPosition \u003d textOutput.getCaretPosition();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (e1.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                textOutput.insertText(currentCaretPosition, \" \".repeat(2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                e1.consume();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else if (e1.isShiftDown()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u0026\u0026 e1.getCode() \u003d\u003d KeyCode.CLOSE_BRACKET"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u0026\u0026 isEmptyLine(textOutput.getText(), textOutput.getCaretPosition())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                int previousNewlineCharPosition \u003d getClosestNewlineCharPosition(currentCaretPosition);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                int diff \u003d currentCaretPosition - previousNewlineCharPosition;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (diff \u003c 4) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    textOutput.deleteText(previousNewlineCharPosition + 1, currentCaretPosition - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    textOutput.deleteText(currentCaretPosition - 2, currentCaretPosition - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        textOutput.addEventHandler(KeyEvent.KEY_RELEASED, event -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                int indentationCount \u003d countUnclosedBraces(textOutput.getText(), textOutput.getCaretPosition());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                String tab \u003d \" \".repeat(2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                textOutput.insertText(textOutput.getCaretPosition(), tab.repeat((int) indentationCount));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        textOutput.textProperty().addListener(new InvalidationListener() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            public void invalidated(javafx.beans.Observable observable) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                numberOfLines.setValue((textOutput.getText() + \" \").split(\"\\n\").length);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                lineCounter.setText(generateLineCounterInput(numberOfLines));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            ScrollBar editorsb \u003d (ScrollBar) textOutput.lookup(\".scroll-bar:vertical\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            ScrollBar lineCountersb \u003d (ScrollBar) lineCounter.lookup(\".scroll-bar:vertical\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            lineCountersb.valueProperty().bind(editorsb.valueProperty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Checks if the line the caret is currently on is empty."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param string The String retrieved from textOutput."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param caret the position of the caret in the string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return the boolean true if the line is empty, false otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private boolean isEmptyLine(String string, int caret) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        char[] chars \u003d string.toCharArray();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        for (int i \u003d caret - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (chars[i] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (!Character.isWhitespace(chars[i])) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Counts the number of unclosed braces in the editor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param string the String retrieved from the textOutput."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param caret the position of the caret in the textOutput."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return an non-negative integer."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private int countUnclosedBraces(String string, int caret) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        char[] chars \u003d string.toCharArray();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        for (int i \u003d caret - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (chars[i] \u003d\u003d \u0027{\u0027) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else if (chars[i] \u003d\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                count--;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return count \u003c 0 ? 0 : count;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Retrives the position of the nearest newline character in the textOutput."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param caret the position of the caret in the textOutput"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return a non-negative integer."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private int getClosestNewlineCharPosition(int caret) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        char[] s \u003d textOutput.getText().toCharArray();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        for (int i \u003d caret - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (s[i] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the current text in the editor."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return current text in editor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UserProgram getUserProgram() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new UserProgram(\"Main\", textOutput.getText().strip());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Generates the line counter String to be displayed in the lineCounter beside the Editor."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param n the observable number of lines in the editor"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return a string"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String generateLineCounterInput(SimpleIntegerProperty n) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d n.getValue(); i++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                sb.append(i);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                sb.append(\"\\n\" + i);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 6,
      "ning-sy210": 157,
      "limhawjia": 23
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/HelpPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Controller class for Help Page. Help Page acts as a summarised User Guide within the application itself"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * as it lists out and describes all the commands available in Duke Academy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class HelpPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private static final String FXML \u003d \"HelpPage.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public HelpPage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 16
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandLogic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.tab.TabCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final CommandLogic commandLogic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private AnchorPane dashboardPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private AnchorPane questionsPagePlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private AnchorPane workspacePlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private AnchorPane notesPagePlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private AnchorPane helpPagePlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Main window."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param primaryStage           the primary stage"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param commandLogic           the command logic"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public MainWindow(Stage primaryStage, CommandLogic commandLogic, QuestionsLogic questionsLogic,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                      ProgramSubmissionLogic programSubmissionLogic, NotesLogic notesLogic,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                      ApplicationState applicationState) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandLogic \u003d commandLogic;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        applicationState.getCurrentActivityObservable().addListener(this::selectTabFromActivity);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tabPane.getSelectionModel().selectedIndexProperty().addListener(new TabChangeListener());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        setWindowDefaultSize();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Gets primary stage."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the primary stage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this::executeCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        Dashboard dashboard \u003d new Dashboard(questionsLogic.getAllQuestionsList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        dashboardPlaceholder.getChildren().add(dashboard.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsPage questionsPage \u003d new QuestionsPage(questionsLogic.getFilteredQuestionsList(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                questionsLogic.getSelectedQuestion());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsPagePlaceholder.getChildren().add(questionsPage.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Workspace workspace \u003d new Workspace(programSubmissionLogic.getCurrentQuestionObservable(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                programSubmissionLogic.getTestResultObservable());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        workspacePlaceholder.getChildren().add(workspace.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        NotesPage notesPage \u003d new NotesPage(notesLogic);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesPagePlaceholder.getChildren().add(notesPage.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        HelpPage helpPage \u003d new HelpPage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        helpPagePlaceholder.getChildren().add(helpPage.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programSubmissionLogic.setUserProgramSubmissionChannel(workspace.getUserProgramChannel());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void setWindowDefaultSize() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Show."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void executeCommand(String commandText) throws CommandException, InvalidCommandKeywordException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            CommandResult commandResult \u003d commandLogic.executeCommand(commandText);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CommandException | InvalidCommandArgumentsException | InvalidCommandKeywordException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to select the correct tab based on the user\u0027s current activity."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param activity the user\u0027s current activity"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void selectTabFromActivity(Activity activity) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (activity \u003d\u003d Activity.DASHBOARD) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.tabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (activity \u003d\u003d Activity.QUESTION) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.tabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (activity \u003d\u003d Activity.WORKSPACE) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.tabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (activity \u003d\u003d Activity.NOTE) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            this.tabPane.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (activity \u003d\u003d Activity.HELP) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.tabPane.getSelectionModel().select(4);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Custom listener class to listen out to user\u0027s tab changes using mouse click."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private class TabChangeListener implements ChangeListener\u003cNumber\u003e {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (newValue.intValue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                resultDisplay.setFeedbackToUser(TabCommand.FEEDBACK + Activity.DASHBOARD.toString());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (newValue.intValue() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                resultDisplay.setFeedbackToUser(TabCommand.FEEDBACK + Activity.QUESTION.toString());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (newValue.intValue() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                resultDisplay.setFeedbackToUser(TabCommand.FEEDBACK + Activity.WORKSPACE.toString());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (newValue.intValue() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                resultDisplay.setFeedbackToUser(TabCommand.FEEDBACK + Activity.NOTE.toString());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (newValue.intValue() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                resultDisplay.setFeedbackToUser(TabCommand.FEEDBACK + Activity.HELP.toString());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 18,
      "zhangj1an": 21,
      "ning-sy210": 4,
      "limhawjia": 115,
      "-": 74
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/NoteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Controller class for a card Ui component used to display preview information of a user\u0027s Note in the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NoteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String FXML \u003d \"NoteCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String emptyContentPlaceholder \u003d \"Nothing to preview\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Label noteId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Label noteTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Label noteContent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NoteCard(Note note, int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        noteId.setText(String.valueOf(index));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        noteTitle.setText(note.getTitle().toUpperCase());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Insert placeholder text if the content is empty"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (\"\".equals(note.getContent())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            noteContent.setText(emptyContentPlaceholder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            noteContent.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Preview the first line of the note\u0027s contents"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String contentsPreview \u003d note.getContent().split(\"\\n\")[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        noteContent.setText(contentsPreview);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        noteContent.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 43
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/NoteListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Controller class for a ui component representing a list view of the user\u0027s Notes in the application. The component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * will reflect the Notes found in the containing ObservableList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NoteListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String FXML \u003d \"NoteListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ListView\u003cNote\u003e notesListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NoteListPanel(ObservableList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesListView.setItems(notesList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesListView.setCellFactory(listView -\u003e new NoteListCellView());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Private class to represent a cell in the list view."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static class NoteListCellView extends ListCell\u003cNote\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        protected void updateItem(Note note, boolean empty) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (empty || note \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            setGraphic(new NoteCard(note, this.getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 45
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/NotesCanvas.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.ImageCursor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.canvas.Canvas;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.canvas.GraphicsContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Controller class for a drawing canvas ui component. It contains functionality to switch between a pencil and an"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * eraser for sketching purposes. It also has a clear button to empty the drawing canvas. It also exposes methods"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to extract the sketch as a JavaFx WritableImage instance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NotesCanvas extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String FXML \u003d \"NotesCanvas.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final double pencilWidth \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final double eraserWidth \u003d 20;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Pane canvasContainer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Canvas canvas;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Button pencilButton;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Button eraserButton;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Button clearButton;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final GraphicsContext graphicsContext;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NotesCanvas() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        graphicsContext \u003d canvas.getGraphicsContext2D();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.initCanvasDimensions();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.initDraw(graphicsContext);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.initToolbar();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Clears the current drawing canvas of any sketches."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void clearCanvas() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        graphicsContext.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Extracts the user\u0027s sketch in the drawing as a JavaFX WritableImage instance."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return JavaFX WritableImage instance corresponding to the sketch in the drawing canvas"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public WritableImage getImage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int imageWidth \u003d (int) canvas.getWidth();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int imageHeight \u003d (int) canvas.getHeight();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        WritableImage image \u003d new WritableImage(imageWidth, imageHeight);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        canvas.snapshot(null, image);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Draws the given JavaFX WritableImage instance into the drawing canvas."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param image the JavaFX WritableImage to be drawn"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void drawImage(WritableImage image) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        graphicsContext.drawImage(image, 0, 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to initialize the canvas. The canvas will be initialized to have a white background and to use a"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * black pencil."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param graphicsContext the graphics context of the JavaFX Canvas instance"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void initDraw(GraphicsContext graphicsContext) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        graphicsContext.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        graphicsContext.fill();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        graphicsContext.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        graphicsContext.setLineWidth(pencilWidth);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        canvas.addEventHandler(MouseEvent.MOUSE_CLICKED, new MouseClickHandler());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED, new MouseDragHandler());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        canvas.addEventHandler(MouseEvent.MOUSE_RELEASED, new MouseReleaseHandler());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to clip the canvas to the correct size."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void initCanvasDimensions() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Rectangle clipRect \u003d new Rectangle(canvasContainer.getWidth(), canvasContainer.getHeight());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        clipRect.heightProperty().bind(canvasContainer.heightProperty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        clipRect.widthProperty().bind(canvasContainer.widthProperty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        canvasContainer.setClip(clipRect);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to initialize the toolbar buttons."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void initToolbar() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // The pencil option will set the canvas to draw a black line"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        pencilButton.addEventHandler(MouseEvent.MOUSE_CLICKED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.setLineWidth(pencilWidth);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            canvas.setCursor(Cursor.DEFAULT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // The eraser option will set the cursor to a circle and the canvas to erase over mouse drag"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        eraserButton.addEventHandler(MouseEvent.MOUSE_CLICKED, event -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.setStroke(Color.WHITE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.setLineWidth(eraserWidth);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Circle circle \u003d new Circle(eraserWidth / 2, null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            circle.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            SnapshotParameters sp \u003d new SnapshotParameters();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            sp.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Image image \u003d circle.snapshot(sp, null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            canvas.setCursor(new ImageCursor(image));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // The clear button will clear the canvas of any sketches"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        clearButton.addEventHandler(MouseEvent.MOUSE_CLICKED, event -\u003e clearCanvas());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Private mouse click handler for the drawing canvas."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private class MouseClickHandler implements EventHandler\u003cMouseEvent\u003e {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.moveTo(event.getX(), event.getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.beginPath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.stroke();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Private mouse drag handler for the drawing canvas."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private class MouseDragHandler implements EventHandler\u003cMouseEvent\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.lineTo(event.getX(), event.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.stroke();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Private mouse release handler for the drawing canvas."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private class MouseReleaseHandler implements EventHandler\u003cMouseEvent\u003e {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.lineTo(event.getX(), event.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.stroke();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            graphicsContext.closePath();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 179
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/NotesPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.data.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Controller class for a Ui component representing an entire page dedicated to the display and editing of the user\u0027s"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Notes. It consists of a ListView of all the user\u0027s notes, a drawing canvas for the user to make sketches and a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * TextArea for the user to enter text notes. The NotesPage\u0027s behavior and information depends on the containing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * NotesLogic instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class NotesPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String FXML \u003d \"NotesPage.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StackPane notesListPanelPlaceholder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private AnchorPane canvasPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TextArea noteTextContent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TextField currentNoteTitle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private NotesCanvas notesCanvas;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Note selectedNote;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor, the NotesPage will display all the notes represented in the given NotesLogic. The currently-opened"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Note in the NotesPage will also reflect the currently-selected Note in the given NotesLogic."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param notesLogic the NotesLogic instance"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public NotesPage(NotesLogic notesLogic) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Sets this NotesPage as the NoteSubmissionChannel for the given NotesLogic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesLogic.setNoteSubmissionChannel(this::getCurrentNoteAndSketch);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Initiates the drawing canvas"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesCanvas \u003d new NotesCanvas();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        canvasPlaceholder.getChildren().add(notesCanvas.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Instantiates the notes list view to reflect the NotesLogic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        NoteListPanel noteListPanel \u003d new NoteListPanel(notesLogic.getAllNotesList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        noteListPanel.getRoot().addEventFilter(MouseEvent.MOUSE_PRESSED, Event::consume);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesListPanelPlaceholder.getChildren().add(noteListPanel.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Listens to the currently-selected Note of the NotesLogic to open"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        notesLogic.getSelectedNote().addListener(this::loadNoteAndSketch);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to get and consolidate the current Note-Sketch pair from the User\u0027s inputs in the drawing canvas"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * and TextArea."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the Note-Sketch pair"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Pair\u003cNote, WritableImage\u003e getCurrentNoteAndSketch() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (selectedNote \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Note currentNote \u003d selectedNote.withNewNoteContents(noteTextContent.getText().strip());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        selectedNote \u003d currentNote;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Pair\u003c\u003e(currentNote, notesCanvas.getImage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to load the given Note-Sketch pair into the corresponding Ui components."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param noteAndSketchPair the Note-Sketch pair to be loaded"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void loadNoteAndSketch(Pair\u003cNote, WritableImage\u003e noteAndSketchPair) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // If the given pair is null, empty the ui components and set them to uneditable"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (noteAndSketchPair \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            clearCurrentNote();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            toggleEditable(false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Note note \u003d noteAndSketchPair.getHead();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        WritableImage sketch \u003d noteAndSketchPair.getTail();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load the text contents of the note"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        selectedNote \u003d note;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        currentNoteTitle.setText(note.getTitle());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        noteTextContent.setText(note.getContent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load the sketch"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (sketch !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            notesCanvas.clearCanvas();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            notesCanvas.drawImage(sketch);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            notesCanvas.clearCanvas();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Set the ui components to be editable"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        toggleEditable(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to toggle the drawing canvas and note text content\u0027s TextArea to editable/uneditable."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param isEditable editable boolean flag"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void toggleEditable(boolean isEditable) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!isEditable) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            noteTextContent.setMouseTransparent(true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            noteTextContent.setFocusTraversable(false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            canvasPlaceholder.setMouseTransparent(true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            canvasPlaceholder.setFocusTraversable(false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            noteTextContent.setMouseTransparent(false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            noteTextContent.setFocusTraversable(true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            canvasPlaceholder.setMouseTransparent(false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            canvasPlaceholder.setFocusTraversable(true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to clear the ui components of the previous Note\u0027s data."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void clearCurrentNote() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.selectedNote \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.currentNoteTitle.setText(null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.noteTextContent.setText(null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesCanvas.clearCanvas();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 143
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/ProblemStatementPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * The type Problem statement panel."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class ProblemStatementPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String FXML \u003d \"ProblemStatement.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private TextArea problemStatementDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Problem Statement Display."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public ProblemStatementPanel() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new problem statement panel."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param problemStatement the problem statement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public ProblemStatementPanel(Observable\u003cString\u003e problemStatement) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        problemStatement.addListener(description -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            problemStatementDisplay.setText(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        problemStatementDisplay.setWrapText(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Displays problem statement for a particular question."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param problemStatement the feedback to user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public void setProblemStatement(String problemStatement) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        requireNonNull(problemStatement);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        problemStatementDisplay.setText(problemStatement);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 50
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/ProgramEvaluationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.program.TestCaseResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Controller class for Program Evaluation Card. Each card represents a specific test case and shows how"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * well the user\u0027s program performed against it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class ProgramEvaluationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private static final String FXML \u003d \"ProgramEvaluationCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public final TestCaseResult testCaseResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Label testCaseId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Label testCaseStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Label feedback;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Label input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Label expectedOutput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private Label actualOutput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public ProgramEvaluationCard(TestCaseResult testCaseResult, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        this.testCaseResult \u003d testCaseResult;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateTestCaseId(displayedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateTestCaseStatus(testCaseResult);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateFeedback(testCaseResult);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateInput(testCaseResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateExpectedOutput(testCaseResult);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        updateActualOutput(testCaseResult);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateTestCaseId(int id) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        testCaseId.setText(id + \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the test case status, either PASS or FAIL on the program evaluation card, based on the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * isSuccessful boolean attribute stored in a test case result object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param testCaseResult test case result object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateTestCaseStatus(TestCaseResult testCaseResult) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        boolean isPass \u003d testCaseResult.isSuccessful();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (isPass) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            testCaseStatus.setText(\"(PASS)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            testCaseStatus.setText(\"(FAIL)\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Updates the feedback given to the user for a specfic test case, based on the isSuccessful boolean"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * attribute stored in a test case result object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param testCaseResult test case result object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateFeedback(TestCaseResult testCaseResult) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        boolean isPass \u003d testCaseResult.isSuccessful();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        if (isPass) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            feedback.setText(\"Correct Output\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            feedback.setText(\"Incorrect Output\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateInput(TestCaseResult testCaseResult) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String inputString \u003d testCaseResult.getInput();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        input.setText(inputString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateExpectedOutput(TestCaseResult testCaseResult) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String expectedOutputString \u003d testCaseResult.getExpectedOutput();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        expectedOutput.setText(expectedOutputString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private void updateActualOutput(TestCaseResult testCaseResult) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String actualOutputString \u003d testCaseResult.getActualOutput().get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        actualOutput.setText(actualOutputString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 95
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/ProgramEvaluationPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.program.TestCaseResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.model.program.TestResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * Controller class for Program Evaluation Panel. This panel shows the user how well his program performed against"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " * a pre-defined list of test cases."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "public class ProgramEvaluationPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private static final String FXML \u003d \"ProgramEvaluationPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private ListView\u003cTestCaseResult\u003e evaluationListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TextArea compileError;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Instantiates a new Program Evaluation Panel."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    public ProgramEvaluationPanel(Observable\u003cTestResult\u003e testResultObservable) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        testResultObservable.addListener(result -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (result !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                // if there is a compile error, we display the compile error message to the user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                if (result.getCompileError().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    evaluationListView.getItems().clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    String compileErrorMessage \u003d result.getCompileError().get().getErrorMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    compileError.setText(compileErrorMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    // otherwise, we will display how well the user\u0027s program performed against pre-defined test cases"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    compileError.setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    List\u003cTestCaseResult\u003e testCaseResults \u003d result.getResults();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    ObservableList\u003cTestCaseResult\u003e observableTestCaseResults \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            FXCollections.observableArrayList(testCaseResults);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    evaluationListView.setItems(observableTestCaseResults);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    evaluationListView.setCellFactory(cell -\u003e new EvaluationListViewCell());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * Custom {@code EvaluationListViewCell} that displays the graphics of a {@code TestCaseResult} using a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     * {@code ProgramEvaluationCard}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static class EvaluationListViewCell extends ListCell\u003cTestCaseResult\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        protected void updateItem(TestCaseResult testCaseResult, boolean empty) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            super.updateItem(testCaseResult, empty);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            if (empty || testCaseResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            } else if (testCaseResult.getRuntimeError().isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                String runtimeErrorMessage \u003d testCaseResult.getRuntimeError().get().getErrorMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                setGraphic(new Label(runtimeErrorMessage));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                setGraphic(new ProgramEvaluationCard(testCaseResult, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Clears the ProgramEvaluationPanel display of any old results."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void clearResults() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        evaluationListView.setItems(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        compileError.setText(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 77,
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/QuestionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * An UI component that displays information of a {@code Question}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class QuestionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final String FXML \u003d \"QuestionCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on QuestionBank level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private AnchorPane cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Label topic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Question card."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param question       the question"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionCard(Question question) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        id.setText(question.getId() + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        title.setText(question.getTitle());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        difficulty.setText(question.getDifficulty().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        status.setText(question.getStatus().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        question.getTopics().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .sorted(Comparator.comparing(Enum::toString))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                .forEach(topic-\u003e tags.getChildren().add(new Tag(topic.toString()).getRoot()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (!(other instanceof QuestionCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        QuestionCard card \u003d (QuestionCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                \u0026\u0026 question.equals(card.question);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 15,
      "ning-sy210": 10,
      "limhawjia": 7,
      "-": 45
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/QuestionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class QuestionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String FXML \u003d \"QuestionListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuestionListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private ListView\u003cQuestion\u003e questionListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Question list panel."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionList the question list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public QuestionListPanel(ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        questionListView.setItems(questionList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionListView.setCellFactory(listView -\u003e new QuestionListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Question} using a {@code QuestionCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static class QuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                setGraphic(new QuestionCard(question).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 16,
      "limhawjia": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/QuestionsPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Controller for questions page. The questions page is where the user is able to browse all available questions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * and open individual questions for viewing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class QuestionsPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String FXML \u003d \"QuestionsPage.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StackPane questionListPanelPlaceholder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StackPane problemStatementDisplayPlaceholder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProblemStatementPanel problemStatementPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public QuestionsPage(ObservableList\u003cQuestion\u003e questions, Observable\u003cQuestion\u003e selectedQuestion) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionListPanel questionListPanel \u003d new QuestionListPanel(questions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionListPanel.getRoot().addEventFilter(MouseEvent.MOUSE_PRESSED, Event::consume);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionListPanelPlaceholder.getChildren().add(questionListPanel.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        problemStatementPanel \u003d new ProblemStatementPanel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        problemStatementDisplayPlaceholder.getChildren().add(problemStatementPanel.getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        selectedQuestion.addListener(question -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (question !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                problemStatementPanel.setProblemStatement(question.getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 44
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private TextField resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Result display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Sets feedback to user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param feedbackToUser the feedback to user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 9,
      "ning-sy210": 2,
      "limhawjia": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * A ui for the tags displayed in QuestionCards."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Tag extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final String FXML \u003d \"Tag.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Tag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param s the s"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Tag(String s) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        label.setText(s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "ning-sy210": 20
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param primaryStage the primary stage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * The constant ALERT_DIALOG_PANE_FIELD_ID."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/dukeacademy-icon.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final CommandLogic commandLogic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final QuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ProgramSubmissionLogic programSubmissionLogic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final NotesLogic notesLogic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final ApplicationState applicationState;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Instantiates a new Ui manager."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param commandLogic           the command logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionsLogic         the questions logic"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param programSubmissionLogic the program submission logic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UiManager(CommandLogic commandLogic, QuestionsLogic questionsLogic,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                     ProgramSubmissionLogic programSubmissionLogic, NotesLogic notesLogic,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                     ApplicationState applicationState) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandLogic \u003d commandLogic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d questionsLogic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogic \u003d programSubmissionLogic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d notesLogic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        primaryStage.getIcons().add(getImage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, commandLogic, questionsLogic,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    programSubmissionLogic, notesLogic, applicationState);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            showFatalErrorDialogAndShutdown(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private Image getImage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            UiManager.ICON_APPLICATION));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Show alert dialog and wait."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *  @param title       the title"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param headerText  the header text"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param contentText the content text"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private void showAlertDialogAndWait(String title, String headerText,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                                        String contentText) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), AlertType.ERROR, title, headerText, contentText);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(Throwable e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        logger.severe(\"Fatal error during initializing\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        showAlertDialogAndWait(\"Fatal error during initializing\", e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 30,
      "limhawjia": 27,
      "-": 66
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * @param \u003cT\u003e the type parameter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param fxmlFileUrl the fxml file url"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param fxmlFileName the fxml file name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @see #UiPart(URL) #UiPart(URL)#UiPart(URL)#UiPart(URL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param fxmlFileUrl the fxml file url"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param root        the root"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param fxmlFileName the fxml file name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param root         the root"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @see #UiPart(URL, T) #UiPart(URL, T)#UiPart(URL, T)#UiPart(URL, T)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @return the root"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 25,
      "limhawjia": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/com/dukeacademy/ui/Workspace.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.UserProgramChannel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Controller for the workspace page. The workspace page is where the user attempts questions and views his results."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Workspace extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String FXML \u003d \"Workspace.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StackPane problemStatementPanelPlaceholder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StackPane programEvaluationPanelPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private AnchorPane editorPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProblemStatementPanel problemStatementPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramEvaluationPanel programEvaluationPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Editor editor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Question currentlyAttemptingQuestion;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Workspace(Observable\u003cQuestion\u003e attemptingQuestion, Observable\u003cTestResult\u003e resultObservable) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        problemStatementPanel \u003d new ProblemStatementPanel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programEvaluationPanel \u003d new ProgramEvaluationPanel(resultObservable);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        attemptingQuestion.addListener(question -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (question !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.problemStatementPanel.setProblemStatement(question.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // If a new question is attempted, clear old results"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (question \u003d\u003d null || !question.equals(currentlyAttemptingQuestion)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programEvaluationPanel.clearResults();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            currentlyAttemptingQuestion \u003d question;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        problemStatementPanelPlaceholder.getChildren().add(problemStatementPanel.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programEvaluationPanelPlaceholder.getChildren().add(programEvaluationPanel.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        editor \u003d new Editor(attemptingQuestion);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        editorPlaceholder.getChildren().add(editor.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UserProgramChannel getUserProgramChannel() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return editor::getUserProgram;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 62
    }
  },
  {
    "path": "src/main/resources/NewProblems.txt",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question::"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Title::"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Apple"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Description::"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Test Apple"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Difficulty::"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "EASY"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Topics::"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "ARRAY, HASHTABLE"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "TestCase::"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Input::"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Output::"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "TestCase::"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Input::"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Output::"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Question::"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Title::"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Banana"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Description::"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Test Banana"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Difficulty::"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "MEDIUM"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Topics::"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "LINKED_LIST, HASHTABLE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "TestCase::"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Input::"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Output::"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "11"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "TestCase::"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Input::"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "2"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "Output::"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "22"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 39
    }
  },
  {
    "path": "src/main/resources/view/CodeResultPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Accordion?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cAccordion id\u003d\"codeResult\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"160.0\" prefWidth\u003d\"350.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   \u003cpanes\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "      \u003cTitledPane fx:id\u003d\"testCasePane1\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"300.0\" text\u003d\"Test Case 1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cAnchorPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"74.4\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"52.0\" prefWidth\u003d\"325.6\" spacing\u003d\"8.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Input:\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"input1\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some input\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Expected Output:\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"expectedOutput1\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some expected output\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Your Output:\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"actualOutput1\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some output\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "      \u003cTitledPane fx:id\u003d\"testCasePane2\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"300.0\" text\u003d\"Test Case 2\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cAnchorPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"74.4\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"68.8\" prefWidth\u003d\"325.6\" spacing\u003d\"8.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Input:\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"input2\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some input\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Expected Output:\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"expectedOutput2\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some expected output\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Your Output:\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"actualOutput2\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some output\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "      \u003cTitledPane fx:id\u003d\"testCasePane3\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"38.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"300.0\" text\u003d\"Test Case 3\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cAnchorPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"74.4\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"68.8\" prefWidth\u003d\"325.6\" spacing\u003d\"8.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Input:\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"input31\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some input\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Expected Output:\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"expectedOutput31\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some expected output\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Your Output:\"\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cText fx:id\u003d\"actualOutput31\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"some output\"\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   \u003c/panes\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c/Accordion\u003e"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 111,
      "ning-sy210": 69
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".profile-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".text-area, .text-area .viewport, .text-area .content {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ".profile-display .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "#filterField, #questionListPanel, #questionWebpage {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 15,
      "ning-sy210": 1,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/Dashboard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003cAnchorPane AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" style\u003d\"-fx-background-color: #7d2277;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cInsets left\u003d\"45.0\" right\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cVBox fx:id\u003d\"main_container\" spacing\u003d\"20.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cInsets bottom\u003d\"40.0\" left\u003d\"45.0\" right\u003d\"45.0\" top\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cLabel text\u003d\"Welcome to Duke Academy!\" textFill\u003d\"#63075d\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cSeparator\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cVBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cLabel prefWidth\u003d\"${main_container.width}\" text\u003d\"Here, you will embark on a journey to hone your programming and problem solving skills.\" textFill\u003d\"black\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cLabel prefWidth\u003d\"${main_container.width}\" text\u003d\"As your skills improve, you will rise through the ranks from Novice all the way up to Duke, the hallmark of an elite programmer.\" textFill\u003d\"black\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cLabel prefWidth\u003d\"${main_container.width}\" text\u003d\"Here\u0027s wishing you an exciting journey ahead!\" textFill\u003d\"black\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--            \u003cHBox spacing\u003d\"25.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003cButton fx:id\u003d\"userGuideButton\" alignment\u003d\"CENTER\" prefWidth\u003d\"195.0\" text\u003d\"User Guide\"--\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        textAlignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"--\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        onAction\u003d\"#handleUserGuideButtonClick\"\u003e--\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003c/Button\u003e--\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003cButton fx:id\u003d\"devGuideButton\" prefWidth\u003d\"195.0\" text\u003d\"Developer Guide\"--\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        textAlignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003c/Button\u003e--\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003cButton fx:id\u003d\"aboutUsButton\" prefWidth\u003d\"195.0\" text\u003d\"About us\"--\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        textAlignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003c/Button\u003e--\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003cButton fx:id\u003d\"contactUsButton\" prefWidth\u003d\"195.0\" text\u003d\"Contact us\"--\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        textAlignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003c/Button\u003e--\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                    \u003cInsets top\u003d\"10.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--                \u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c!--            \u003c/HBox\u003e--\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cSeparator\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cGridPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cVBox GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cLabel text\u003d\"Your progress:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cFont name\u003d\"Century Gothic\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cInsets bottom\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cVBox alignment\u003d\"CENTER\" spacing\u003d\"20.0\" style\u003d\"-fx-border-color: #63075d\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cProgressIndicator fx:id\u003d\"indicator\" minHeight\u003d\"150.0\" minWidth\u003d\"150.0\" progress\u003d\"0.22\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cTextFlow textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003cText fx:id\u003d\"numDone\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"22\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic Italic\" size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cText fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"  /  \"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic Italic\" size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003cText fx:id\u003d\"numTotal\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic Italic\" size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cText fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\" COMPLETED\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic Italic\" size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                \u003cInsets left\u003d\"15.0\" right\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cTextFlow textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003cText fx:id\u003d\"numToNextTier\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"8\"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003cText fx:id\u003d\"progressDescription\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\" more completed questions to reach \"\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cText fx:id\u003d\"nextTier\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Apprentice\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                \u003cInsets left\u003d\"15.0\" right\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cTextFlow textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cText fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Skill Tier: \"\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003cText fx:id\u003d\"currentTier\" fill\u003d\"#63075d\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Novice\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cVBox spacing\u003d\"10.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cText fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Currently attempting:\"\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            \u003cFont name\u003d\"Century Gothic\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cVBox fx:id\u003d\"attempting\" /\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cInsets left\u003d\"40.0\" right\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cVBox spacing\u003d\"10.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cText fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Bookmarked questions:\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003cFont name\u003d\"Century Gothic\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cVBox fx:id\u003d\"bookmarked\" /\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cInsets left\u003d\"40.0\" right\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cRowConstraints percentHeight\u003d\"100\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--        \u003cAnchorPane layoutX\u003d\"29.0\" layoutY\u003d\"6.0\" prefHeight\u003d\"188.0\" prefWidth\u003d\"652.0\" AnchorPane.leftAnchor\u003d\"0.0\"--\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                    AnchorPane.topAnchor\u003d\"0.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--            \u003cAnchorPane fx:id\u003d\"userGuidePane\" layoutX\u003d\"334.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"188.0\"--\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                        prefWidth\u003d\"278.0\"--\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                        style\u003d\"-fx-background-color: white; -fx-border-color: #63065d; -fx-border-width: 2;\"--\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                        visible\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                \u003cHBox layoutX\u003d\"2.0\" layoutY\u003d\"2.0\" prefHeight\u003d\"39.0\" prefWidth\u003d\"276.0\"--\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                      style\u003d\"-fx-background-color: lightgrey;\" AnchorPane.leftAnchor\u003d\"1.0\"--\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                      AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                    \u003cButton fx:id\u003d\"closeUserGuideButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"--\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                            onAction\u003d\"#handleCloseUserGuideButtonClick\" text\u003d\"Close\" translateX\u003d\"180.0\"--\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                            translateY\u003d\"2.5\"/\u003e--\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                \u003c/HBox\u003e--\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                \u003cTextArea editable\u003d\"false\" layoutX\u003d\"12.0\" layoutY\u003d\"113.0\" prefHeight\u003d\"52.0\"--\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                          prefWidth\u003d\"254.0\" style\u003d\"-fx-border-color: silver;\"--\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                          text\u003d\"https://github.com/AY1920S1-CS2103T-F14-1/main/blob/master/docs/UserGuide.adoc\"--\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                          wrapText\u003d\"true\"/\u003e--\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                \u003cText layoutX\u003d\"12.0\" layoutY\u003d\"72.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"--\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                      text\u003d\"Please copy the link below and paste it in your preferred web browser.\"--\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                      wrappingWidth\u003d\"254.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                        \u003cFont size\u003d\"14.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--                \u003c/Text\u003e--\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--            \u003c/AnchorPane\u003e--\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c!--        \u003c/AnchorPane\u003e--\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 73,
      "ning-sy210": 4,
      "limhawjia": 186
    }
  },
  {
    "path": "src/main/resources/view/DukeAcademyStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-text-fill: #d06651; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-background: #ffffff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".list-cell:odd {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-background-color: #d6d6d6;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".list-cell:even {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".list-cell:selected {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-background-color: #0894ff;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#evaluationListView {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-border-color: #7d2277;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#problemStatementDisplay {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-border-color: #7d2277;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#problemStatementDisplay .content {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#problemStatementDisplay:focused .content {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#problemStatementDisplay:focused {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#problemStatementDisplay .content {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#textOutput {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-border-color: #7d2277;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#textOutput .content {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#textOutput:focused .content {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#textOutput:focused {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#textOutput .content {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-padding: 0px;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "#lineCounter {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-border-color: #7d2277;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-background-insets: 0px;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "#lineCounter .content {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "#lineCounter:focused .content {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "#lineCounter:focused {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "#lineCounter .content {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "#lineCounter .scroll-pane {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-hbar-policy: never;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-vbar-policy: never;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#noteTextContent {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-border-color: #7d2277;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#noteTextContent .content {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#noteTextContent:focused .content {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#noteTextContent:focused {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#noteTextContent .content {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#currentNoteTitle {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-border-color: #7d2277;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#currentNoteTitle .content {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#currentNoteTitle:focused .content {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#currentNoteTitle:focused {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#currentNoteTitle .content {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#compileError {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-border-color: #7d2277;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#compileError .content {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#compileError:focused .content {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#compileError:focused {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#noteTextContent .content {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    -fx-highlight-fill: #7ecfff;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 52,
      "limhawjia": 124
    }
  },
  {
    "path": "src/main/resources/view/Editor.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"editorPane\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "   \u003cHBox prefHeight\u003d\"400.0\" prefWidth\u003d\"439.2\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003cTextArea fx:id\u003d\"lineCounter\" disable\u003d\"true\" editable\u003d\"false\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" opacity\u003d\"0.48\" prefHeight\u003d\"400.0\" prefWidth\u003d\"67.0\" style\u003d\"\" text\u003d\"1\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "               \u003cFont name\u003d\"Consolas Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "               \u003cInsets bottom\u003d\"12.0\" top\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003cTextArea fx:id\u003d\"textOutput\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"372.0\" promptText\u003d\"Enter Your Program Here...\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "               \u003cFont name\u003d\"Consolas Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003ccursor\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/cursor\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 25,
      "limhawjia": 6
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    -fx-text-fill: #d06651; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003cAnchorPane AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" prefWidth\u003d\"1337.0\" style\u003d\"-fx-background-color: #7d2277;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cInsets left\u003d\"45.0\" right\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        \u003cVBox fx:id\u003d\"main_container\" spacing\u003d\"45.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cInsets bottom\u003d\"40.0\" left\u003d\"45.0\" right\u003d\"45.0\" top\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cLabel text\u003d\"Having trouble with the commands? Don\u0027t worry, we are here to help.\" textFill\u003d\"#63075d\" translateX\u003d\"20.0\" translateY\u003d\"15.0\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"26.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cSeparator translateY\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cAnchorPane focusTraversable\u003d\"true\" prefHeight\u003d\"349.0\" prefWidth\u003d\"1157.0\" translateY\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cLabel layoutX\u003d\"22.0\" layoutY\u003d\"-10.0\" text\u003d\"Quick overview of Duke Academy commands:\" textFill\u003d\"#7d2277\" AnchorPane.leftAnchor\u003d\"22.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "               \u003cVBox layoutX\u003d\"22.0\" layoutY\u003d\"38.0\" spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"help\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Navigates to the Help tab (the current tab)\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"tab\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Toggles to the next tab\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"dashboard\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Navigates to the Dashboard tab\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"showall\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Navigates to the Questions tab and displays all available questions\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"bookmark [id]\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Bookmarks a specific question\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"deletebookmark [id]\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Removes the bookmark from a specific question\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"find [keyword]...\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Searches for a question by title\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"browse [keyword]...\"\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Searches for question by title, topic, description, status or difficulty\"\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cLabel text\u003d\"view [id]\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Displays the problem statement of a specific question\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"attempt [id]\"\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Navigates to the Questions tab where you can code your solution for a specific question\"\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cLabel text\u003d\"submit\"\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Submits your solution, which will be compiled and run against test cases\"\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"newnote\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Navigates to the Notes tab and creates a new note with the given title\"\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"savenote\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Navigates to the Notes tab and saves any changes made to the current note\"\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"opennote [id]\"\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Navigates to the Notes tab and opens the note corresponding to the given id\"\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"deletenote [id]\"\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Navigates to the Notes tab and deletes the note corresponding to the given id\"\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel text\u003d\"loadquestions [filename]\"\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\" - Imports new questions into DukeAcademy through a text file\"\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                 \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                     \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--            \u003cHBox spacing\u003d\"25.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003cButton fx:id\u003d\"userGuideButton\" alignment\u003d\"CENTER\" prefWidth\u003d\"195.0\" text\u003d\"User Guide\"--\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        textAlignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"--\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        onAction\u003d\"#handleUserGuideButtonClick\"\u003e--\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003c/Button\u003e--\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003cButton fx:id\u003d\"devGuideButton\" prefWidth\u003d\"195.0\" text\u003d\"Developer Guide\"--\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        textAlignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003c/Button\u003e--\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003cButton fx:id\u003d\"aboutUsButton\" prefWidth\u003d\"195.0\" text\u003d\"About us\"--\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        textAlignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003c/Button\u003e--\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003cButton fx:id\u003d\"contactUsButton\" prefWidth\u003d\"195.0\" text\u003d\"Contact us\"--\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        textAlignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"15.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003c/Button\u003e--\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                    \u003cInsets top\u003d\"10.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--                \u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c!--            \u003c/HBox\u003e--\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cSeparator prefHeight\u003d\"0.0\" prefWidth\u003d\"1157.0\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cVBox spacing\u003d\"10.0\" translateX\u003d\"20.0\" translateY\u003d\"25.0\"\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cLabel text\u003d\"For our detailed User Guide, please refer to\" textFill\u003d\"#7d2277\"\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cTextField editable\u003d\"false\" focusTraversable\u003d\"false\" prefHeight\u003d\"29.0\" prefWidth\u003d\"1157.0\" text\u003d\"https://github.com/AY1920S1-CS2103T-F14-1/main/blob/master/docs/UserGuide.adoc\"\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cGridPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cVBox spacing\u003d\"10.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cInsets left\u003d\"40.0\" right\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cVBox spacing\u003d\"10.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cInsets left\u003d\"40.0\" right\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cRowConstraints percentHeight\u003d\"100\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cVBox /\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--        \u003cAnchorPane layoutX\u003d\"29.0\" layoutY\u003d\"6.0\" prefHeight\u003d\"188.0\" prefWidth\u003d\"652.0\" AnchorPane.leftAnchor\u003d\"0.0\"--\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                    AnchorPane.topAnchor\u003d\"0.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--            \u003cAnchorPane fx:id\u003d\"userGuidePane\" layoutX\u003d\"334.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"188.0\"--\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                        prefWidth\u003d\"278.0\"--\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                        style\u003d\"-fx-background-color: white; -fx-border-color: #63065d; -fx-border-width: 2;\"--\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                        visible\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                \u003cHBox layoutX\u003d\"2.0\" layoutY\u003d\"2.0\" prefHeight\u003d\"39.0\" prefWidth\u003d\"276.0\"--\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                      style\u003d\"-fx-background-color: lightgrey;\" AnchorPane.leftAnchor\u003d\"1.0\"--\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                      AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                    \u003cButton fx:id\u003d\"closeUserGuideButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\"--\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                            onAction\u003d\"#handleCloseUserGuideButtonClick\" text\u003d\"Close\" translateX\u003d\"180.0\"--\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                            translateY\u003d\"2.5\"/\u003e--\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                \u003c/HBox\u003e--\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                \u003cTextArea editable\u003d\"false\" layoutX\u003d\"12.0\" layoutY\u003d\"113.0\" prefHeight\u003d\"52.0\"--\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                          prefWidth\u003d\"254.0\" style\u003d\"-fx-border-color: silver;\"--\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                          text\u003d\"https://github.com/AY1920S1-CS2103T-F14-1/main/blob/master/docs/UserGuide.adoc\"--\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                          wrapText\u003d\"true\"/\u003e--\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                \u003cText layoutX\u003d\"12.0\" layoutY\u003d\"72.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"--\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                      text\u003d\"Please copy the link below and paste it in your preferred web browser.\"--\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                      wrappingWidth\u003d\"254.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                    \u003cfont\u003e--\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                        \u003cFont size\u003d\"14.0\"/\u003e--\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                    \u003c/font\u003e--\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--                \u003c/Text\u003e--\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--            \u003c/AnchorPane\u003e--\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c!--        \u003c/AnchorPane\u003e--\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 289,
      "ning-sy210": 103
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cfx:root minHeight\u003d\"800.0\" minWidth\u003d\"1200.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"DukeAcademy\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        \u003cImage url\u003d\"@/images/dukeacademy-icon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DukeAcademyStyle.css\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c!-- Menu bar --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c!-- Command box and command results display --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cHBox spacing\u003d\"15.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"26.0\" prefWidth\u003d\"258.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"25.6\" prefWidth\u003d\"550.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            \u003cInsets bottom\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                \u003cTabPane fx:id\u003d\"tabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cTab text\u003d\"Dashboard\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cAnchorPane fx:id\u003d\"dashboardPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cTab text\u003d\"Questions\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cAnchorPane fx:id\u003d\"questionsPagePlaceholder\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cTab text\u003d\"Workspace\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cAnchorPane fx:id\u003d\"workspacePlaceholder\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cTab text\u003d\"Notes\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cAnchorPane fx:id\u003d\"notesPagePlaceholder\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003cTab text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cAnchorPane fx:id\u003d\"helpPagePlaceholder\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 8,
      "zhangj1an": 1,
      "ning-sy210": 15,
      "limhawjia": 19,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/NoteCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cLabel fx:id\u003d\"noteId\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cLabel text\u003d\".  \"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cLabel fx:id\u003d\"noteTitle\" prefHeight\u003d\"17.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cLabel text\u003d\"Preview: \"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cLabel fx:id\u003d\"noteContent\" maxWidth\u003d\"400.0\" maxHeight\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cInsets top\u003d\"20.0\" bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 49
    }
  },
  {
    "path": "src/main/resources/view/NoteListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cListView fx:id\u003d\"notesListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/NotesCanvas.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.canvas.Canvas?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/javafx\" style\u003d\"-fx-border-color: #7d2277\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "          AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cToolBar\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cButton fx:id\u003d\"pencilButton\" text\u003d\"Pencil\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cButton fx:id\u003d\"eraserButton\" text\u003d\"Eraser\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cButton fx:id\u003d\"clearButton\" text\u003d\"Clear\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cPane fx:id\u003d\"canvasContainer\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cCanvas fx:id\u003d\"canvas\" height\u003d\"2000\" width\u003d\"2000\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/Pane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 27
    }
  },
  {
    "path": "src/main/resources/view/NotesPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-background-color: #7d2277;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cInsets left\u003d\"45.0\" right\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003cGridPane style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cGridPane style\u003d\"-fx-border-color: #7d2277\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cVBox spacing\u003d\"15.0\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cLabel text\u003d\"Your notes:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cStackPane fx:id\u003d\"notesListPanelPlaceholder\" GridPane.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cInsets bottom\u003d\"15.0\" left\u003d\"35.0\" right\u003d\"35.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cVBox spacing\u003d\"15.0\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cLabel text\u003d\"Currently viewing:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cTextField fx:id\u003d\"currentNoteTitle\" editable\u003d\"false\" focusTraversable\u003d\"false\" mouseTransparent\u003d\"true\" promptText\u003d\"Open a note to start drawing and writing!\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/TextField\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cLabel text\u003d\"Notes:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cTextArea fx:id\u003d\"noteTextContent\" promptText\u003d\"Write your ideas here\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cFont name\u003d\"Consolas Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cInsets bottom\u003d\"15.0\" left\u003d\"35.0\" right\u003d\"35.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" percentWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cVBox spacing\u003d\"15.0\" style\u003d\"-fx-border-color: #7d2277\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cLabel text\u003d\"Doodle pad:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"canvasPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cInsets bottom\u003d\"15.0\" left\u003d\"35.0\" right\u003d\"35.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"40\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"60\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 8,
      "limhawjia": 100
    }
  },
  {
    "path": "src/main/resources/view/ProblemStatement.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cStackPane fx:id\u003d\"problemStatementPanel\" style\u003d\"-fx-background-color: transparent;\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "           AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cTextArea fx:id\u003d\"problemStatementDisplay\" editable\u003d\"false\" promptText\u003d\"No question selected!\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "              style\u003d\"-fx-background-color: transparent;\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 7,
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/resources/view/ProfilePage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cTabPane fx:id\u003d\"profilePane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #f6f6f6;\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        \u003ctabs\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "          \u003cTab text\u003d\"Your Progress\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "              \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cButton layoutX\u003d\"488.0\" layoutY\u003d\"14.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onCloseButtonClick\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cProgressIndicator fx:id\u003d\"indicator\" layoutX\u003d\"36.0\" layoutY\u003d\"39.0\" prefHeight\u003d\"75.0\" prefWidth\u003d\"52.0\" progress\u003d\"0.26\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cTextFlow layoutX\u003d\"185.0\" layoutY\u003d\"81.0\" prefHeight\u003d\"34.0\" prefWidth\u003d\"90.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cText fx:id\u003d\"numDone\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"22\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic Italic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"  /  \"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic Italic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cText fx:id\u003d\"numTotal\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"80\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic Italic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cTextFlow layoutX\u003d\"54.0\" layoutY\u003d\"204.0\" prefHeight\u003d\"36.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cText fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Skill Level:\" wrappingWidth\u003d\"106.66796875\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cTextFlow layoutX\u003d\"54.0\" layoutY\u003d\"233.0\" prefHeight\u003d\"36.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cText fx:id\u003d\"skillLevel\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Apprentice\" wrappingWidth\u003d\"106.66796875\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cScrollPane layoutX\u003d\"333.0\" layoutY\u003d\"133.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                          \u003ccontent\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"attempting\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                          \u003c/content\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cText fontSmoothingType\u003d\"LCD\" layoutX\u003d\"338.0\" layoutY\u003d\"121.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Currently attempting:\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cFont name\u003d\"Century Gothic\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/Text\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cTextFlow layoutX\u003d\"184.0\" layoutY\u003d\"111.0\" prefHeight\u003d\"34.0\" prefWidth\u003d\"90.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003cText fx:id\u003d\"numDone1\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Completed\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                    \u003cFont name\u003d\"Century Gothic Italic\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cTab text\u003d\"Bookmarked Questions\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"bookmarked\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                        \u003cButton layoutX\u003d\"488.0\" layoutY\u003d\"14.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onCloseButtonClick\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        \u003c/tabs\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 94,
      "limhawjia": 1
    }
  },
  {
    "path": "src/main/resources/view/ProfilePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003cStackPane fx:id\u003d\"profileDisplayPlaceholder\" style\u003d\"-fx-background-color: transparent;\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "   \u003cTextArea fx:id\u003d\"profileDisplay\" editable\u003d\"false\" promptText\u003d\"Test\" style\u003d\"-fx-background-color: transparent;\" styleClass\u003d\"result-display\" text\u003d\"Test\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8
    }
  },
  {
    "path": "src/main/resources/view/ProgramEvaluationCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003cAnchorPane minHeight\u003d\"-Infinity\" prefHeight\u003d\"220.0\" prefWidth\u003d\"329.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cTextFlow layoutX\u003d\"8.0\" layoutY\u003d\"4.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"200.0\" AnchorPane.leftAnchor\u003d\"8.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cLabel prefHeight\u003d\"17.0\" prefWidth\u003d\"73.0\" text\u003d\"Test Case\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cLabel fx:id\u003d\"testCaseId\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"22.0\" text\u003d\"id\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cLabel fx:id\u003d\"testCaseStatus\" layoutX\u003d\"88.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"89.0\" text\u003d\"(STATUS)\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cTextFlow layoutX\u003d\"8.0\" layoutY\u003d\"28.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"308.0\" AnchorPane.leftAnchor\u003d\"8.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cLabel fx:id\u003d\"feedback\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" text\u003d\"FEEDBACK\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                  \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cLabel layoutX\u003d\"8.0\" layoutY\u003d\"69.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" text\u003d\"Input\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cLabel layoutX\u003d\"8.0\" layoutY\u003d\"118.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" text\u003d\"Expected Output\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cLabel layoutX\u003d\"8.0\" layoutY\u003d\"168.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" text\u003d\"Your Output\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cLabel fx:id\u003d\"input\" layoutX\u003d\"8.0\" layoutY\u003d\"91.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" text\u003d\"Some input\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cLabel fx:id\u003d\"expectedOutput\" layoutX\u003d\"8.0\" layoutY\u003d\"142.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" text\u003d\"Some expected output\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003cLabel fx:id\u003d\"actualOutput\" layoutX\u003d\"8.0\" layoutY\u003d\"189.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" text\u003d\"Some user generated ouput\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 73
    }
  },
  {
    "path": "src/main/resources/view/ProgramEvaluationPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" spacing\u003d\"20.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cLabel text\u003d\"Compile errors:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cTextArea fx:id\u003d\"compileError\" maxHeight\u003d\"150.0\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "              wrapText\u003d\"true\" editable\u003d\"false\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "              style\u003d\"-fx-cursor: DEFAULT; -fx-fill: RED\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "              promptText\u003d\"There are no compile errors!\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cFont name\u003d\"Consolas Bold\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cLabel text\u003d\"Results:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cListView fx:id\u003d\"evaluationListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 11,
      "limhawjia": 24
    }
  },
  {
    "path": "src/main/resources/view/QuestionCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"cardPane\" prefHeight\u003d\"93.0\" prefWidth\u003d\"197.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003cVBox layoutX\u003d\"5.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"76.0\" prefWidth\u003d\"187.0\" spacing\u003d\"5.0\" AnchorPane.bottomAnchor\u003d\"7.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"7.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" text\u003d\"[1]\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" text\u003d\"Two Sum\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" hgap\u003d\"5.0\" prefHeight\u003d\"15.0\" prefWidth\u003d\"203.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cVBox prefWidth\u003d\"203.0\" spacing\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cHBox spacing\u003d\"3.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cLabel text\u003d\"Difficulty:\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cLabel fx:id\u003d\"difficulty\" text\u003d\"Test Difficulty\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cHBox spacing\u003d\"3.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cLabel text\u003d\"Status:\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cLabel fx:id\u003d\"status\" text\u003d\"Some Status\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 52,
      "limhawjia": 9
    }
  },
  {
    "path": "src/main/resources/view/QuestionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "  \u003cListView fx:id\u003d\"questionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/QuestionsPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-background-color: #7d2277;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cInsets left\u003d\"45.0\" right\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003cGridPane style\u003d\"-fx-background-color: white\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cVBox style\u003d\"-fx-border-color: #7d2277\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cStackPane fx:id\u003d\"questionListPanelPlaceholder\" GridPane.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cVBox style\u003d\"-fx-border-color: #7d2277\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cLabel text\u003d\"Now viewing:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cStackPane fx:id\u003d\"problemStatementDisplayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cInsets bottom\u003d\"35.0\" left\u003d\"35.0\" right\u003d\"35.0\" top\u003d\"35.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cRowConstraints percentHeight\u003d\"100\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 17,
      "limhawjia": 35
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "   \u003cTextField fx:id\u003d\"resultDisplay\" editable\u003d\"false\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"25.6\" prefWidth\u003d\"550.0\" promptText\u003d\"Welcome to Duke Academy!\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 3,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/Tag.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-border-radius: 20; -fx-background-color: #ffaa00; -fx-background-radius: 20;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "      \u003cLabel fx:id\u003d\"label\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.leftAnchor\u003d\"4.0\" AnchorPane.rightAnchor\u003d\"4.0\" AnchorPane.topAnchor\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 15
    }
  },
  {
    "path": "src/main/resources/view/Workspace.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"532.0\" prefWidth\u003d\"787.0\" style\u003d\"-fx-background-color: #7d2277;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cInsets left\u003d\"45.0\" right\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003cGridPane style\u003d\"-fx-background-color: white\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cGridPane style\u003d\"-fx-border-color: #7d2277\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cVBox spacing\u003d\"15.0\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cLabel text\u003d\"Currently attempting:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cStackPane fx:id\u003d\"problemStatementPanelPlaceholder\" GridPane.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cInsets bottom\u003d\"15.0\" left\u003d\"35.0\" right\u003d\"35.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cVBox spacing\u003d\"15.0\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cStackPane fx:id\u003d\"programEvaluationPanelPlaceholder\" GridPane.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \u003cInsets bottom\u003d\"30.0\" left\u003d\"35.0\" right\u003d\"35.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" percentWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cVBox spacing\u003d\"15.0\" style\u003d\"-fx-border-color: #7d2277\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cLabel text\u003d\"Your program:\" textFill\u003d\"#63075d\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u003cFont name\u003d\"Century Gothic\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"editorPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cInsets bottom\u003d\"30.0\" left\u003d\"35.0\" right\u003d\"35.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"40\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"60\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 18,
      "limhawjia": 56
    }
  },
  {
    "path": "src/test/data/TestPrograms/ProgramExecutor/Input.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "world!"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 2
    }
  },
  {
    "path": "src/test/data/TestPrograms/ProgramExecutor/NoInputTestResult.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Hello world!"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/ProgramExecutor/WithInputTestResult.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "world!"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 2
    }
  },
  {
    "path": "src/test/data/TestPrograms/adder/adder.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int a \u003d sc.nextInt();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int b \u003d sc.nextInt();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(a + b);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 10
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/duplicates.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Duplicates {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\tpublic static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\tScanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\tint numberOfElements \u003d sc.nextInt();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\tSystem.out.println(findRepeat(sc, numberOfElements));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\tstatic String findRepeat(Scanner sc, int n) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\tHashSet\u003cInteger\u003e hs \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\tTreeSet\u003cInteger\u003e output \u003d new TreeSet\u003cInteger\u003e(Comparator.reverseOrder());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c n; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t\tint next \u003d sc.nextInt();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t\tif (hs.contains(next)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t\t\toutput.add(next);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t\ths.add(next);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\tif (output.size() \u003e  0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t\treturn new LinkedList\u003c\u003e(output).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t\treturn \"ONCE AND FOR ALL\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 36
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/expected1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ONCE AND FOR ALL"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/expected2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[2, 1]"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/expected3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[27, 10, 2, 1]"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/expected4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "ONCE AND FOR ALL"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/expected5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "[299, 30, 27, 20, 13, 1]"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/test1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "0"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/test2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "5 1 1 1 2 2"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/test3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "10 1 2 27 32 127 2 27 10 1 10"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/test4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/duplicates/test5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "20 1 27 22 13 13 4 299 30 1 20 20 30 7 13 14 27 299 30 29 99"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/errors/indexoutofbounds.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ArrayList\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        list.get(100);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 8
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/expected1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/expected2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "8"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/expected3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "89"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/expected4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "377"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/expected5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "4181"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/fib.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Fib {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int n \u003d sc.nextInt();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(fib(n));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static int fib(int n) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int[] firstTwo \u003d new int[]{ 0, 1 };"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (n \u003e 1) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            for (int i \u003d 2; i \u003c\u003d n; i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                firstTwo[i % 2] \u003d firstTwo[0] + firstTwo[1];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return firstTwo[n % 2];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 22
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/test1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "2"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/test2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "6"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/test3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "11"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/test4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "14"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/fib/test5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "19"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/expected1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Correct solution"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/expected2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Correct solution"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/expected3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Correct solution"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/expected4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Correct solution"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/expected5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Correct solution"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/incorrect.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Incorrect {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(\"Wrong solution\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 5
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/test1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/test2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/test3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/test4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/incorrect/test5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/expected1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/expected2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/expected3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/expected4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/expected5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/nested.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Nested {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    class InsideNested {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        public int x \u003d 1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Nested nested \u003d new Nested();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        nested.printX();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void printX() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        InsideNested inside \u003d new InsideNested();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(inside.x);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 15
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/test1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/test2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/test3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/test4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/nested/test5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/expected1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/expected2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/expected3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/expected4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/expected5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/packaged.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package packaged.inside;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Packaged {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(1);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/test1.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/test2.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/test3.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/test4.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/data/TestPrograms/packaged/test5.txt",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "input"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 1,
      "-": 49
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/MainAppTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class MainAppTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void start() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void stop() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 19
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class ConfigTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void equalsMethod() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "limhawjia": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 2,
      "-": 118
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void getImage_exitingImage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/dukeacademy-icon.png\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 7,
      "limhawjia": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void isAnyNonNull() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 4,
      "limhawjia": 3,
      "-": 98
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempDir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 11,
      "limhawjia": 4,
      "-": 90
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void isValidPath() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "limhawjia": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class StringUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getFirstWord() throws IllegalValueException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected \u003d \"Hello\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String actual \u003d StringUtil.getFirstWord(\"Hello World!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected1 \u003d \"Hello\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String actual1 \u003d StringUtil.getFirstWord(\"Hello      World!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected2 \u003d \"Hello\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String actual2 \u003d StringUtil.getFirstWord(\"              Hello      World!\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e StringUtil.getFirstWord(\"\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e StringUtil.getFirstWord(\"    \"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void removeFirstWord() throws IllegalValueException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected \u003d \"World!\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String actual \u003d StringUtil.removeFirstWord(\"Hello World!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected1 \u003d \"World!\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String actual1 \u003d StringUtil.removeFirstWord(\"Hello      World!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected2 \u003d \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String actual2 \u003d StringUtil.removeFirstWord(\"HelloWorld!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e StringUtil.getFirstWord(\"\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e StringUtil.getFirstWord(\"    \"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 9,
      "limhawjia": 40,
      "-": 125
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/CommandLogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockCommandFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class CommandLogicManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private CommandLogicManager commandLogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void initializeTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandLogicManager \u003d new CommandLogicManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void registerAndExecuteCommand() throws CommandException, InvalidCommandKeywordException,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Register Command and its supplier"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        MockCommandFactory mockCommandFactory \u003d new MockCommandFactory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(mockCommandFactory.getCommandWord(), mockCommandFactory::getCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that result obtained is correct"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandResult result \u003d commandLogicManager.executeCommand(mockCommandFactory.getCommandWord());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(MockCommand.getExpectedCommandResult(), result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that command is still valid in spite of unexpected whitespace"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandResult result1 \u003d commandLogicManager.executeCommand(\"   \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + mockCommandFactory.getCommandWord() + \"    \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(MockCommand.getExpectedCommandResult(), result1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that the correct exceptions are thrown"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandKeywordException.class, () -\u003e commandLogicManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .executeCommand(\"a@123\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class, () -\u003e commandLogicManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .executeCommand(mockCommandFactory.getCommandWord() + \"      abc\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void registerFactoryAndExecuteCommand() throws CommandException, InvalidCommandKeywordException,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Register command factory"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        MockCommandFactory mockCommandFactory \u003d new MockCommandFactory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandLogicManager.registerCommand(mockCommandFactory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check the the correct result is obtained after execution"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandResult result \u003d commandLogicManager.executeCommand(mockCommandFactory.getCommandWord());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(MockCommand.getExpectedCommandResult(), result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that the command is still valid in spite of unexpected whitespace"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandResult result1 \u003d commandLogicManager.executeCommand(\"   \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + mockCommandFactory.getCommandWord() + \"    \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(MockCommand.getExpectedCommandResult(), result1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that the correct exceptions are thrown"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandKeywordException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                commandLogicManager.executeCommand(\"a@123\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class, () -\u003e commandLogicManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .executeCommand(mockCommandFactory.getCommandWord() + \"      abc\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 68
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/CommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandKeywordException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockCommandFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void registerAndParseCommand() throws InvalidCommandArgumentsException, InvalidCommandKeywordException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Creates and registers the MockCommandFactory instance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        MockCommandFactory mockCommandFactory \u003d new MockCommandFactory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commandParser.registerCommand(mockCommandFactory.getCommandWord(), mockCommandFactory::getCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Attempts to parse a MockCommand and check if command received is correct"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Command command \u003d commandParser.parseCommandText(mockCommandFactory.getCommandWord());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(command instanceof MockCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check to see that parsing still works in spite of unexpected whitespace."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Command command1 \u003d commandParser.parseCommandText(mockCommandFactory.getCommandWord() + \"    \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(command1 instanceof MockCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that the correct exceptions are thrown"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandKeywordException.class, () -\u003e commandParser.parseCommandText(\"abcde\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class, () -\u003e commandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .parseCommandText(mockCommandFactory.getCommandWord() + \"   12345\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 35
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false)));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void hashcode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                new CommandResult(\"feedback\", true).hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 4,
      "zhangj1an": 3,
      "limhawjia": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/attempt/AttemptCommandFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.attempt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class AttemptCommandFactoryTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MockQuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramSubmissionLogic submissionLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ApplicationState applicationState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic \u003d new ProgramSubmissionLogicManager(tempFolder.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d new ApplicationState();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCommandWord() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        AttemptCommandFactory factory \u003d new AttemptCommandFactory(questionsLogic, submissionLogic, applicationState);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        System.out.println(factory.getCommandWord());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"attempt\", factory.getCommandWord());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCommand() throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        AttemptCommandFactory factory \u003d new AttemptCommandFactory(questionsLogic, submissionLogic, applicationState);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(factory.getCommand(\"1\") instanceof AttemptCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"Index should be a valid number.\", () -\u003e factory.getCommand(\"Test\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "limhawjia": 47
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/attempt/AttemptCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.attempt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class AttemptCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MockQuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramSubmissionLogic submissionLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ApplicationState applicationState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @BeforeEach void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic \u003d new ProgramSubmissionLogicManager(tempFolder.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d new ApplicationState();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void execute() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int id1 \u003d questionsLogic.getAllQuestionsList().get(1).getId();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        AttemptCommand command \u003d new AttemptCommand(id1, questionsLogic, submissionLogic, applicationState);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.submissionLogic.getCurrentQuestion().isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(this.questionsLogic.getQuestion(id1), this.submissionLogic.getCurrentQuestion().get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int id2 \u003d questionsLogic.getAllQuestionsList().get(2).getId();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        AttemptCommand command1 \u003d new AttemptCommand(id2, questionsLogic, submissionLogic, applicationState);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        command1.execute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.submissionLogic.getCurrentQuestion().isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(this.questionsLogic.getQuestion(id2), this.submissionLogic.getCurrentQuestion().get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        AttemptCommand command2 \u003d new AttemptCommand(-20, questionsLogic, submissionLogic, applicationState);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"No question with id  \" + -20 + \" found.\", command2::execute);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "limhawjia": 49
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/bookmark/BookmarkCommandFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "class BookmarkCommandFactoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    void testGetCommandWord() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        MockQuestionsLogic questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        BookmarkCommandFactory factory \u003d new BookmarkCommandFactory(questionsLogic);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertEquals(\"bookmark\", factory.getCommandWord());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    void testGetCommand() throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        MockQuestionsLogic questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        BookmarkCommandFactory factory \u003d new BookmarkCommandFactory(questionsLogic);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertTrue(factory.getCommand(\"1\") instanceof BookmarkCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String expectedMessage \u003d \"Invalid input. Please call the bookmark command in this format: \u003cbookmark [id]\u003e , \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                + \"where id is the positive integer beside the question title.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                expectedMessage, () -\u003e factory.getCommand(\"testerString\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 32
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/bookmark/BookmarkCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "class BookmarkCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    void testExecute() throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        MockQuestionsLogic questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        BookmarkCommand bookmarkCommand \u003d new BookmarkCommand(-1, questionsLogic);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String expectedMessage \u003d \"No question with id  -1 found.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e bookmarkCommand.execute());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 19
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/bookmark/DeleteBookmarkCommandFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "class DeleteBookmarkCommandFactoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    void testGetCommandWord() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        MockQuestionsLogic questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        DeleteBookmarkCommandFactory factory \u003d new DeleteBookmarkCommandFactory(questionsLogic);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertEquals(\"deletebookmark\", factory.getCommandWord());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    void testGetCommand() throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        MockQuestionsLogic questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        DeleteBookmarkCommandFactory factory \u003d new DeleteBookmarkCommandFactory(questionsLogic);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertTrue(factory.getCommand(\"1\") instanceof DeleteBookmarkCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String expectedMessage \u003d \"Invalid input. Please call the deletebookmark command in this format: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                + \"\u003cdeletebookmark [id]\u003e , where id is the positive integer beside the question title.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "                factory.getCommand(\"testerString\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 32
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/bookmark/DeleteBookmarkCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "package com.dukeacademy.logic.commands.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "class DeleteBookmarkCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alxkohh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    void testExecute() throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        MockQuestionsLogic questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        DeleteBookmarkCommand deleteBookmarkCommand \u003d new DeleteBookmarkCommand(-1, questionsLogic);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        String expectedMessage \u003d \"No question with id  -1 found.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e deleteBookmarkCommand.execute());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 19
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/exit/ExitCommandFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.exit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockNotesLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ExitCommandFactoryTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MockQuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramSubmissionLogic submissionLogic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MockNotesLogic notesLogic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @BeforeEach void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic \u003d new ProgramSubmissionLogicManager(tempFolder.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCommandWord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ExitCommandFactory factory \u003d new ExitCommandFactory(questionsLogic, submissionLogic, notesLogic);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"exit\", factory.getCommandWord());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCommand() throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ExitCommandFactory factory \u003d new ExitCommandFactory(questionsLogic, submissionLogic, notesLogic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Command command \u003d factory.getCommand(\"    \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class, () -\u003e factory.getCommand(\"abc\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "limhawjia": 45
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/exit/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.exit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockNotesLogic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.TypicalQuestions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MockQuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramSubmissionLogic submissionLogic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MockNotesLogic notesLogic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @BeforeEach void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic \u003d new ProgramSubmissionLogicManager(tempFolder.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notesLogic \u003d new MockNotesLogic();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ExitCommand command \u003d new ExitCommand(questionsLogic, submissionLogic, notesLogic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program \u003d new UserProgram(\"Main\", \"abc123\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic.setUserProgramSubmissionChannel(() -\u003e program);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result.isExit());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e expectedQuestions \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.matchListData(questionsLogic.getFilteredQuestionsList(), expectedQuestions);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question currentQuestion \u003d this.questionsLogic.getAllQuestionsList().get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic.setCurrentQuestion(currentQuestion);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic.setUserProgramSubmissionChannel(() -\u003e program);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        //Check that latest submission is saved"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e expectedQuestions1 \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        expectedQuestions1.set(0, currentQuestion.withNewStatus(Status.ATTEMPTED).withNewUserProgram(program));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.matchListData(questionsLogic.getFilteredQuestionsList(), expectedQuestions1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        //Check that the latest note is saved"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.notesLogic.getAllNotesList().get(0).equals(MockNotesLogic.AFTER_SAVE_NOTE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to compare an observable list to a list for equality."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param observableList the observable list to be compared."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questionList the question list to be compared."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private void matchListData(ObservableList\u003cQuestion\u003e observableList, List\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (observableList.size() !\u003d questionList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (observableList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        IntStream.range(0, observableList.size()).mapToObj("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            i -\u003e observableList.get(i).checkContentsEqual(questionList.get(i)))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                 .reduce((x, y) -\u003e x \u0026\u0026 y).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 75
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/showall/ShowallCommandFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.showall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class ShowallCommandFactoryTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private MockQuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ApplicationState applicationState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d new ApplicationState();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCommandWord() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        ShowallCommandFactory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            factory \u003d new ShowallCommandFactory(questionsLogic, applicationState);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertEquals(\"showall\", factory.getCommandWord());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCommand() throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        ShowallCommandFactory"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            factory \u003d new ShowallCommandFactory(questionsLogic, applicationState);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        Command command \u003d factory.getCommand(\"    \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertTrue(command instanceof ShowallCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            \"Showall command does not take any arguments\", () -\u003e factory"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .getCommand(\"123\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 39,
      "limhawjia": 11
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/showall/ShowallCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.logic.commands.showall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.testutil.TypicalQuestions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class ShowallCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private MockQuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ApplicationState applicationState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @BeforeEach void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d new ApplicationState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        ShowallCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            command \u003d new ShowallCommand(questionsLogic, applicationState);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        List\u003cQuestion\u003e expectedQuestions \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        this.matchListData(questionsLogic.getFilteredQuestionsList(), expectedQuestions);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Helper method to compare an observable list to a list for equality."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param observableList the observable list to be compared."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * @param questionList the question list to be compared."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private void matchListData(ObservableList\u003cQuestion\u003e observableList, List\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (observableList.size() !\u003d questionList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        if (observableList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        IntStream.range(0, observableList.size()).mapToObj("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            i -\u003e observableList.get(i).checkContentsEqual(questionList.get(i)))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                 .reduce((x, y) -\u003e x \u0026\u0026 y).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 55,
      "limhawjia": 3
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/submit/SubmitCommandFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.submit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class SubmitCommandFactoryTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MockQuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramSubmissionLogic submissionLogic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ApplicationState applicationState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @BeforeEach void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic \u003d new ProgramSubmissionLogicManager(tempFolder.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d new ApplicationState();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void getCommandWord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        SubmitCommandFactory factory \u003d new SubmitCommandFactory(questionsLogic, submissionLogic, applicationState);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"submit\", factory.getCommandWord());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void getCommand() throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        SubmitCommandFactory factory \u003d new SubmitCommandFactory(questionsLogic, submissionLogic, applicationState);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Command command \u003d factory.getCommand(\"    \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(command instanceof SubmitCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(InvalidCommandArgumentsException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"Submit command does not take any arguments\", () -\u003e factory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        .getCommand(\"123\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 4,
      "limhawjia": 44
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/submit/SubmitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.submit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.ProgramSubmissionLogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.state.ApplicationState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.MockQuestionsLogic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.TypicalQuestions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class SubmitCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MockQuestionsLogic questionsLogic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramSubmissionLogic submissionLogic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ApplicationState applicationState;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @BeforeEach void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questionsLogic \u003d MockQuestionsLogic.getMockQuestionsLogicWithTypicalQuestions();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.submissionLogic \u003d new ProgramSubmissionLogicManager(tempFolder.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.applicationState \u003d new ApplicationState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void execute() throws IOException, CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        SubmitCommand command \u003d new SubmitCommand(questionsLogic, submissionLogic, applicationState);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that an exception is thrown if the question is not set previously"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        submissionLogic.setUserProgramSubmissionChannel(() -\u003e new UserProgram(\"Main\", \"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(CommandException.class, \"You have not attempted a question yet.\", command::execute);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that an exception is thrown if program is empty"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        submissionLogic.setCurrentQuestion(questionsLogic.getAllQuestionsList().get(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(CommandException.class, \"Program must not be empty.\", command::execute);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that an exception is thrown if no appropriate class name is found"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram invalidClassNameSubmission \u003d new UserProgram(\"Main\", \"public class Test {}\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        submissionLogic.setUserProgramSubmissionChannel(() -\u003e invalidClassNameSubmission);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(CommandException.class, \"Please write your main method in a class called Main\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                command::execute);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that questionsLogic has changed accordingly"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e expected \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        expected.set(0, expected.get(0).withNewUserProgram(invalidClassNameSubmission));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsLogic.getFilteredQuestionsList(), expected));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check correct results"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path solutionPath \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"adder\", \"adder.txt\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String solution \u003d Files.readString(solutionPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram correctProgram \u003d new UserProgram(\"Main\", solution);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        submissionLogic.setUserProgramSubmissionChannel(() -\u003e correctProgram);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(\"success\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e expected1 \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        expected1.set(0, expected1.get(0).withNewStatus(Status.PASSED).withNewUserProgram(correctProgram));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsLogic.getFilteredQuestionsList(), expected1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to compare an observable list to a list for equality."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param observableList the observable list to be compared."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questionList the question list to be compared."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if both lists are equal."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean matchListData(ObservableList\u003cQuestion\u003e observableList, List\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (observableList.size() !\u003d questionList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (observableList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return IntStream.range(0, observableList.size())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .mapToObj(i -\u003e observableList.get(i).checkContentsEqual(questionList.get(i)))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .reduce((x, y) -\u003e x \u0026\u0026 y).get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 95
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/tab/TabCommandFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TabCommandFactoryTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCommandWord() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 16
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/commands/tab/TabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.commands.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TabCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 11
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/program/FibMockUserProgramChannel.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Mock implementation of a program submission channel for testing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FibMockUserProgramChannel implements UserProgramChannel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UserProgram getProgram() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"fib\", \"fib.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String sourceCode \u003d Files.readString(program);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new UserProgram(\"Fib\", sourceCode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 24
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/program/ProgramSubmissionLogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.MethodOrderer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.TestMethodOrder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.LogicCreationException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.NoQuestionSetException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.program.exceptions.SubmissionLogicManagerClosedException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestCaseResult;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestResult;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.EmptyUserProgramException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.TestListener;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@TestMethodOrder(MethodOrderer.OrderAnnotation.class)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ProgramSubmissionLogicManagerTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static Path tempPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ProgramSubmissionLogicManager programSubmissionLogicManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void initializeTest() throws LogicCreationException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager \u003d new ProgramSubmissionLogicManager(tempPath.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void closeTest() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.closeProgramSubmissionLogicManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void exceptionsTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Test no question set"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram mockProgram \u003d new UserProgram(\"Test\", \"test\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NoQuestionSetException.class, () -\u003e this.programSubmissionLogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .submitUserProgram(mockProgram));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Test invalid directory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(LogicCreationException.class, () -\u003e new"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                ProgramSubmissionLogicManager(\"ra$123sdg!#z\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void submitUserProgram() throws IOException, IncorrectCanonicalNameException, EmptyUserProgramException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cTestResult\u003e resultListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.getTestResultObservable().addListener(resultListener);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Test for fib"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path rootFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"fib\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d this.loadTestCases(rootFolder);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program \u003d rootFolder.resolve(\"fib.txt\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode \u003d Files.readString(program);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(\"Fib\", sourceCode);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question \u003d this.createMockQuestion(\"Fib\", testCases);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.setCurrentQuestion(question);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTestResult\u003e fibResultOptional \u003d this.programSubmissionLogicManager.submitUserProgram(userProgram);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(fibResultOptional.isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that the same result is propagated to the observable"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult fibResult \u003d resultListener.getLatestValue();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotNull(fibResult);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(fibResultOptional.get(), fibResult);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check value of result"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(fibResult.getCompileError().isPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(5, fibResult.getNumPassed());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchTestCaseAndResults(testCases, fibResult.getResults()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Test for nested class"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path rootFolder1 \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"nested\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases1 \u003d this.loadTestCases(rootFolder1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program1 \u003d rootFolder1.resolve(\"nested.txt\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode1 \u003d Files.readString(program1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram1 \u003d new UserProgram(\"Nested\", sourceCode1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question1 \u003d this.createMockQuestion(\"Nested\", testCases1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.setCurrentQuestion(question1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTestResult\u003e nestedResultOptional \u003d this.programSubmissionLogicManager.submitUserProgram(userProgram1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(nestedResultOptional.isPresent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        //Check that the same result is propagated to the observable"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult nestedResult \u003d resultListener.getLatestValue();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotNull(nestedResult);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(nestedResultOptional.get(), nestedResult);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check contents of result"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(nestedResult.getCompileError().isPresent());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(5, nestedResult.getNumPassed());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchTestCaseAndResults(testCases1, nestedResult.getResults()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for errors"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCase mockTestCase \u003d new TestCase(\"\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e mockTestCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTestCases.add(mockTestCase);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTestCases.add(mockTestCase);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTestCases.add(mockTestCase);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Test for compile error"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program2 \u003d new UserProgram(\"CompileError\", \"public class CompileError {\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"int a \u003d \\\"Not an int\\\";\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"}\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question2 \u003d this.createMockQuestion(\"CompileError\", mockTestCases);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.setCurrentQuestion(question2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.submitUserProgram(program2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result2 \u003d resultListener.getLatestValue();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result2.getCompileError().isPresent());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Test for runtime error"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path programPath \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"TestPrograms\", \"errors\", \"indexoutofbounds.txt\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program3 \u003d new UserProgram(\"Main\", Files.readString(programPath));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.submitUserProgram(program3);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result3 \u003d resultListener.getLatestValue();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result3.getCompileError().isEmpty());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, result3.getNumPassed());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        IntStream.range(0, 3).forEach(index -\u003e {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult testCaseResult \u003d result3.getResults().get(index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assertFalse(testCaseResult.isSuccessful());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assertTrue(testCaseResult.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void closeProgramSubmissionLogicManager() throws LogicCreationException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.closeProgramSubmissionLogicManager();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(SubmissionLogicManagerClosedException.class,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programSubmissionLogicManager::closeProgramSubmissionLogicManager);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(SubmissionLogicManagerClosedException.class, () -\u003e this.programSubmissionLogicManager"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .setCurrentQuestion(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(SubmissionLogicManagerClosedException.class, () -\u003e this.programSubmissionLogicManager"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getCurrentQuestionObservable());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(SubmissionLogicManagerClosedException.class, () -\u003e this.programSubmissionLogicManager"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getTestResultObservable());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(SubmissionLogicManagerClosedException.class, () -\u003e this.programSubmissionLogicManager"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .submitUserProgram(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager \u003d new ProgramSubmissionLogicManager(tempPath.toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getAndSetCurrentQuestion() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Observable\u003cQuestion\u003e currentQuestionObservable \u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programSubmissionLogicManager.getCurrentQuestionObservable();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cQuestion\u003e testListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        currentQuestionObservable.addListener(testListener);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNull(testListener.getLatestValue());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(this.programSubmissionLogicManager.getCurrentQuestion().isPresent());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.setCurrentQuestion(this.createMockQuestion(\"abc123\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"abc123\", testListener.getLatestValue().getTitle());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.programSubmissionLogicManager.getCurrentQuestion().isPresent());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"abc123\", this.programSubmissionLogicManager.getCurrentQuestion().get().getTitle());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Load test cases from a root folder. Each test case is generated from an input text file following"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the naming convention \"test1.txt\", \"test2.txt\", etc and its corresponding expected value text file"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * following the naming convention \"expected1.txt\", \"expected2.txt\", etc."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param rootFolder the path to the root folder that contains the text files."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a list of corresponding test cases."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException if the files cannot be found or read."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cTestCase\u003e loadTestCases(Path rootFolder) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test1 \u003d Files.readString(rootFolder.resolve(\"test1.txt\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test2 \u003d Files.readString(rootFolder.resolve(\"test2.txt\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test3 \u003d Files.readString(rootFolder.resolve(\"test3.txt\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test4 \u003d Files.readString(rootFolder.resolve(\"test4.txt\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test5 \u003d Files.readString(rootFolder.resolve(\"test5.txt\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected1 \u003d Files.readString(rootFolder.resolve(\"expected1.txt\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected2 \u003d Files.readString(rootFolder.resolve(\"expected2.txt\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected3 \u003d Files.readString(rootFolder.resolve(\"expected3.txt\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected4 \u003d Files.readString(rootFolder.resolve(\"expected4.txt\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected5 \u003d Files.readString(rootFolder.resolve(\"expected5.txt\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test1, expected1));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test2, expected2));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test3, expected3));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test4, expected4));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test5, expected5));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return testCases;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Compares a list of test cases and results sequentially and checks that each result is successful and that"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * its actual and expected outputs matches those specified in the test case."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param testCases the list of test cases to be checked against."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param results   the list of results to be checked."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if all the results match the criteria."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean matchTestCaseAndResults(List\u003cTestCase\u003e testCases, List\u003cTestCaseResult\u003e results) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return IntStream.range(0, testCases.size())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .mapToObj(index -\u003e {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    TestCaseResult result \u003d results.get(index);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    if (result.getActualOutput().isEmpty() || !result.isSuccessful()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    return testCases.stream()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            .anyMatch(testCase -\u003e testCase.getExpectedResult().equals(result.getActualOutput().get())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u0026\u0026 testCase.getExpectedResult().equals(result.getExpectedOutput()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                }).reduce((x, y) -\u003e x \u0026\u0026 y)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElse(false);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates a mock question for testing."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param title     the name of the question."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param testCases the test cases of the question."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the created question."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Question createMockQuestion(String title, List\u003cTestCase\u003e testCases) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Status status \u003d Status.ATTEMPTED;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Difficulty difficulty \u003d Difficulty.HARD;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Set\u003cTopic\u003e topics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        boolean isBookmarked \u003d true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Question(title, status, difficulty, topics, testCases,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                new UserProgram(\"Main\", \"\"), true, description);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setAndSubmitUserProgramSubmissionChannelAndGetProgram() throws IOException, IncorrectCanonicalNameException,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            EmptyUserProgramException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cTestResult\u003e resultListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.getTestResultObservable().addListener(resultListener);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FibMockUserProgramChannel channel \u003d new FibMockUserProgramChannel();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.setUserProgramSubmissionChannel(channel);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path rootFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"fib\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program \u003d rootFolder.resolve(\"fib.txt\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode \u003d Files.readString(program);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(new UserProgram(\"Fib\", sourceCode),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.programSubmissionLogicManager.getUserProgramFromSubmissionChannel());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d this.loadTestCases(rootFolder);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question \u003d this.createMockQuestion(\"Fib\", testCases);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.programSubmissionLogicManager.setCurrentQuestion(question);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTestResult\u003e testResultOptional \u003d this.programSubmissionLogicManager"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .submitUserProgramFromSubmissionChannel();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(testResultOptional.isPresent());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that result is propagated to observable"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult testResult \u003d resultListener.getLatestValue();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotNull(testResult);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(testResultOptional.get(), testResult);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check values"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(testResult.getCompileError().isPresent());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(5, testResult.getNumPassed());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchTestCaseAndResults(testCases, testResult.getResults()));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testSubmitEmptyProgram() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram emptyProgram \u003d new UserProgram(\"Main\", \"\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(EmptyUserProgramException.class, () -\u003e this.programSubmissionLogicManager"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .submitUserProgram(emptyProgram));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testProgramSubmissionFailure() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 2,
      "limhawjia": 311
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/logic/question/QuestionsLogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.logic.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonQuestionBankStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.QuestionBankStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.TypicalQuestions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class QuestionsLogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Path tempFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Path typicalQuestionBankPath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Path emptyQuestionBankPath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates a typical question bank Json file and an empty question bank Json file for testing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void initializeTest() throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        typicalQuestionBankPath \u003d tempFolder.resolve(\"typical.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.createFile(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String typicalQuestionData \u003d Files.readString(Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"JsonSerializableQuestionBankTest\", \"typicalQuestionQuestionBank.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(typicalQuestionBankPath, typicalQuestionData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        emptyQuestionBankPath \u003d tempFolder.resolve(\"empty.json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.createFile(emptyQuestionBankPath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(emptyQuestionBankPath, \"{ \\\"questions\\\" : []}\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes the created files."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void closeTest() throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.delete(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.delete(emptyQuestionBankPath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getFilteredQuestionsList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Ensure that the list in the question bank always corresponds to the list in the logic manager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load empty question bank"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(emptyQuestionBankPath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, questionsObservableList.size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load typical questions"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage1 \u003d new JsonQuestionBankStorage(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager1 \u003d new QuestionsLogicManager(storage1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList1 \u003d questionsLogicManager1.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList1, TypicalQuestions.getTypicalQuestions()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Assert that the list returned is read-only"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e questionsObservableList"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .add(this.getMockQuestion(\"Test5\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getAllQuestionsList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Ensure that the list in the question bank always corresponds to the list in the logic manager"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load empty question bank"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(emptyQuestionBankPath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getAllQuestionsList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, questionsObservableList.size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load typical questions"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage1 \u003d new JsonQuestionBankStorage(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager1 \u003d new QuestionsLogicManager(storage1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList1 \u003d questionsLogicManager1.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList1, TypicalQuestions.getTypicalQuestions()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Assert that the list returned is read-only"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e questionsObservableList"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .add(this.getMockQuestion(\"Test5\")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void filterQuestionsList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load typical questions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e typicalQuestions \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, typicalQuestions));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Assert that the filter works"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.filterQuestionsList(question -\u003e question.getTitle().equals(\"Valid Sudoku\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(1, questionsObservableList.size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(questionsObservableList.stream().allMatch(question -\u003e question.getTitle().equals(\"Valid Sudoku\")));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Assert that the filter did not modify the original list data in the bank and in the logic manager"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e storageQuestions \u003d storage.readQuestionBank().get()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(storageQuestions, TypicalQuestions.getTypicalQuestions()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.filterQuestionsList(question -\u003e true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, TypicalQuestions.getTypicalQuestions()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getQuestion() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load typical questions"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e typicalQuestions \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, typicalQuestions));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question0 \u003d questionsObservableList.get(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question2 \u003d questionsObservableList.get(2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(typicalQuestions.get(0).checkContentsEqual(question0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(typicalQuestions.get(2).checkContentsEqual(question2));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestion() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load empty question bank"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(emptyQuestionBankPath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, questionsObservableList.size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Verify added question is reflected in the logic manager and the storage"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question newQuestion \u003d this.getMockQuestion(\"abc\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.addQuestion(newQuestion);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, List.of(newQuestion)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e storageQuestions \u003d storage.readQuestionBank().get()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(storageQuestions, List.of(newQuestion)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestions() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load empty question bank"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(emptyQuestionBankPath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, questionsObservableList.size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Verify added questions are reflected in the logic manager and the storage"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.addQuestions(mockQuestions);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, mockQuestions));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e storageQuestions \u003d storage.readQuestionBank().get()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(storageQuestions, mockQuestions));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestionsFromPath() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load empty question bank"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(emptyQuestionBankPath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, questionsObservableList.size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Verify that original data is untouched if file path is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.addQuestionsFromPath(Paths.get(\"a!3@\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, questionsObservableList.size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e storageQuestions \u003d storage.readQuestionBank().get()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, storageQuestions.size());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Verify added questions are reflected in the logic manager and the storage"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.addQuestionsFromPath(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e expectedQuestions \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, expectedQuestions));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e storageQuestions1 \u003d storage.readQuestionBank().get()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(storageQuestions1, expectedQuestions));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setQuestion() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load typical questions"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e typicalQuestions \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, typicalQuestions));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check the question is replaced both in the logic manager and in the storage"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question newQuestion \u003d this.getMockQuestion(\"Test4\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question oldQuestion \u003d questionsObservableList.get(1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.setQuestion(oldQuestion.getId(), newQuestion);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        typicalQuestions.remove(1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        typicalQuestions.add(1, newQuestion);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, typicalQuestions));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e storageQuestions \u003d storage.readQuestionBank()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .get().getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(storageQuestions, typicalQuestions));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(QuestionNotFoundRuntimeException.class, () -\u003e questionsLogicManager.setQuestion(100, newQuestion));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(QuestionNotFoundRuntimeException.class, () -\u003e questionsLogicManager.setQuestion(-1, newQuestion));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deleteAllQuestions() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load typical questions"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e typicalQuestions \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, typicalQuestions));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that the questions are deleted in both the logic manager and in the question bank"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.deleteAllQuestions();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, questionsObservableList.size());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e storageQuestions \u003d storage.readQuestionBank().get()"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, storageQuestions.size());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void replaceQuestion() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load typical questions"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBankStorage storage \u003d new JsonQuestionBankStorage(typicalQuestionBankPath);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionsLogicManager questionsLogicManager \u003d new QuestionsLogicManager(storage);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionsObservableList \u003d questionsLogicManager.getFilteredQuestionsList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e typicalQuestions \u003d TypicalQuestions.getTypicalQuestions();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, typicalQuestions));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check that question replaced in both the logic manager and in the question bank"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question oldQuestion \u003d questionsObservableList.get(1);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question newQuestion \u003d this.getMockQuestion(\"abc\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questionsLogicManager.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        typicalQuestions.remove(1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        typicalQuestions.add(1, newQuestion);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionsObservableList, typicalQuestions));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to compare an observable list to a list for equality."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param observableList the observable list to be compared."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questionList the question list to be compared."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if both lists are equal."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean matchListData(ObservableList\u003cQuestion\u003e observableList, List\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (observableList.size() !\u003d questionList.size()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (observableList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return IntStream.range(0, observableList.size())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .mapToObj(i -\u003e observableList.get(i).checkContentsEqual(questionList.get(i)))"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .reduce((x, y) -\u003e x \u0026\u0026 y).get();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cQuestion\u003e getMockQuestionData() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(this.getMockQuestion(\"Test1\"));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(this.getMockQuestion(\"Test2\"));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(this.getMockQuestion(\"Test3\"));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return questions;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Question getMockQuestion(String name) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int random \u003d (int) Math.round(Math.random());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(\"1\", \"1\"));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(\"2\", \"2\"));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(\"3\", \"3\"));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(\"Test\", \"public class Test { }\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (random \u003d\u003d 0) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Set\u003cTopic\u003e topics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            topics.add(Topic.TREE);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            topics.add(Topic.DYNAMIC_PROGRAMMING);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return new Question(name, Status.NEW, Difficulty.HARD, topics,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                testCases, userProgram, true, description);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Set\u003cTopic\u003e topics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            topics.add(Topic.LINKED_LIST);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            topics.add(Topic.RECURSION);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return new Question(name, Status.ATTEMPTED, Difficulty.EASY,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                topics, testCases, userProgram, true, description);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getSelectedQuestion() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void selectQuestion() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 331
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/model/program/TestCaseResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestCaseResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testStaticConstructorAndGetterSuccessfulResult() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult testCase \u003d TestCaseResult.getSuccessfulTestCaseResult(\"1\", \"2\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(testCase.isSuccessful());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(testCase.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"1\", testCase.getInput());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"2\", testCase.getExpectedOutput());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(testCase.getActualOutput().isPresent());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"2\", testCase.getActualOutput().get());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testStaticConstructorAndGetterFailedResult() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult testCase \u003d TestCaseResult.getFailedTestCaseResult(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(testCase.isSuccessful());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(testCase.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"1\", testCase.getInput());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"2\", testCase.getExpectedOutput());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(testCase.getActualOutput().isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"3\", testCase.getActualOutput().get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testStaticConstructorAndGetterErroredResult() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String error \u003d \"This is an error!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult testCase \u003d TestCaseResult.getErroredTestCaseResult(\"1\", \"2\", error);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(testCase.isSuccessful());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(testCase.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(error, testCase.getRuntimeError().get().getErrorMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"1\", testCase.getInput());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"2\", testCase.getExpectedOutput());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(testCase.getActualOutput().isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult successfulTestCaseResult1 \u003d TestCaseResult.getSuccessfulTestCaseResult(\"1\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \" 2\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult successfulTestCaseResult2 \u003d TestCaseResult.getSuccessfulTestCaseResult(\"1\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"3\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult successfulTestCaseResult3 \u003d TestCaseResult.getSuccessfulTestCaseResult(\"1\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"3\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult failedTestCaseResult1 \u003d TestCaseResult.getFailedTestCaseResult(\"1\", \"2\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"3\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult failedTestCaseResult2 \u003d TestCaseResult.getFailedTestCaseResult(\"6\", \"2\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"4\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult failedTestCaseResult3 \u003d TestCaseResult.getFailedTestCaseResult(\"6\", \"2\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"4\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult erroredTestCaseResult1 \u003d TestCaseResult.getErroredTestCaseResult(\"1\", \"2\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"Error1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult erroredTestCaseResult2 \u003d TestCaseResult.getErroredTestCaseResult(\"1\", \"2\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"Error2\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCaseResult erroredTestCaseResult3 \u003d TestCaseResult.getErroredTestCaseResult(\"1\", \"2\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"Error2\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(successfulTestCaseResult2, successfulTestCaseResult3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(failedTestCaseResult2, failedTestCaseResult3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(erroredTestCaseResult2, erroredTestCaseResult3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(successfulTestCaseResult1, successfulTestCaseResult2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(successfulTestCaseResult1, failedTestCaseResult1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(failedTestCaseResult1, failedTestCaseResult2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(failedTestCaseResult1, erroredTestCaseResult1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(erroredTestCaseResult1, erroredTestCaseResult2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(erroredTestCaseResult1, successfulTestCaseResult1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 81
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/model/program/TestResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.CompileError;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestResultTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final List\u003cTestCaseResult\u003e resultsSetA \u003d List.of(new TestCaseResult[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getSuccessfulTestCaseResult(\"1\", \"2\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getFailedTestCaseResult(\"2\", \"200\", \"300\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getErroredTestCaseResult(\"4\", \"20\", \"TestFailed\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getFailedTestCaseResult(\"2\", \"3\", \"1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final List\u003cTestCaseResult\u003e resultsSetB \u003d List.of(new TestCaseResult[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getSuccessfulTestCaseResult(\"70\", \"2\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getFailedTestCaseResult(\"2\", \"2278\", \"abc\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getErroredTestCaseResult(\"55\", \"007\", \"Bond\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getSuccessfulTestCaseResult(\"2\", \"3\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final List\u003cTestCaseResult\u003e allSuccessResultSet \u003d List.of(new TestCaseResult[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getSuccessfulTestCaseResult(\"70\", \"2\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getSuccessfulTestCaseResult(\"70\", \"2\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getSuccessfulTestCaseResult(\"70\", \"2\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult.getSuccessfulTestCaseResult(\"70\", \"2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testConstructorAndGetters() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult success \u003d new TestResult(allSuccessResultSet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(success.isSuccessful());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(4, success.getNumPassed());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(allSuccessResultSet, success.getResults());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(success.getCompileError().isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check immutability"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCaseResult\u003e testCaseResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult immutable \u003d new TestResult(testCaseResults);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCaseResults.add(TestCaseResult.getErroredTestCaseResult(\"1\", \"1\", \"Error!\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(immutable.getResults(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult fail \u003d new TestResult(resultsSetA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(fail.isSuccessful());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(1, fail.getNumPassed());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(resultsSetA, fail.getResults());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(fail.getCompileError().isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CompileError error \u003d new CompileError(\"This is a compile error!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult compileError \u003d new TestResult(error);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(compileError.isSuccessful());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, compileError.getNumPassed());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(compileError.getResults(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(compileError.getCompileError().isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(error, compileError.getCompileError().get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult resultA \u003d new TestResult(resultsSetA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult resultA2 \u003d new TestResult(resultsSetA);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(resultA, resultA2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult resultA3 \u003d new TestResult(new ArrayList\u003c\u003e(resultsSetA));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(resultA, resultA3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult resultB \u003d new TestResult(resultsSetB);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(resultA, resultB);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 75
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/model/program/UserProgramTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class UserProgramTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testConstructorAndGetters() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UserProgram(null, null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String content \u003d \"package foo.bar;\\n\" + \"public class Test {\\n}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String canonicalName \u003d \"foo.bar.Test\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(canonicalName, content);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(canonicalName, userProgram.getCanonicalName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(content, userProgram.getSourceCode());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 17
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/model/question/QuestionBuilderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class QuestionBuilderTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String validTitle \u003d \"Test question\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Status validStatus \u003d Status.ATTEMPTED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Difficulty validDifficulty \u003d Difficulty.EASY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Set\u003cTopic\u003e validTopics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cTestCase\u003e validTestCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final UserProgram validUserProgram \u003d new UserProgram(\"Test\", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String validDescription \u003d \"description\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final Boolean validIsBookmarked \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void populateTopicsAndTestCases() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTopics.add(Topic.TREE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTopics.add(Topic.DYNAMIC_PROGRAMMING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new TestCase(\"1\", \"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new TestCase(\"2\", \"2\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new TestCase(\"3\", \"3\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new QuestionBuilder().build());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new QuestionBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTitle(\"\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withStatus(validStatus)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withDifficulty(validDifficulty)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTopics(validTopics.toArray(Topic[]::new))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTestCases(validTestCases.toArray(TestCase[]::new))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withUserProgram(validUserProgram)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withDescription(validDescription)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withIsBookmarked(validIsBookmarked)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new QuestionBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTitle(validTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withDifficulty(validDifficulty)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTopics(validTopics.toArray(Topic[]::new))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTestCases(validTestCases.toArray(TestCase[]::new))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withUserProgram(validUserProgram)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withDescription(validDescription)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withIsBookmarked(validIsBookmarked)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new QuestionBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withStatus(validStatus)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withDifficulty(validDifficulty)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTopics(validTopics.toArray(Topic[]::new))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTestCases(validTestCases.toArray(TestCase[]::new))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withUserProgram(validUserProgram)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withDescription(validDescription)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withIsBookmarked(validIsBookmarked)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new QuestionBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTitle(validTitle)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withStatus(validStatus)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTopics(validTopics.toArray(Topic[]::new))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTestCases(validTestCases.toArray(TestCase[]::new))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withUserProgram(validUserProgram)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withDescription(validDescription)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withIsBookmarked(validIsBookmarked)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTitle(validTitle)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withStatus(validStatus)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withDifficulty(validDifficulty)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTopics(validTopics.toArray(Topic[]::new))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withTestCases(validTestCases.toArray(TestCase[]::new))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withUserProgram(validUserProgram)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withDescription(validDescription)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .withIsBookmarked(validIsBookmarked)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validTitle, question.getTitle());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validStatus, question.getStatus());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validDifficulty, question.getDifficulty());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validTopics, question.getTopics());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validTestCases, question.getTestCases());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validUserProgram, question.getUserProgram());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertEquals(validDescription, question.getDescription());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertEquals(validIsBookmarked, question.isBookmarked());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 24,
      "limhawjia": 80
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/model/question/QuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String validTitle \u003d \"Test question\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Status validStatus \u003d Status.ATTEMPTED;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Difficulty validDifficulty \u003d Difficulty.EASY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final Set\u003cTopic\u003e validTopics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cTestCase\u003e validTestCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final UserProgram validUserProgram \u003d new UserProgram(\"Test\", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String validDescription \u003d \"Test Description\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final boolean validIsBookmarked \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void populateTopicsAndTestCases() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTopics.add(Topic.TREE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTopics.add(Topic.DYNAMIC_PROGRAMMING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new TestCase(\"1\", \"1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new TestCase(\"2\", \"2\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new TestCase(\"3\", \"3\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null, validStatus, validDifficulty,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validTopics, validTestCases, validUserProgram,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validIsBookmarked, validDescription));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(validTitle, null, validDifficulty,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validTopics, validTestCases, validUserProgram, validIsBookmarked, validDescription));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(validTitle, validStatus, null,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validTopics, validTestCases, validUserProgram, validIsBookmarked, validDescription));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(validTitle, validStatus, validDifficulty,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                null, validTestCases, validUserProgram, validIsBookmarked, validDescription));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(validTitle, validStatus, validDifficulty,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validTopics, null, validUserProgram, validIsBookmarked, validDescription));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(validTitle, validStatus, validDifficulty,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validTopics, validTestCases, null, validIsBookmarked, validDescription));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question validQuestion \u003d new Question(validTitle, validStatus, validDifficulty, validTopics,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validTestCases, validUserProgram, validIsBookmarked, validDescription);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validTitle, validQuestion.getTitle());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validStatus, validQuestion.getStatus());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validDifficulty, validQuestion.getDifficulty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validTopics, validQuestion.getTopics());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validTestCases, validQuestion.getTestCases());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validUserProgram, validQuestion.getUserProgram());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertEquals(validDescription, validQuestion.getDescription());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void checkValidTitle() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(Question.checkValidTitle(\"Sum 123!@#%\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(Question.checkValidTitle(\"!\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(Question.checkValidTitle(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(Question.checkValidTitle(\"    \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void withNewStatus() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question \u003d new Question(validTitle, validStatus, validDifficulty,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validTopics, validTestCases, validUserProgram, validIsBookmarked, validDescription);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question newQuestion \u003d question.withNewStatus(Status.PASSED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(newQuestion.getStatus(), Status.PASSED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(question, newQuestion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e question.withNewStatus(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void withNewUserProgram() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question \u003d new Question(validTitle, validStatus, validDifficulty,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validTopics, validTestCases, validUserProgram, validIsBookmarked, validDescription);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program \u003d new UserProgram(\"Test\", \"Test test test test test\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question newQuestion \u003d question.withNewUserProgram(program);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(newQuestion.getUserProgram(), program);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(question, newQuestion);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e question.withNewUserProgram(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 28,
      "limhawjia": 67
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/model/question/StandardQuestionBankTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.TypicalQuestions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StandardQuestionBankTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final StandardQuestionBank standardQuestionBank \u003d new StandardQuestionBank();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(Collections.emptyList(), standardQuestionBank.getReadOnlyQuestionListObservable());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardQuestionBank testBank \u003d new StandardQuestionBank(mockQuestions);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(testBank.getReadOnlyQuestionListObservable(), mockQuestions));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardQuestionBank testBank2 \u003d new StandardQuestionBank(testBank);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(testBank2.getReadOnlyQuestionListObservable(), mockQuestions));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getReadOnlyQuestionListObservable() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockQuestions.add(this.getMockQuestion(\"abc\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, mockQuestions));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockQuestions.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, mockQuestions));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e questionObservableList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .add(this.getMockQuestion(\"abc\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestion() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question newQuestion \u003d this.getMockQuestion(\"abc\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockQuestions.add(newQuestion);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.addQuestion(newQuestion);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, mockQuestions));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setQuestions() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, mockQuestions));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addQuestionBank() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        QuestionBank questionBank \u003d TypicalQuestions.getTypicalQuestionBank();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.addQuestionBank(questionBank);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, questionBank.getReadOnlyQuestionListObservable()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void replaceQuestion() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e originalBankList \u003d new ArrayList\u003c\u003e(questionObservableList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question newQuestion \u003d this.getMockQuestion(\"abc\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.replaceQuestion(1, newQuestion);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        originalBankList.remove(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        originalBankList.add(1, newQuestion);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, originalBankList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void replaceQuestionWithOldQuestion() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question oldQuestion \u003d questionObservableList.get(1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question newQuestion \u003d this.getMockQuestion(\"123\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockQuestions.remove(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockQuestions.add(1, newQuestion);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, mockQuestions));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question testQuestion \u003d this.getMockQuestion(\"abc\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(QuestionNotFoundRuntimeException.class, () -\u003e this.standardQuestionBank"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .replaceQuestion(testQuestion, testQuestion));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void removeQuestion() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e originalBankList \u003d new ArrayList\u003c\u003e(questionObservableList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question questionToRemove \u003d originalBankList.get(1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        originalBankList.remove(questionToRemove);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.removeQuestion(questionToRemove);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, originalBankList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void removeQuestionByIndex() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e originalBankList \u003d new ArrayList\u003c\u003e(questionObservableList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.removeQuestion(1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        originalBankList.remove(1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.matchListData(questionObservableList, originalBankList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void resetQuestions() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cQuestion\u003e questionObservableList \u003d standardQuestionBank.getReadOnlyQuestionListObservable();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e mockQuestions \u003d this.getMockQuestionData();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.setQuestions(mockQuestions);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.standardQuestionBank.resetQuestions();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, questionObservableList.size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper method to check the equality of questions in an observable list and a list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param observableList the observable list to be checked."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param questionList the list to be checked."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the questions are equal."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean matchListData(ObservableList\u003cQuestion\u003e observableList, List\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (observableList.size() !\u003d questionList.size()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (observableList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return IntStream.range(0, observableList.size())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .mapToObj(i -\u003e observableList.get(i).equals(questionList.get(i)))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .reduce((x, y) -\u003e x \u0026\u0026 y).get();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cQuestion\u003e getMockQuestionData() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(this.getMockQuestion(\"Test1\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(this.getMockQuestion(\"Test2\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(this.getMockQuestion(\"Test3\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return questions;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Question getMockQuestion(String name) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int random \u003d (int) Math.round(Math.random());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(\"1\", \"1\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(\"2\", \"2\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(\"3\", \"3\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(\"Test\", \"public class Test { }\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (random \u003d\u003d 0) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Set\u003cTopic\u003e topics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            topics.add(Topic.TREE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            topics.add(Topic.DYNAMIC_PROGRAMMING);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return new Question(name, Status.NEW, Difficulty.HARD, topics,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                testCases, userProgram, true, description);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Set\u003cTopic\u003e topics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            topics.add(Topic.LINKED_LIST);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            topics.add(Topic.RECURSION);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            return new Question(name, Status.ATTEMPTED, Difficulty.EASY,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                topics, testCases, userProgram, false, description);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 40,
      "limhawjia": 179
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/model/question/TestCaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestCaseTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testConstructorAndGetters() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String input \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expectedResult \u003d \"2\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCase testCase \u003d new TestCase(input, expectedResult);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(input, testCase.getInput());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedResult, testCase.getExpectedResult());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testConstructorNullArguments() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestCase(null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestCase(\"1\", null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestCase(null, \"1\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 2,
      "limhawjia": 23
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/model/state/ApplicationStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.model.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ApplicationStateTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setCurrentActivity() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCurrentActivityObservable() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getCurrentActivity() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/observable/StandardObservableTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.observable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testutil.TestListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class StandardObservableTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StandardObservable\u003cString\u003e stringStandardObservable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StandardObservable\u003cInteger\u003e integerStandardObservable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StandardObservable\u003cBoolean\u003e booleanStandardObservable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void initializeTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable \u003d new StandardObservable\u003c\u003e(\"Hello world!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        integerStandardObservable \u003d new StandardObservable\u003c\u003e(100);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        booleanStandardObservable \u003d new StandardObservable\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getValue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(stringStandardObservable.getValue().isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"Hello world!\", stringStandardObservable.getValue().get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(integerStandardObservable.getValue().isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(100, integerStandardObservable.getValue().get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(booleanStandardObservable.getValue().isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setValue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.setValue(\"DukeAcademy\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(stringStandardObservable.getValue().isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"DukeAcademy\", stringStandardObservable.getValue().get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        integerStandardObservable.setValue(-100);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(integerStandardObservable.getValue().isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(-100, integerStandardObservable.getValue().get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        booleanStandardObservable.setValue(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(booleanStandardObservable.getValue().isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(booleanStandardObservable.getValue().get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addListener() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cString\u003e stringTestListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cString\u003e stringTestListener1 \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cString\u003e stringTestListener2 \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.addListener(stringTestListener);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.addListener(stringTestListener1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.addListener(stringTestListener2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.setValue(\"DukeAcademy\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"DukeAcademy\", stringTestListener.getLatestValue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"DukeAcademy\", stringTestListener1.getLatestValue());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"DukeAcademy\", stringTestListener2.getLatestValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.setValue(\"CS2103T rocks\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"CS2103T rocks\", stringTestListener.getLatestValue());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"CS2103T rocks\", stringTestListener1.getLatestValue());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"CS2103T rocks\", stringTestListener2.getLatestValue());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cInteger\u003e integerTestListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        integerStandardObservable.addListener(integerTestListener);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        integerStandardObservable.setValue(-100);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(-100, integerTestListener.getLatestValue());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cBoolean\u003e booleanTestListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        booleanStandardObservable.addListener(booleanTestListener);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        booleanStandardObservable.setValue(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(true, booleanTestListener.getLatestValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void removeListener() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cString\u003e stringTestListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.addListener(stringTestListener);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.removeListener(stringTestListener);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.setValue(\"DukeAcademy\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"Hello world!\", stringTestListener.getLatestValue());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cInteger\u003e integerTestListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        integerStandardObservable.addListener(integerTestListener);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        integerStandardObservable.removeListener(integerTestListener);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        integerStandardObservable.setValue(-100);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(100, integerTestListener.getLatestValue());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cBoolean\u003e booleanTestListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        booleanStandardObservable.addListener(booleanTestListener);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        booleanStandardObservable.removeListener(booleanTestListener);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        booleanStandardObservable.setValue(true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNull(booleanTestListener.getLatestValue());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void clearListeners() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cString\u003e stringTestListener \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cString\u003e stringTestListener1 \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestListener\u003cString\u003e stringTestListener2 \u003d new TestListener\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.addListener(stringTestListener);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.addListener(stringTestListener1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.addListener(stringTestListener2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.clearListeners();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stringStandardObservable.setValue(\"DukeAcademy\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"Hello world!\", stringTestListener.getLatestValue());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"Hello world!\", stringTestListener1.getLatestValue());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"Hello world!\", stringTestListener2.getLatestValue());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 126
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/storage/questions/JsonAdaptedQuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.questions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonAdaptedQuestion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonAdaptedTestCase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonAdaptedUserProgram;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class JsonAdaptedQuestionTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String validTitle \u003d \"Test question\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String validStatus \u003d Status.ATTEMPTED.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String validDifficulty \u003d Difficulty.EASY.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "    private final boolean validIsBookmarked \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cString\u003e validTopics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cJsonAdaptedTestCase\u003e validTestCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final JsonAdaptedUserProgram validUserProgram \u003d new JsonAdaptedUserProgram(\"Test\", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String validDescription \u003d \"Test Description\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void populateTopicsAndTestCases() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTopics.add(Topic.TREE.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTopics.add(Topic.DYNAMIC_PROGRAMMING.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new JsonAdaptedTestCase(\"1\", \"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new JsonAdaptedTestCase(\"2\", \"2\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.validTestCases.add(new JsonAdaptedTestCase(\"3\", \"3\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void toModel() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        JsonAdaptedQuestion jsonQuestion \u003d new JsonAdaptedQuestion(validTitle,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validStatus, validDifficulty, validIsBookmarked,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validTopics, validTestCases, validUserProgram, validDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question question \u003d jsonQuestion.toModel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(this.validTitle, question.getTitle());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(Status.valueOf(this.validStatus), question.getStatus());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(Difficulty.valueOf(this.validDifficulty), question.getDifficulty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Set\u003cTopic\u003e expectedTopics \u003d new HashSet\u003c\u003e(this.validTopics.stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(Topic::valueOf)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedTopics, question.getTopics());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e expectedTestCases \u003d this.validTestCases.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(JsonAdaptedTestCase::toModel)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedTestCases, question.getTestCases());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram expectedUserProgram \u003d this.validUserProgram.toModel();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedUserProgram, question.getUserProgram());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void toModelInvalid() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedQuestion(null, validStatus,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validDifficulty, validIsBookmarked, validTopics, validTestCases,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validUserProgram, validDescription).toModel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedQuestion(validTitle, null,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validDifficulty, validIsBookmarked, validTopics,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validTestCases, validUserProgram, validDescription).toModel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedQuestion(validTitle, validStatus,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                null, validIsBookmarked, validTopics, validTestCases,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validUserProgram, validDescription).toModel());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JsonAdaptedQuestion(validTitle, validStatus,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                validDifficulty, validIsBookmarked, validTopics,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            validTestCases, null, validDescription).toModel());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "zhangj1an": 13,
      "limhawjia": 59,
      "-": 10
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/storage/questions/JsonAdaptedTestCaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.questions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonAdaptedTestCase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class JsonAdaptedTestCaseTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void toModel() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCase testCase \u003d new JsonAdaptedTestCase(\"1\", \"1\").toModel();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"1\", testCase.getInput());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"1\", testCase.getExpectedResult());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void toModelInvalid() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JsonAdaptedTestCase(null, \"1\").toModel());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JsonAdaptedTestCase(\"1\", null).toModel());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 3,
      "limhawjia": 19
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/storage/questions/JsonAdaptedUserProgramTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.questions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonAdaptedUserProgram;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class JsonAdaptedUserProgramTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String className \u003d \"Test\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String content \u003d \"package foo.bar;\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"public class Test {\\n}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void toModel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program \u003d new JsonAdaptedUserProgram(className, content).toModel();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(className, program.getCanonicalName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(content, program.getSourceCode());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void toModelInvalid() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JsonAdaptedUserProgram(null, content).toModel());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JsonAdaptedUserProgram(className, null).toModel());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 21
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/storage/questions/JsonQuestionBankStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.questions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.QuestionBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.StandardQuestionBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonQuestionBankStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class JsonQuestionBankStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonQuestionBankStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void readQuestionBank_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readQuestionBank(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private java.util.Optional\u003cQuestionBank\u003e readQuestionBank(String filePath) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return new JsonQuestionBankStorage(Paths.get(filePath)).readQuestionBank(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertFalse(readQuestionBank(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readQuestionBank(\"notJsonFormatQuestionBank.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void readQuestionBank_invalidQuestionQuestionBank_throwDataConversionException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readQuestionBank(\"invalidQuestionQuestionBank.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    void readQuestionBank_invalidAndValidQuestionQuestionBank_throwDataConversionException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readQuestionBank("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            \"invalidAndValidQuestionQuestionBank.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void readAndSaveQuestionBank_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Path filePath \u003d testFolder.resolve(\"TempQuestionBank.json\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // StandardQuestionBank original \u003d getTypicalQuestionBank();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // JsonQuestionBankStorage"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        //    jsonQuestionBankStorage \u003d new JsonQuestionBankStorage(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // jsonQuestionBankStorage.saveQuestionBank(original, filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // QuestionBank"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        //   readBack \u003d jsonQuestionBankStorage.readQuestionBank(filePath).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // assertEquals(original, new StandardQuestionBank(readBack));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // original.addQuestion(HOON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        //        original.removeQuestion(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // jsonQuestionBankStorage.saveQuestionBank(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // readBack \u003d jsonQuestionBankStorage.readQuestionBank(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // assertEquals(original, new StandardQuestionBank(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // original.addQuestion(IDA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // jsonQuestionBankStorage.saveQuestionBank(original); // file path not specified"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // readBack \u003d jsonQuestionBankStorage.readQuestionBank().get(); // file path not specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // assertEquals(original, new StandardQuestionBank(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void saveQuestionBank_nullQuestionBank_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveQuestionBank(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Saves {@code questionBank} at the specified {@code filePath}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void saveQuestionBank(QuestionBank questionBank,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                                  String filePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            new JsonQuestionBankStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "                    .saveQuestionBank(questionBank);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void saveQuestionBank_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveQuestionBank(new StandardQuestionBank(), null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 69,
      "limhawjia": 32
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/storage/questions/JsonSerializableStandardQuestionBankTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.storage.questions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.StandardQuestionBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.storage.question.JsonSerializableStandardQuestionBank;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import com.dukeacademy.testutil.TypicalQuestions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "class JsonSerializableStandardQuestionBankTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \"JsonSerializableQuestionBankTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final Path TYPICAL_QUESTIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalQuestionQuestionBank.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final Path INVALID_QUESTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidQuestionQuestionBank.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void toModelType_typicalQuestionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JsonSerializableStandardQuestionBank dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_QUESTIONS_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                JsonSerializableStandardQuestionBank.class).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardQuestionBank standardQuestionBankFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardQuestionBank typicalQuestionsStandardQuestionBank \u003d TypicalQuestions.getTypicalQuestionBank();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(this.checkQuestionBanksEqual(standardQuestionBankFromFile, typicalQuestionsStandardQuestionBank));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void toModelType_invalidQuestionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JsonSerializableStandardQuestionBank dataFromFile \u003d JsonUtil.readJsonFile(INVALID_QUESTION_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                JsonSerializableStandardQuestionBank.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Helper function to check if the questions in 2 question banks are equal."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param bank1 the first question bank to be checked."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param bank2 the second question bank to be checked."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the questions in both banks are equal."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean checkQuestionBanksEqual(StandardQuestionBank bank1, StandardQuestionBank bank2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        SortedList\u003cQuestion\u003e list1 \u003d bank1.getReadOnlyQuestionListObservable()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .sorted(Comparator.comparing(Question::getTitle));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        SortedList\u003cQuestion\u003e list2 \u003d bank2.getReadOnlyQuestionListObservable()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .sorted(Comparator.comparing(Question::getTitle));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (list1.size() !\u003d list2.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (list1.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return IntStream.range(0, list1.size())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .mapToObj(i -\u003e list1.get(i).checkContentsEqual(list2.get(i)))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .reduce((x, y) -\u003e x \u0026\u0026 y).get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 28,
      "limhawjia": 40
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/StandardCompilerEnvironmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.StandardCompilerEnvironment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.ClearEnvironmentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.ClosedEnvironmentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.CreateEnvironmentException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.JavaFileCreationException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.JavaFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class StandardCompilerEnvironmentTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * A folder should be created at the location path of the environment"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testConstructor() throws CreateEnvironmentException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path environmentPath \u003d tempFolder.resolve(\"constructor_test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        new StandardCompilerEnvironment(environmentPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(environmentPath.toFile().exists());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for nested folders"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path nestedEnvironmentPath \u003d tempFolder.resolve(\"nested\").resolve(\"constructor_test\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        new StandardCompilerEnvironment(nestedEnvironmentPath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(nestedEnvironmentPath.toFile().exists());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * User programs should be successfully written to created Java files. Returned JavaFile instance should also have"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the correct canonical name and classpath."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testCreateJavaFile() throws JavaFileCreationException, IOException, CreateEnvironmentException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path environmentPath \u003d tempFolder.resolve(\"createJavaFile_test\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardCompilerEnvironment environment \u003d new StandardCompilerEnvironment(environmentPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validFileName \u003d \"Test\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validContent \u003d \"public class Test { }\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile validJavaFile \u003d environment.createJavaFile(new UserProgram(validFileName, validContent));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile expectedJavaFile \u003d new JavaFile(validFileName, environmentPath.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedJavaFile, validJavaFile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // JavaFile class already ensures that the file exists"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validJavaFileContent \u003d Files.readString(validJavaFile.getFile().toPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validContent, validJavaFileContent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for packaged files"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validPackagedFileName \u003d \"packaged.Test\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validPackagedContent \u003d \"package packaged;\\n\\npublic class Test { }\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile validPackagedJavaFile \u003d environment.createJavaFile(new UserProgram(validPackagedFileName,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                validPackagedContent));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Package name must be added manually to form canonical name. Note that UserProgram takes the class name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // while JavaFile takes the canonical name as arguments for their constructors"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile expectedPackagedJavaFile \u003d new JavaFile(validPackagedFileName,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                environmentPath.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedPackagedJavaFile, validPackagedJavaFile);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validPackagedFileContent \u003d Files.readString(validPackagedJavaFile.getFile().toPath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(validPackagedContent, validPackagedFileContent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Created Java files should be returned with the correct attribute values."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testGetJavaFile() throws JavaFileCreationException, IOException, CreateEnvironmentException,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path environmentPath \u003d tempFolder.resolve(\"getJavaFile_test\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardCompilerEnvironment environment \u003d new StandardCompilerEnvironment(environmentPath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validFileName \u003d \"Test\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validContent \u003d \"public class Test { }\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        environment.createJavaFile(new UserProgram(validFileName, validContent));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile expectedJavaFile \u003d new JavaFile(validFileName, environmentPath.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedJavaFile, environment.getJavaFile(\"Test\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for packaged files"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validPackagedFileName \u003d \"packaged.Test\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String validPackagedContent \u003d \"package packaged;\\n\\npublic class Test { }\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        environment.createJavaFile(new UserProgram(validPackagedFileName, validPackagedContent));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile expectedPackagedJavaFile \u003d new JavaFile(validPackagedFileName, environmentPath.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedPackagedJavaFile, environment.getJavaFile(validPackagedFileName));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * After closing, the folder in which the environment was created should be deleted."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testClose() throws CreateEnvironmentException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path environmentPath \u003d tempFolder.resolve(\"close_test\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardCompilerEnvironment environment \u003d new StandardCompilerEnvironment(environmentPath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(environmentPath.toFile().exists());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        environment.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(environmentPath.toFile().exists());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(ClosedEnvironmentException.class, () -\u003e environment"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .createJavaFile(new UserProgram(\"\", \"\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(ClosedEnvironmentException.class, () -\u003e environment.getJavaFile(\"\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(ClosedEnvironmentException.class, environment::clearEnvironment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(ClosedEnvironmentException.class, environment::close);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * After clearing, all files previously found in the environment should be deleted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testClearEnvironment() throws IOException, ClearEnvironmentException, CreateEnvironmentException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path environmentPath \u003d tempFolder.resolve(\"clear_test\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardCompilerEnvironment environment \u003d new StandardCompilerEnvironment(environmentPath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        environmentPath.resolve(\"testfile1\").toFile().createNewFile();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        environmentPath.resolve(\"testfile2.java\").toFile().createNewFile();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        environmentPath.resolve(\"testfile3.class\").toFile().createNewFile();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        environment.clearEnvironment();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(environmentPath.toFile().listFiles().length \u003d\u003d 0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 6,
      "limhawjia": 127
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/StandardCompilerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.StandardCompiler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.CompilerException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.exceptions.CompilerFileContentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.JavaFileCreationException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.JavaFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class StandardCompilerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final UserProgram validProgram \u003d new UserProgram(\"ValidTest\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \"public class ValidTest {\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\tpublic static void main(String args[]) {\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\t\\tSystem.out.println(\\\"Hello world\\\");\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\t}\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\n}\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final UserProgram nestedProgram \u003d new UserProgram(\"ValidTest1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \"public class ValidTest1 {\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\tclass NestedClass {\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\t\\tprivate int x \u003d 0;\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\t}\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\tpublic static void main(String args[]) {\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\t\\tSystem.out.println(\\\"Hello world\\\");\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\t}\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"\\n}\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final UserProgram compileErrorProgram \u003d new UserProgram(\"FooBar\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \"public class FooBar {\\n\\t\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"int a  \u003d \\\"I am a string!\\\"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"}\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testCompileProgram() throws CompilerException, CompilerFileContentException,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IOException, JavaFileCreationException, IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path testFolder \u003d tempFolder.resolve(\"compile_test\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testFolder.toFile().mkdirs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardCompiler compiler \u003d new StandardCompiler();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile validJavaFile \u003d this.createJavaFile(validProgram, testFolder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        compiler.compileJavaFile(validJavaFile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path validJavaFilePath \u003d testFolder.resolve(validProgram.getCanonicalName() + \".java\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path validClassFilePath \u003d testFolder.resolve(validProgram.getCanonicalName() + \".class\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(validJavaFilePath.toFile().exists());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(validClassFilePath.toFile().exists());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for nested classes"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile validJavaFile1 \u003d this.createJavaFile(nestedProgram, testFolder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        compiler.compileJavaFile(validJavaFile1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path validJavaFilePath1 \u003d testFolder.resolve(nestedProgram.getCanonicalName() + \".java\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path validClassFilePath1 \u003d testFolder.resolve(nestedProgram.getCanonicalName() + \".class\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Nested classes should also be generated"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path validClassFilePath2 \u003d testFolder.resolve(\"ValidTest1$NestedClass.class\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(validJavaFilePath1.toFile().exists());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(validClassFilePath1.toFile().exists());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(validClassFilePath2.toFile().exists());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testCompileProgram_invalid() throws IOException, JavaFileCreationException,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path testFolder \u003d tempFolder.resolve(\"compileInvalid_test\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testFolder.toFile().mkdirs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardCompiler compiler \u003d new StandardCompiler();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile compileErrorFile \u003d this.createJavaFile(compileErrorProgram, testFolder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(CompilerFileContentException.class, () -\u003e compiler.compileJavaFile(compileErrorFile));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates a Java file within a folder for the test. Note that this method only works for non-packaged classes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private JavaFile createJavaFile(UserProgram program, Path folder) throws IOException, JavaFileCreationException,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path filePath \u003d folder.resolve(program.getCanonicalName() + \".java\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File javaFile \u003d filePath.toFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!javaFile.createNewFile()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new JavaFileCreationException(\"Unable to create file\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(filePath, program.getSourceCode());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new JavaFile(program.getCanonicalName(), folder.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 6,
      "limhawjia": 95
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/StandardProgramExecutorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.ExecutionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.StandardProgramExecutor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.exceptions.ProgramExecutorException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ClassFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ProgramInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.models.ProgramOutput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class StandardProgramExecutorTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private static final Path testProgramsFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \"ProgramExecutor\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test void testExecuteValidProgramNoInput() throws IOException, ProgramExecutorException, ExecutionException,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            InterruptedException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardProgramExecutor executor \u003d new StandardProgramExecutor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile program \u003d new ClassFile(\"NoInputTest\", testProgramsFolder.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput output \u003d executor.executeProgram(program, new ProgramInput(\"\")).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expectedOutput \u003d Files.readString(testProgramsFolder.resolve(\"NoInputTestResult.txt\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(output.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedOutput, output.getOutput());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test void testExecuteValidProgramWithInput() throws IOException, ProgramExecutorException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ExecutionException, InterruptedException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardProgramExecutor executor \u003d new StandardProgramExecutor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile program \u003d new ClassFile(\"WithInputTest\", testProgramsFolder.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String input \u003d Files.readString(testProgramsFolder.resolve(\"Input.txt\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput output \u003d executor.executeProgram(program, new ProgramInput(input)).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expectedOutput \u003d Files.readString(testProgramsFolder.resolve(\"WithInputTestResult.txt\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(output.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedOutput, output.getOutput());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test void testExecuteProgramRuntimeError() throws ProgramExecutorException, FileNotFoundException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ExecutionException, InterruptedException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardProgramExecutor executor \u003d new StandardProgramExecutor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile programClassFile \u003d new ClassFile(\"OutOfBounds\", testProgramsFolder.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput output \u003d executor.executeProgram(programClassFile, new ProgramInput(\"\")).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(output.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "limhawjia": 60
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/TestExecutorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestCaseResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.program.TestResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.Compiler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.compiler.StandardCompiler;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.CompilerEnvironment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.StandardCompilerEnvironment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.CreateEnvironmentException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.EmptyUserProgramException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.TestExecutorException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.ProgramExecutor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.executor.StandardProgramExecutor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestExecutorTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Path tempFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TestExecutor executor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Reinitialize test entities."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void initialize() throws CreateEnvironmentException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CompilerEnvironment environment \u003d new StandardCompilerEnvironment(tempFolder.resolve(\"test\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Compiler compiler \u003d new StandardCompiler();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramExecutor executor \u003d new StandardProgramExecutor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.executor \u003d new TestExecutor(environment, compiler, executor, 20);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes any remnant files after each test."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void close() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.walk(tempFolder)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(path -\u003e !path.equals(tempFolder))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(Path::toFile)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .forEach(File::delete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Run test cases against a simple program to calculate fibonacci."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void runTestCasesFib() throws IOException, TestExecutorException,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException, EmptyUserProgramException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load test cases"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path rootFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"fib\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d this.loadTestCases(rootFolder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load user program"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program \u003d rootFolder.resolve(\"fib.txt\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode \u003d Files.readString(program);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(\"Fib\", sourceCode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check results"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result \u003d executor.runTestCases(testCases, userProgram);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(5, result.getNumPassed());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result.getCompileError().isEmpty());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCaseResult\u003e testCaseResults \u003d result.getResults();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(testCases.size(), testCaseResults.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(matchTestCaseAndResults(testCases, testCaseResults));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Run test cases against a simple program to check for duplicates."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void runTestCasesDuplicates() throws IOException, TestExecutorException,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException, EmptyUserProgramException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load test cases"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path rootFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"duplicates\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d this.loadTestCases(rootFolder);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load program"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program \u003d rootFolder.resolve(\"duplicates.txt\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode \u003d Files.readString(program);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(\"Duplicates\", sourceCode);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check results"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result \u003d executor.runTestCases(testCases, userProgram);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(5, result.getNumPassed());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result.getCompileError().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCaseResult\u003e testCaseResults \u003d result.getResults();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(testCases.size(), testCaseResults.size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(matchTestCaseAndResults(testCases, testCaseResults));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Runs test cases against a program that relies on a nested class."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void runTestCaseNestedClass() throws IOException, TestExecutorException,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException, EmptyUserProgramException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load test cases"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path rootFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"nested\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d this.loadTestCases(rootFolder);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load program"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program \u003d rootFolder.resolve(\"nested.txt\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode \u003d Files.readString(program);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(\"Nested\", sourceCode);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check results"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result \u003d executor.runTestCases(testCases, userProgram);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(5, result.getNumPassed());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result.getCompileError().isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCaseResult\u003e testCaseResults \u003d result.getResults();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(testCases.size(), testCaseResults.size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(matchTestCaseAndResults(testCases, testCaseResults));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Runs test cases against a program that is packaged."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void runTestCasePackaged() throws IOException, EmptyUserProgramException, TestExecutorException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load test cases"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path rootFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"packaged\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d this.loadTestCases(rootFolder);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load program"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program \u003d rootFolder.resolve(\"packaged.txt\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode \u003d Files.readString(program);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(\"packaged.inside.Packaged\", sourceCode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check results"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result \u003d executor.runTestCases(testCases, userProgram);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(5, result.getNumPassed());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result.getCompileError().isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCaseResult\u003e testCaseResults \u003d result.getResults();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(testCases.size(), testCaseResults.size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(matchTestCaseAndResults(testCases, testCaseResults));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Runs test cases against a program that will give a wrong answer."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void runIncorrectProgram() throws IOException, TestExecutorException,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException, EmptyUserProgramException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load test cases"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path rootFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"TestPrograms\", \"incorrect\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d this.loadTestCases(rootFolder);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load program"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path program \u003d rootFolder.resolve(\"incorrect.txt\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String sourceCode \u003d Files.readString(program);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram userProgram \u003d new UserProgram(\"Incorrect\", sourceCode);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check results"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result \u003d executor.runTestCases(testCases, userProgram);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(result.getCompileError().isPresent());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, result.getNumPassed());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        result.getResults().stream().forEach(testCaseResult -\u003e {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assertFalse(testCaseResult.isSuccessful());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assertTrue(testCaseResult.getActualOutput().isPresent());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            assertEquals(\"Correct solution\" + System.lineSeparator(), testCaseResult.getExpectedOutput());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "            assertEquals(\"Wrong solution\" + System.lineSeparator(), testCaseResult.getActualOutput().get());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Runs test cases against programs that will result in a compile error."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCompileError() throws TestExecutorException, IncorrectCanonicalNameException,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            EmptyUserProgramException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Compile error due to unrecognized symbol"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program \u003d new UserProgram(\"CompileError\", \"public class CompileError {\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"Scanner sc;\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"}\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result \u003d executor.runTestCases(new ArrayList\u003c\u003e(), program);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result.getCompileError().isPresent());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Compile error due to incorrect use of keyword"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program1 \u003d new UserProgram(\"CompileError\", \"public class CompileError {\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"package abc \u003d 123;\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"}\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult result1 \u003d executor.runTestCases(new ArrayList\u003c\u003e(), program1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(result1.getCompileError().isPresent());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Run test cases against programs that will result in a runtime error."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testRuntimeError() throws IOException, TestExecutorException,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException, EmptyUserProgramException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Load test cases - index out of bounds program"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path programPath \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"TestPrograms\", \"errors\", \"indexoutofbounds.txt\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram program \u003d new UserProgram(\"Main\", Files.readString(programPath));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Mock empty test cases"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestCase mockTestCase \u003d new TestCase(\"\", \"\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e mockTestCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTestCases.add(mockTestCase);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTestCases.add(mockTestCase);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTestCases.add(mockTestCase);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check results"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TestResult results \u003d executor.runTestCases(mockTestCases, program);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(results.getCompileError().isEmpty());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(0, results.getNumPassed());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        IntStream.range(0, 3).forEach(index -\u003e {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TestCaseResult result \u003d results.getResults().get(index);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assertFalse(result.isSuccessful());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assertTrue(result.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Tests that an empty program will throw an error"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEmptyProgramException() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(EmptyUserProgramException.class, () -\u003e executor"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .runTestCases(new ArrayList\u003c\u003e(), new UserProgram(\"Main\", \"\")));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Tests that a program with a non-matching canonical name will throw an error"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testIncorrectClassNameException() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram invalidProgram \u003d new UserProgram(\"Main\", \"public class Man {}\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IncorrectCanonicalNameException.class, () -\u003e executor"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .runTestCases(new ArrayList\u003c\u003e(), invalidProgram));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram invalidProgram1 \u003d new UserProgram(\"Main\", \"public class Test \""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"{ public class Main { } }\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IncorrectCanonicalNameException.class, () -\u003e executor"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .runTestCases(new ArrayList\u003c\u003e(), invalidProgram1));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UserProgram invalidProgram2 \u003d new UserProgram(\"Main\", \"package FooBar;\\n\""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"public class Main {}\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(IncorrectCanonicalNameException.class, () -\u003e executor"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .runTestCases(new ArrayList\u003c\u003e(), invalidProgram2));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Load test cases from a root folder. Each test case is generated from an input text file following"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the naming convention \"test1.txt\", \"test2.txt\", etc and its corresponding expected value text file"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * following the naming convention \"expected1.txt\", \"expected2.txt\", etc."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param rootFolder the path to the root folder that contains the text files."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a list of corresponding test cases."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException if the files cannot be found or read."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cTestCase\u003e loadTestCases(Path rootFolder) throws IOException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test1 \u003d Files.readString(rootFolder.resolve(\"test1.txt\"));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test2 \u003d Files.readString(rootFolder.resolve(\"test2.txt\"));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test3 \u003d Files.readString(rootFolder.resolve(\"test3.txt\"));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test4 \u003d Files.readString(rootFolder.resolve(\"test4.txt\"));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String test5 \u003d Files.readString(rootFolder.resolve(\"test5.txt\"));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected1 \u003d Files.readString(rootFolder.resolve(\"expected1.txt\"));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected2 \u003d Files.readString(rootFolder.resolve(\"expected2.txt\"));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected3 \u003d Files.readString(rootFolder.resolve(\"expected3.txt\"));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected4 \u003d Files.readString(rootFolder.resolve(\"expected4.txt\"));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expected5 \u003d Files.readString(rootFolder.resolve(\"expected5.txt\"));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTestCase\u003e testCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test1, expected1));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test2, expected2));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test3, expected3));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test4, expected4));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        testCases.add(new TestCase(test5, expected5));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return testCases;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Compares a list of test cases and results sequentially and checks that each result is successful and that"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * its actual and expected outputs matches those specified in the test case."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param testCases the list of test cases to be checked against."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param results   the list of results to be checked."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if all the results match the criteria."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean matchTestCaseAndResults(List\u003cTestCase\u003e testCases, List\u003cTestCaseResult\u003e results) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return IntStream.range(0, testCases.size())"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .mapToObj(index -\u003e {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    TestCaseResult result \u003d results.get(index);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    if (result.getActualOutput().isEmpty() || !result.isSuccessful()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    return testCases.stream()"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                            .anyMatch(testCase -\u003e testCase.getExpectedResult().equals(result.getActualOutput().get())"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                                    \u0026\u0026 testCase.getExpectedResult().equals(result.getExpectedOutput()));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                }).reduce((x, y) -\u003e x \u0026\u0026 y)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElse(false);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 2,
      "limhawjia": 329
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/TestExecutorUtilsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TestExecutorUtilsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void checkCanonicalNameMatchesProgram() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check without package statement"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Without nested classes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName \u003d \"Main\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program \u003d \"public class Main { }\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName, program));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // With package statement"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName1 \u003d \"packaged.inside.Main\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program1 \u003d \"package packaged.inside;\\n public class Main { }\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName1, program1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // With multiple outer classes of various order"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName2 \u003d \"Main\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program2 \u003d \"public class Test {}\\n public class Main{} \\n public class Util{}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName2, program2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // With nested classes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName3 \u003d \"packaged.inside.Main\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program3 \u003d \"package packaged.inside; \\n class Main{public class Test{}}\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName3, program3));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // With methods and attributes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName4 \u003d \"Main\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program4 \u003d \"public class Main { \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"public int x \u003d 2; \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"public void sayHello() { System.out.println(\\\"hello\\\"} \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"}\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName4, program4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Exceptions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // No space after class keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName16 \u003d \"Main\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program16 \u003d \"public classMain{}\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName16, program16));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Class is an inner class"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName17 \u003d \"packaged.inside.Main\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program17 \u003d \"package packaged.inside;\\n public class Test { public class Main{}}\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName17, program17));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Package statement does not match"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName18 \u003d \"packaged.inside.Main\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program18 \u003d \"package packaged.outside.Main;  \\npublic class Main {}\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName18, program18));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Multiple classes with the same name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName19 \u003d \"Main\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program19 \u003d \"class Main{} class Main{}\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName19, program19));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Class name is incorrect"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName20 \u003d \"Test\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program20 \u003d \"class Main{}\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName20, program20));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Missing closing brace"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName21 \u003d \"Main\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program21 \u003d \"public class Util { } \\n public class Main { public class Test {}\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName21, program21));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Inner class with missing opening brace"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName22 \u003d \"Main\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program22 \u003d \"public class Util public class Main { } }\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertFalse(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName22, program22));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Missing braces"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String canonicalName23 \u003d \"Main\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String program23 \u003d \"public class Test{} \\n public class Main public class Util{}\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(TestExecutorUtils.checkCanonicalNameMatchesProgram(canonicalName23, program23));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 84
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/models/ClassFileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ClassFileTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Instance creation should succeed if the class file actually exists."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testClassFileConstructorFileExists() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tempFolder.resolve(\"Foo.class\").toFile().createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        new ClassFile(\"Foo\", basePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when the class is packaged"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.resolve(\"Foo.class\").toFile().createNewFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        new ClassFile(\"packaged.inside.Foo\", basePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testJavaFileConstructorAndGetters() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tempFolder.resolve(\"Foo.class\").toFile().createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile fooFile \u003d new ClassFile(\"Foo\", basePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"Foo\", fooFile.getCanonicalName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(basePath, fooFile.getClassPath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when the class is packaged"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.resolve(\"Foo.class\").toFile().createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile packagedFooFile \u003d new ClassFile(\"packaged.inside.Foo\", basePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"packaged.inside.Foo\", packagedFooFile.getCanonicalName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(basePath, packagedFooFile.getClassPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Instance creation should fail if the class does not exist. A FileNotFoundException should be thrown."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testClassFileConstructorFileDoesNotExists() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new ClassFile(\"Foo\", basePath));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new ClassFile(\"\", basePath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new ClassFile(\"Foo\", \"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when another file exists in the folder"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tempFolder.resolve(\"Bar.class\").toFile().createNewFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new ClassFile(\"Foo\", basePath));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when the classpath is wrong"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new ClassFile(\"Bar\", \"/duke/academy\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when package is not reflected in canonical name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.resolve(\"Foo.class\").toFile().createNewFile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new ClassFile(\"Foo\", basePath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testClassFileConstructorNullArguments() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClassFile(null, basePath));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClassFile(\"Foo\", null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testGetAbsolutePath() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooPath \u003d tempFolder.resolve(\"Foo.class\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String fooExpectedAbsolutePath \u003d fooPath.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String fooActualAbsolutePath \u003d new ClassFile(\"Foo\", basePath).getAbsolutePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(fooExpectedAbsolutePath, fooActualAbsolutePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check absolute path for packaged classes"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path barPackageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"nested\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        barPackageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path barPath \u003d barPackageFolders.resolve(\"Bar.class\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        barPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String barExpectedAbsolutePath \u003d barPath.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String barActualAbsolutePath \u003d new ClassFile(\"Bar\", barPackageFolders.toString())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getAbsolutePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(barExpectedAbsolutePath, barActualAbsolutePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testGetFile() throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooPath \u003d tempFolder.resolve(\"Foo.class\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File expectedFooFile \u003d fooPath.toFile();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File actualFooFile \u003d new ClassFile(\"Foo\", basePath).getFile();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedFooFile, actualFooFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check File for packaged classes."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path barPackageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"nested\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        barPackageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path barPath \u003d barPackageFolders.resolve(\"Bar.class\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        barPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File expectedBarFile \u003d barPath.toFile();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File actualBarFile \u003d new ClassFile(\"Bar\", barPackageFolders.toString()).getFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedBarFile, actualBarFile);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooPath \u003d tempFolder.resolve(\"Foo.class\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path barPath \u003d tempFolder.resolve(\"Bar.class\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        barPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile fooFile1 \u003d new ClassFile(\"Foo\", basePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile fooFile2 \u003d new ClassFile(\"Foo\", basePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(fooFile1, fooFile2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile barFile \u003d new ClassFile(\"Bar\", basePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(fooFile1, barFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for classes with the same name but different class paths."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"nested\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packagedFooPath \u003d packageFolders.resolve(\"Foo.class\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packagedFooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClassFile packagedFooFile \u003d new ClassFile(\"Foo\", packageFolders.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(fooFile1, packagedFooFile);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 144
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/models/CompileErrorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class CompileErrorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testConstructorAndGetter() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String errorMessage \u003d \"Hello, this is a compile error!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CompileError error \u003d new CompileError(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(errorMessage, error.getErrorMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String errorMessage \u003d \"Hello, this is a compile error!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String alternateErrorMessage \u003d \"Hello, this is an alternate compile error!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CompileError error1 \u003d new CompileError(errorMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CompileError error2 \u003d new CompileError(errorMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(error1, error2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CompileError error3 \u003d new CompileError(alternateErrorMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(error1, error3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 28
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/models/JavaFileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.environment.exceptions.JavaFileCreationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.IncorrectCanonicalNameException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class JavaFileTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @TempDir public Path tempFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String fooProgram \u003d \"public class Foo {}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private final String insideFooProgram \u003d \"package packaged.inside;\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"public class Foo {}\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Instance creation should succeed if the class file actually exists."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testJavaFileConstructorFileExists() throws IOException, JavaFileCreationException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path filePath \u003d tempFolder.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        filePath.toFile().createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(filePath, fooProgram);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        new JavaFile(\"Foo\", basePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when the class is packaged"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packagedFilePath \u003d packageFolders.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packagedFilePath.toFile().createNewFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(packagedFilePath, insideFooProgram);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        new JavaFile(\"packaged.inside.Foo\", basePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testJavaFileConstructorAndGetters() throws IOException, JavaFileCreationException,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path filePath \u003d tempFolder.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        filePath.toFile().createNewFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(filePath, fooProgram);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile fooFile \u003d new JavaFile(\"Foo\", basePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"Foo\", fooFile.getCanonicalName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(basePath, fooFile.getClassPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when the class is packaged"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packagedFilePath \u003d packageFolders.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packagedFilePath.toFile().createNewFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(packagedFilePath, insideFooProgram);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile packagedFooFile \u003d new JavaFile(\"packaged.inside.Foo\", basePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"packaged.inside.Foo\", packagedFooFile.getCanonicalName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(basePath, packagedFooFile.getClassPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testJavaFileConstructorMismatchedCanonicalName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Instance creation should fail if the class does not exist. A FileNotFoundException should be thrown."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testJavaFileConstructorFileDoesNotExists() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new JavaFile(\"Foo\", basePath));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new JavaFile(\"\", basePath));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new JavaFile(\"Foo\", \"\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when another file exists in the folder"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tempFolder.resolve(\"Bar.class\").toFile().createNewFile();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new JavaFile(\"Foo\", basePath));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when the classpath is wrong"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new JavaFile(\"Bar\", \"/duke/academy\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests when package is not reflected in canonical name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.resolve(\"Foo.java\").toFile().createNewFile();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e new JavaFile(\"Foo\", basePath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    @Test void testJavaFileConstructorNullArguments() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JavaFile(null, basePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JavaFile(\"Foo\", null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testGetAbsolutePath() throws IOException, JavaFileCreationException, IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooPath \u003d tempFolder.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(fooPath, fooProgram);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String fooExpectedAbsolutePath \u003d fooPath.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String fooActualAbsolutePath \u003d new JavaFile(\"Foo\", basePath).getAbsolutePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(fooExpectedAbsolutePath, fooActualAbsolutePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check absolute path for packaged classes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooPackageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooPackageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooInsidePath \u003d fooPackageFolders.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooInsidePath.toFile().createNewFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(fooInsidePath, insideFooProgram);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String fooInsideExpectedPath \u003d fooInsidePath.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String fooInsideActualPath \u003d new JavaFile(\"packaged.inside.Foo\", basePath)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .getAbsolutePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(fooInsideExpectedPath, fooInsideActualPath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testGetFile() throws IOException, JavaFileCreationException, IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooPath \u003d tempFolder.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(fooPath, fooProgram);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File expectedFooFile \u003d fooPath.toFile();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File actualFooFile \u003d new JavaFile(\"Foo\", basePath).getFile();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedFooFile, actualFooFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Check File for packaged classes."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooPackageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooPackageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path insideFooPath \u003d fooPackageFolders.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        insideFooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(insideFooPath, insideFooProgram);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File expectedInsideFooFile \u003d insideFooPath.toFile();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File actualInsideFooFile \u003d new JavaFile(\"packaged.inside.Foo\", basePath).getFile();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(expectedInsideFooFile, actualInsideFooFile);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() throws IOException, JavaFileCreationException, IncorrectCanonicalNameException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String basePath \u003d tempFolder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path fooPath \u003d tempFolder.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        fooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(fooPath, fooProgram);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path barPath \u003d tempFolder.resolve(\"Bar.java\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        barPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(barPath, \"public class Bar {}\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile fooFile1 \u003d new JavaFile(\"Foo\", basePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile fooFile2 \u003d new JavaFile(\"Foo\", basePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(fooFile1, fooFile2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile barFile \u003d new JavaFile(\"Bar\", basePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(fooFile1, barFile);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for classes with the same name but different class paths."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packageFolders \u003d tempFolder.resolve(\"packaged\").resolve(\"inside\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packageFolders.toFile().mkdirs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Path packagedFooPath \u003d packageFolders.resolve(\"Foo.java\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        packagedFooPath.toFile().createNewFile();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Files.writeString(packagedFooPath, insideFooProgram);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        JavaFile packagedFooFile \u003d new JavaFile(\"packaged.inside.Foo\", basePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(fooFile1, packagedFooFile);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 8,
      "limhawjia": 174
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/models/ProgramInputTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ProgramInputTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testConstructorAndGetter() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String testString \u003d \"This is a test String!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramInput input \u003d new ProgramInput(testString);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(testString, input.getInput());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProgramInput(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String testString \u003d \"This is a test String!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String alternateTestString \u003d \"This is an alternate test String!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(new ProgramInput(testString), new ProgramInput(testString));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(new ProgramInput(testString), new ProgramInput(alternateTestString));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 27
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/models/ProgramOutputTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.testexecutor.exceptions.ProgramOutputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class ProgramOutputTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   void testStaticConstructorsAndGetters() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput emptyOutput \u003d ProgramOutput.getEmptyProgramOutput();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"\", emptyOutput.getOutput());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(Optional.empty(), emptyOutput.getRuntimeError());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String errorMessage \u003d \"This is a test error message!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput errorProgramOutput \u003d ProgramOutput.getErroredProgramOutput(errorMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"\", errorProgramOutput.getOutput());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertTrue(errorProgramOutput.getRuntimeError().isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(errorMessage, errorProgramOutput.getRuntimeError().get().getErrorMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testAppend() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String errorMessage \u003d \"This is a test error message!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String append1 \u003d \"append1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String append2 \u003d \"append2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String append3 \u003d \"append3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput programAppend \u003d ProgramOutput.getEmptyProgramOutput();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Errored program outputs should not have outputs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput testOutput \u003d ProgramOutput.getEmptyProgramOutput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput erroredProgramOutput \u003d ProgramOutput.getErroredProgramOutput(errorMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(ProgramOutputException.class, () -\u003e erroredProgramOutput.append(append1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(ProgramOutputException.class, () -\u003e erroredProgramOutput.append(testOutput));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for immutability"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programAppend.append(append1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"\", programAppend.getOutput());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Regular tests"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programAppend \u003d programAppend.append(append1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(append1, programAppend.getOutput());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programAppend \u003d programAppend.append(append2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(append1 + append2, programAppend.getOutput());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput testOutput1 \u003d ProgramOutput.getEmptyProgramOutput().append(append3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programAppend \u003d programAppend.append(testOutput1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(append1 + append2 + append3, programAppend.getOutput());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testAppendNewLine() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String errorMessage \u003d \"This is a test error message!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String append1 \u003d \"append1\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String append2 \u003d \"append2\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String append3 \u003d \"append3\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput programAppend \u003d ProgramOutput.getEmptyProgramOutput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Errored program outputs should not have outputs"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput testOutput \u003d ProgramOutput.getEmptyProgramOutput();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput erroredProgramOutput \u003d ProgramOutput.getErroredProgramOutput(errorMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(ProgramOutputException.class, () -\u003e erroredProgramOutput.appendNewLine(append1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertThrows(ProgramOutputException.class, () -\u003e erroredProgramOutput.appendNewLine(testOutput));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Tests for immutability"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programAppend.appendNewLine(append1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(\"\", programAppend.getOutput());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Regular tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programAppend \u003d programAppend.appendNewLine(append1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(append1, programAppend.getOutput());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programAppend \u003d programAppend.appendNewLine(append2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(append1 + \"\\n\" + append2, programAppend.getOutput());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ProgramOutput testOutput1 \u003d ProgramOutput.getEmptyProgramOutput().append(append3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        programAppend \u003d programAppend.appendNewLine(testOutput1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(append1 + \"\\n\" + append2 + \"\\n\" + append3, programAppend.getOutput());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String output \u003d \"This is an output!\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String alternateOutput \u003d \"This is an alternate output!\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(ProgramOutput.getEmptyProgramOutput().append(output),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                ProgramOutput.getEmptyProgramOutput().append(output));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(ProgramOutput.getEmptyProgramOutput().append(output),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                ProgramOutput.getEmptyProgramOutput().append(alternateOutput));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String errorMessage \u003d \"This is an error message!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String alternateErrorMessage \u003d \"This is an alternate error message!\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(ProgramOutput.getErroredProgramOutput(errorMessage),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                ProgramOutput.getErroredProgramOutput(errorMessage));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(ProgramOutput.getErroredProgramOutput(errorMessage),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                ProgramOutput.getErroredProgramOutput(alternateErrorMessage));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 109
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testexecutor/models/RuntimeErrorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testexecutor.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class RuntimeErrorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testConstructorAndGetter() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String errorMessage \u003d \"Hello, this is a runtime error!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        RuntimeError error \u003d new RuntimeError(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(errorMessage, error.getErrorMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String errorMessage \u003d \"Hello, this is a compile error!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String alternateErrorMessage \u003d \"Hello, this is an alternate compile error!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        RuntimeError error1 \u003d new RuntimeError(errorMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        RuntimeError error2 \u003d new RuntimeError(errorMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertEquals(error1, error2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        RuntimeError error3 \u003d new RuntimeError(alternateErrorMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assertNotEquals(error1, error3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 28
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/MockCommand.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Mock class for testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class MockCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public MockCommand(String arguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (arguments !\u003d \"\") {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidCommandArgumentsException(\"Invalid arguments\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static CommandResult getExpectedCommandResult() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alxkohh"
        },
        "content": "        return new CommandResult(\"AbCdEfG1315r!\", false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return getExpectedCommandResult();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alxkohh": 1,
      "limhawjia": 25
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/MockCommandFactory.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.commands.exceptions.InvalidCommandArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Mock class for testing purposes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class MockCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"test\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command getCommand(String commandArguments) throws InvalidCommandArgumentsException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new MockCommand(commandArguments);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/MockNotesLogic.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.data.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NoteSubmissionChannel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.notes.NotesLogic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.notes.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.StandardObservable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Mock implementation of NotesLogic interface for testing purposes. The only 2 supported operations are addNote(Note)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * and saveNoteFromNoteSubmissionChannel(). saveNoteFromNoteSubmissionChannel will replace the current note,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * BEFORE_SAVE_NOTE with the AFTER_SAVE_NOTE."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class MockNotesLogic implements NotesLogic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static final Note BEFORE_SAVE_NOTE \u003d new Note(\"test\", \"before save\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static final Note AFTER_SAVE_NOTE \u003d BEFORE_SAVE_NOTE.withNewNoteContents(\"after save\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ObservableList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StandardObservable\u003cPair\u003cNote, WritableImage\u003e\u003e currentNoteObservable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public MockNotesLogic() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notes.add(BEFORE_SAVE_NOTE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.currentNoteObservable \u003d new StandardObservable\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.currentNoteObservable.setValue(new Pair\u003c\u003e(BEFORE_SAVE_NOTE, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setNoteSubmissionChannel(NoteSubmissionChannel noteSubmissionChannel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ObservableList\u003cNote\u003e getAllNotesList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addNoteWithSketch(Note note, WritableImage sketch) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notes.add(note);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cNote\u003e saveNoteFromNoteSubmissionChannel() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notes.remove(BEFORE_SAVE_NOTE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.notes.add(AFTER_SAVE_NOTE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.currentNoteObservable.setValue(new Pair\u003c\u003e(AFTER_SAVE_NOTE, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(AFTER_SAVE_NOTE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void replaceNote(Note oldNote, Note newNote, WritableImage newSketch) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Observable\u003cPair\u003cNote, WritableImage\u003e\u003e getSelectedNote() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.currentNoteObservable;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Note selectNote(int id) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void selectNote(Note note) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Note deleteNote(int id) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 87
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/MockQuestionsLogic.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.logic.question.QuestionsLogic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.exceptions.QuestionNotFoundRuntimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Observable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.StandardObservable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * This is a non persistent implementation of QuestionsLogic for testing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class MockQuestionsLogic implements QuestionsLogic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ObservableList\u003cQuestion\u003e questions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private FilteredList\u003cQuestion\u003e filteredQuestions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StandardObservable\u003cQuestion\u003e selectedQuestion;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private MockQuestionsLogic() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static MockQuestionsLogic getMockQuestionsLogicWithTypicalQuestions() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        MockQuestionsLogic logic \u003d new MockQuestionsLogic();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logic.questions \u003d FXCollections.observableList(TypicalQuestions.getTypicalQuestions());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logic.filteredQuestions \u003d new FilteredList\u003c\u003e(logic.questions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        logic.selectedQuestion \u003d new StandardObservable\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getAllQuestionsList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return FXCollections.unmodifiableObservableList(this.questions);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionsList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.filteredQuestions;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void filterQuestionsList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.filteredQuestions.setPredicate(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questions.add(question);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addQuestions(Collection\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questions.addAll(questions);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addQuestionsFromPath(Path questionsFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Question getQuestion(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.questions.stream().filter(question -\u003e question.getId() \u003d\u003d index)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst().orElseThrow(QuestionNotFoundRuntimeException::new);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setQuestion(int index, Question newQuestion) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question oldQuestion \u003d this.questions.stream().filter(question -\u003e question.getId() \u003d\u003d index)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst().orElseThrow(QuestionNotFoundRuntimeException::new);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.replaceQuestion(oldQuestion, newQuestion);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void replaceQuestion(Question oldQuestion, Question newQuestion) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int index \u003d this.questions.indexOf(oldQuestion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questions.set(index, newQuestion);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteAllQuestions() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.questions.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Observable\u003cQuestion\u003e getSelectedQuestion() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.selectedQuestion;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void selectQuestion(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Question selectedQuestion \u003d this.filteredQuestions.get(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.selectedQuestion.setValue(selectedQuestion);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 5,
      "limhawjia": 96
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/TestListener.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.observable.Listener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Listener for testing purposes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * @param \u003cT\u003e generic for type of data to listen to."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TestListener\u003cT\u003e implements Listener\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private T latestValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public T getLatestValue() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.latestValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void onUpdate(T value) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.latestValue \u003d value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 20
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/testutil/TypicalQuestions.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "package com.dukeacademy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.QuestionBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.StandardQuestionBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.UserProgram;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Difficulty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.TestCase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.model.question.entities.Topic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " * A utility class containing a list of {@code Question} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "public class TypicalQuestions {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question TWO_NUMBER_ADDER \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Two Number Adder\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.PASSED)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.EASY)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.OTHERS)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"1 2\", \"3\\n\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"100 2\", \"102\\n\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"Adder\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"public class Adder { public static void main(String[] args) { } }\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(\"description\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question VALID_SUDOKU \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Valid Sudoku\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.PASSED)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.MEDIUM)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.OTHERS, Topic.ARRAY, Topic.DYNAMIC_PROGRAMMING)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"1 2 3 4 5 6 7 8 9\", \"True\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"-1 -1 -1 -1\", \"False\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"Sudoku\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"public class Sudoku { public static void main(String[] args) { } }\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(\"description\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question PALINDROME_NUMBER \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Palindrome Number\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.PASSED)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.EASY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.OTHERS, Topic.RECURSION)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"12321\", \"True\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"10111\", \"False\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"Palindrome\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"public class Palindrome { public static void main(String[] args) { } }\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(\"description\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question SWAP_NODES_IN_PAIRS \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Swap nodes in pairs\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.NEW)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.MEDIUM)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.GRAPH, Topic.DYNAMIC_PROGRAMMING)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"5 12 33 23\", \"4132\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"2 31 01\", \"1232\"))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"NodePairs\", \"\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(\"description\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final Question MERGE_K_SORTED_LISTS \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTitle(\"Merge k Sorted Lists\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withStatus(Status.ATTEMPTED)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withDifficulty(Difficulty.HARD)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTopics(Topic.SORTING, Topic.LINKED_LIST)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withTestCases(new TestCase(\"3 5 3 4 1 99 0 21 34 123 3 21 3 1\", \"0 1 3 4 21 34 99 123\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    new TestCase(\"1 4 1 2 3 4\", \"1 2 3 4\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .withUserProgram(new UserProgram(\"Merge\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"public class Merge { public static void main(String[] args) { } }\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            .withDescription(\"description\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    private TypicalQuestions() {} // prevents instantiation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     * Returns an {@code QuestionBank} with all the typical persons."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static StandardQuestionBank getTypicalQuestionBank() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StandardQuestionBank ab \u003d new StandardQuestionBank();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (Question question : getTypicalQuestions()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "            ab.addQuestion(question);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static List\u003cQuestion\u003e getTypicalQuestions() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(TWO_NUMBER_ADDER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(VALID_SUDOKU);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(PALINDROME_NUMBER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(SWAP_NODES_IN_PAIRS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        questions.add(MERGE_K_SORTED_LISTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return questions;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 30,
      "limhawjia": 71
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/dukeacademy/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package com.dukeacademy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static com.dukeacademy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.dukeacademy.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 4,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import com.dukeacademy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangj1an"
        },
        "content": "\u003cfx:root type\u003d\"com.dukeacademy.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangj1an": 1,
      "-": 5
    }
  }
]
